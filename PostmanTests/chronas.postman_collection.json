{
	"info": {
		"_postman_id": "27529e6e-74fa-4e7d-97b5-c8814d133451",
		"name": "chronas",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "/auth/login",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7685d0e1-d10a-433e-8540-1305a00d2a00",
						"type": "text/javascript",
						"exec": [
							"var data = JSON.parse(responseBody);",
							"pm.globals.set(\"token\", data.token);",
							"",
							"",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response should contain token and username and should not be empty\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.token).to.not.be.empty;",
							"    pm.expect(jsonData.username).to.not.be.empty;",
							"});"
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [
					{
						"key": "",
						"value": "",
						"disabled": true
					},
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded",
						"disabled": true
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "password",
							"value": "postman123",
							"type": "text"
						},
						{
							"key": "email",
							"value": "postman@aui.de",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{baseUrl}}/v1/auth/login",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"v1",
						"auth",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "/metadata",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "64f7b683-4ef4-4943-b898-120824e08c4b",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response should contain _id, data and score\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[0]).to.have.property('_id');",
							"    pm.expect(jsonData[0]).to.have.property('data');",
							"    pm.expect(jsonData[0]).to.have.property('score');",
							"});"
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"username\":\"aui\",\n\t\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/v1/metadata/",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"v1",
						"metadata",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "/marker",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "bff90656-86a1-469a-9fdd-30e2a30bd375",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response should contain _id, data and score\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[0]).to.have.property('_id');",
							"    pm.expect(jsonData[0]).to.have.property('name');",
							"    pm.expect(jsonData[0]).to.have.property('wiki');",
							"    pm.expect(jsonData[0]).to.have.property('coo');    ",
							"});"
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"username\":\"aui\",\n\t\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/v1/markers/",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"v1",
						"markers",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "/users - get a list of users",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a29c66f8-a2a6-4399-a552-d1db0a7ae7c4",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Response should have a list of users\", function () {",
							"    var jsonData = pm.response.json();",
							"    ",
							"    pm.expect(jsonData[0]).to.have.property('username');",
							"    pm.expect(jsonData[0]).to.have.property('name');",
							"    pm.expect(jsonData[0]).to.have.property('privilege');",
							"    ",
							"});",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							""
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"username\":\"testUser\",\n\t\"privilege\":\"1\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/v1/users/",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"v1",
						"users",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "/users{id}- should return a saved user",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "abdb51e7-f4d2-4e2e-b7b5-9a9924b3e368",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Response should contain a valid user\", function () {",
							"    var jsonData = pm.response.json();",
							"    ",
							"    pm.expect(jsonData).to.have.property('username');",
							"    pm.expect(jsonData).to.have.property('name');",
							"    pm.expect(jsonData).to.have.property('privilege');",
							"    pm.expect(jsonData._id).to.eql(\"postman@aui.de\");",
							"    ",
							"});",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							""
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"username\":\"testUser\",\n\t\"privilege\":\"1\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/v1/users/postman@aui.de",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"v1",
						"users",
						"postman@aui.de"
					]
				}
			},
			"response": []
		},
		{
			"name": "/users - should create a User",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "314cf22e-909f-4a12-b418-bb73d642c03d",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Response should contain a valid user\", function () {",
							"    var jsonData = pm.response.json();",
							"    ",
							"    pm.expect(jsonData).to.have.property('username');",
							"    pm.expect(jsonData).to.have.property('name');",
							"    pm.expect(jsonData).to.have.property('privilege');",
							"    pm.expect(jsonData._id).to.eql(\"testUser\");",
							"    ",
							"});",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							""
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"username\":\"testUser\",\n\t\"privilege\":\"1\"\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/v1/users/",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"v1",
						"users",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "/users{id}- should update a User",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7b1ec122-bb27-4053-816d-21b6c9ba024b",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Response should contain a valid user\", function () {",
							"    var jsonData = pm.response.json();",
							"    ",
							"    pm.expect(jsonData).to.have.property('username');",
							"    pm.expect(jsonData).to.have.property('name');",
							"    pm.expect(jsonData).to.have.property('privilege');",
							"    pm.expect(jsonData._id).to.eql(\"testUser\");",
							"    ",
							"});",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							""
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"_id\": \"testUser\",\n    \"username\": \"testUser\",\n\t\"privilege\":1\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/v1/users/testUser",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"v1",
						"users",
						"testUser"
					]
				}
			},
			"response": []
		},
		{
			"name": "/markers- should create a marker",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a6db0c29-3d04-481e-bff3-c3858d865c06",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Response should contain a valid marker\", function () {",
							"    var jsonData = pm.response.json();",
							"    ",
							"    pm.expect(jsonData).to.have.property('type');",
							"    pm.expect(jsonData).to.have.property('name');",
							"    pm.expect(jsonData).to.have.property('year');",
							"    pm.expect(jsonData._id).to.eql(\"testMarker\");",
							"    ",
							"});",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							""
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": " {\n        \"_id\": \"testMarker\",\n        \"name\": \"testMarker\",\n        \"wiki\": \"testMarker\",\n        \"type\": \"politician\",\n        \"year\": -91,\n        \"coo\": [\n            13.616666666667,\n            41.266666666667\n        ]\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/v1/markers",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"v1",
						"markers"
					]
				}
			},
			"response": []
		},
		{
			"name": "/markers{id}- should update a marker",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b17a88f5-e08a-48e1-9a9b-b0474cd85478",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Response should contain a valid user\", function () {",
							"    var jsonData = pm.response.json();",
							"    ",
							"    pm.expect(jsonData).to.have.property('type');",
							"    pm.expect(jsonData).to.have.property('name');",
							"    pm.expect(jsonData).to.have.property('year');",
							"    pm.expect(jsonData._id).to.eql(\"testMarker\");",
							"    ",
							"});",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							""
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": " {\n        \"_id\": \"testMarker\",\n        \"name\": \"testMarker\",\n        \"wiki\": \"testMarker\",\n        \"type\": \"politician\",\n        \"year\": -91,\n        \"coo\": [\n            13.616666666667,\n            41.266666666667\n        ]\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/v1/markers/testMarker",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"v1",
						"markers",
						"testMarker"
					]
				}
			},
			"response": []
		},
		{
			"name": "/users{id}- should return a saved user Copy Copy Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e26856bb-4a1f-41b0-8c05-def1952a7e66",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Response should contain a valid user\", function () {",
							"    var jsonData = pm.response.json();",
							"    ",
							"    pm.expect(jsonData).to.have.property('username');",
							"    pm.expect(jsonData).to.have.property('name');",
							"    pm.expect(jsonData).to.have.property('privilege');",
							"    pm.expect(jsonData._id).to.eql(\"testUser\");",
							"    ",
							"});",
							"",
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							""
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"_id\": \"testUser\",\n    \"username\": \"testUser\",\n\t\"privilege\":1\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/v1/users/testUser",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"v1",
						"users",
						"testUser"
					]
				}
			},
			"response": []
		},
		{
			"name": "/marker Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "bff90656-86a1-469a-9fdd-30e2a30bd375",
						"type": "text/javascript",
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response should contain _id, data and score\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData[0]).to.have.property('_id');",
							"    pm.expect(jsonData[0]).to.have.property('name');",
							"    pm.expect(jsonData[0]).to.have.property('wiki');",
							"    pm.expect(jsonData[0]).to.have.property('coo');    ",
							"});"
						]
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n\t\"username\":\"aui\",\n\t\n}"
				},
				"url": {
					"raw": "{{baseUrl}}/v1/markers/",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"v1",
						"markers",
						""
					]
				}
			},
			"response": []
		}
	]
}