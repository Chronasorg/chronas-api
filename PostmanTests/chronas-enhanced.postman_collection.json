{
  "info": {
    "_postman_id": "enhanced-chronas-api-tests",
    "name": "Chronas API - Enhanced Coverage",
    "description": "Enhanced test collection covering most used endpoints based on AWS logs analysis",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Authentication",
      "item": [
        {
          "name": "Login - Valid Credentials",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "var data = JSON.parse(responseBody);",
                  "pm.globals.set(\"token\", data.token);",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Response time is fast for authentication\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});",
                  "pm.test(\"Response contains valid authentication data\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.token).to.not.be.empty;",
                  "    pm.expect(jsonData.username).to.not.be.empty;",
                  "    pm.expect(jsonData.token).to.match(/^[A-Za-z0-9\\-_]+\\.[A-Za-z0-9\\-_]+\\.[A-Za-z0-9\\-_]+$/);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [],
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "email",
                  "value": "postman@aui.de",
                  "type": "text"
                },
                {
                  "key": "password",
                  "value": "postman123",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "{{baseUrl}}/v1/auth/login",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "v1",
                "auth",
                "login"
              ]
            }
          }
        }
      ]
    },
    {
      "name": "Version & Health",
      "item": [
        {
          "name": "Version Info",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Response time is fast\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "pm.test(\"Response contains valid version format\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.version).to.not.be.empty;",
                  "    pm.expect(jsonData.version).to.match(/^\\d+\\.\\d+/);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/v1/version",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "v1",
                "version"
              ]
            }
          }
        },
        {
          "name": "Welcome Endpoint",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Response contains version and user info\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.version).to.not.be.empty;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/v1/version/welcome",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "v1",
                "version",
                "welcome"
              ]
            }
          }
        },
        {
          "name": "Health Check",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Health check returns OK\", function () {",
                  "    pm.expect(pm.response.text()).to.include('Health OK');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/v1/health",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "v1",
                "health"
              ]
            }
          }
        }
      ]
    },
    {
      "name": "Metadata (Most Used - 96k requests)",
      "item": [
        {
          "name": "Get Metadata List",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Response time is acceptable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});",
                  "pm.test(\"Response contains metadata array with valid structure\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an(\"array\");",
                  "    pm.expect(jsonData.length).to.be.greaterThan(0);",
                  "    if (jsonData.length > 0) {",
                  "        pm.expect(jsonData[0]).to.be.an(\"object\");",
                  "        pm.expect(Object.keys(jsonData[0]).length).to.be.greaterThan(0);",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/v1/metadata/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "v1",
                "metadata",
                ""
              ]
            }
          }
        },
        {
          "name": "Get Metadata with Filters",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Response contains filtered metadata\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.not.be.empty;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/v1/metadata?type=g&f=provinces,ruler,culture,religion,capital,province,religionGeneral",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "v1",
                "metadata"
              ],
              "query": [
                {
                  "key": "type",
                  "value": "g"
                },
                {
                  "key": "f",
                  "value": "provinces,ruler,culture,religion,capital,province,religionGeneral"
                }
              ]
            }
          }
        },
        {
          "name": "Get Metadata with Type and End Parameters",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/v1/metadata?type=e&end=3000&subtype=ew",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "v1",
                "metadata"
              ],
              "query": [
                {
                  "key": "type",
                  "value": "e"
                },
                {
                  "key": "end",
                  "value": "3000"
                },
                {
                  "key": "subtype",
                  "value": "ew"
                }
              ]
            }
          }
        },
        {
          "name": "Get Specific Metadata by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Response contains metadata object\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('object');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/v1/metadata/religion",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "v1",
                "metadata",
                "religion"
              ]
            }
          }
        },
        {
          "name": "Get Linked Metadata",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Response contains map and media objects\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('map');",
                  "    pm.expect(jsonData).to.have.property('media');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/v1/metadata/links/getLinked?source=1:e_Falklands_War",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "v1",
                "metadata",
                "links",
                "getLinked"
              ],
              "query": [
                {
                  "key": "source",
                  "value": "1:e_Falklands_War"
                }
              ]
            }
          }
        },
        {
          "name": "Create Metadata",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200, 201, or 401\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 401]);",
                  "});",
                  "if (pm.response.code !== 401) {",
                  "    pm.test(\"Response contains created metadata with correct structure\", function () {",
                  "        var jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.not.be.empty;",
                  "        pm.expect(jsonData).to.be.an(\"object\");",
                  "        if (jsonData._id) {",
                  "            pm.globals.set(\"metadataId\", jsonData._id);",
                  "        }",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"_id\": \"test_metadata_item\",\n  \"name\": \"Test Metadata\",\n  \"type\": \"g\",\n  \"data\": {\n    \"description\": \"Test metadata item\"\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/v1/metadata",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "v1",
                "metadata"
              ]
            }
          }
        },
        {
          "name": "Update Metadata",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 401\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                  "});",
                  "if (pm.response.code !== 401) {",
                  "    pm.test(\"Response contains updated metadata\", function () {",
                  "        var jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.not.be.empty;",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Updated Test Metadata\",\n  \"data\": {\n    \"description\": \"Updated test metadata item\"\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/v1/metadata/test_metadata_item",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "v1",
                "metadata",
                "test_metadata_item"
              ]
            }
          }
        },
        {
          "name": "Update Single Metadata Field",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 401\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                  "});",
                  "if (pm.response.code === 200) {",
                  "    pm.test(\"Metadata single field updated successfully\", function () {",
                  "        pm.expect(pm.response.text()).to.include(\"successfully updated\");",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"subEntityId\": \"test_field\", \"nextBody\": [\"\", \"RGB(255,0,0)\"]}"
            },
            "url": {
              "raw": "{{baseUrl}}/v1/metadata/culture/single",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "v1",
                "metadata",
                "culture",
                "single"
              ]
            }
          }
        },
        {
          "name": "Add Metadata Link",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 401\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                  "});",
                  "if (pm.response.code === 200) {",
                  "    pm.test(\"Metadata link added successfully\", function () {",
                  "        pm.expect(pm.response.text()).to.include(\"successfully updated\");",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"linkedItemType1\": \"metadata\", \"linkedItemType2\": \"metadata\", \"linkedItemKey1\": \"culture\", \"linkedItemKey2\": \"religion\"}"
            },
            "url": {
              "raw": "{{baseUrl}}/v1/metadata/culture/addLink",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "v1",
                "metadata",
                "culture",
                "addLink"
              ]
            }
          }
        },
        {
          "name": "Remove Metadata Link",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 401\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                  "});",
                  "if (pm.response.code === 200) {",
                  "    pm.test(\"Metadata link removed successfully\", function () {",
                  "        pm.expect(pm.response.text()).to.include(\"successfully updated\");",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\"linkedItemType1\": \"metadata\", \"linkedItemType2\": \"metadata\", \"linkedItemKey1\": \"culture\", \"linkedItemKey2\": \"religion\"}"
            },
            "url": {
              "raw": "{{baseUrl}}/v1/metadata/culture/removeLink",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "v1",
                "metadata",
                "culture",
                "removeLink"
              ]
            }
          }
        },
        {
          "name": "Delete Metadata",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 401\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/v1/metadata/test_metadata_item",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "v1",
                "metadata",
                "test_metadata_item"
              ]
            }
          }
        },
        {
          "name": "Upvote Metadata",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/v1/metadata/culture/upvote",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "v1",
                "metadata",
                "culture",
                "upvote"
              ]
            }
          }
        },
        {
          "name": "Downvote Metadata",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/v1/metadata/culture/downvote",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "v1",
                "metadata",
                "culture",
                "downvote"
              ]
            }
          }
        }
      ]
    },
    {
      "name": "Markers (2nd Most Used - 33k requests)",
      "item": [
        {
          "name": "Get Single Marker",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Response contains marker data\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/v1/markers/?count=1",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "v1",
                "markers",
                ""
              ],
              "query": [
                {
                  "key": "count",
                  "value": "1"
                }
              ]
            }
          }
        },
        {
          "name": "Get Markers with Types and Count",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Response time is acceptable for large dataset\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                  "});",
                  "pm.test(\"Response contains markers with valid structure\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an(\"array\");",
                  "    pm.expect(jsonData.length).to.be.greaterThan(0);",
                  "    if (jsonData.length > 0) {",
                  "        pm.expect(jsonData[0]).to.have.property(\"_id\");",
                  "        pm.expect(jsonData[0]).to.have.property(\"name\");",
                  "        pm.expect(jsonData[0]).to.have.property(\"coo\");",
                  "        if (jsonData[0].coo && jsonData[0].coo.length === 2) {",
                  "            pm.expect(jsonData[0].coo[0]).to.be.within(-90, 90);",
                  "            pm.expect(jsonData[0].coo[1]).to.be.within(-180, 180);",
                  "        }",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/v1/markers?types=a,ar,at,b,c,ca,cp,e,m,op,p,r,s,si&year=714&count=3000",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "v1",
                "markers"
              ],
              "query": [
                {
                  "key": "types",
                  "value": "a,ar,at,b,c,ca,cp,e,m,op,p,r,s,si"
                },
                {
                  "key": "year",
                  "value": "714"
                },
                {
                  "key": "count",
                  "value": "3000"
                }
              ]
            }
          }
        },
        {
          "name": "Get Limited Markers",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Response contains exactly 100 or fewer markers\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "    pm.expect(jsonData.length).to.be.at.most(100);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/v1/markers?types=a,ar,at,b,c,ca,cp,e,m,op,p,r,s,si&year=1945&count=100",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "v1",
                "markers"
              ],
              "query": [
                {
                  "key": "types",
                  "value": "a,ar,at,b,c,ca,cp,e,m,op,p,r,s,si"
                },
                {
                  "key": "year",
                  "value": "1945"
                },
                {
                  "key": "count",
                  "value": "100"
                }
              ]
            }
          }
        },
        {
          "name": "Create Marker",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200, 201, or 401\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 401]);",
                  "});",
                  "if (pm.response.code !== 401) {",
                  "    pm.test(\"Response contains created marker\", function () {",
                  "        var jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.not.be.empty;",
                  "        if (jsonData._id) {",
                  "            pm.globals.set(\"markerId\", jsonData._id);",
                  "        }",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"_id\": \"test_marker\",\n  \"name\": \"Test Marker\",\n  \"type\": \"c\",\n  \"coo\": [0, 0],\n  \"year\": 2000,\n  \"data\": {\n    \"description\": \"Test marker\"\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/v1/markers",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "v1",
                "markers"
              ]
            }
          }
        },
        {
          "name": "Update Marker",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 401\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                  "});",
                  "if (pm.response.code !== 401) {",
                  "    pm.test(\"Response contains updated marker\", function () {",
                  "        var jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.not.be.empty;",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Updated Test Marker\",\n  \"data\": {\n    \"description\": \"Updated test marker\"\n  }\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/v1/markers/test_marker",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "v1",
                "markers",
                "test_marker"
              ]
            }
          }
        },
        {
          "name": "Delete Marker",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 401\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/v1/markers/test_marker",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "v1",
                "markers",
                "test_marker"
              ]
            }
          }
        }
      ]
    },
    {
      "name": "Areas (3rd Most Used - 4k+ requests)",
      "item": [
        {
          "name": "Get Areas List",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Response contains areas data\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/v1/areas",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "v1",
                "areas"
              ]
            }
          }
        },
        {
          "name": "Get Area by Year (2000)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Response time is acceptable for historical data\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                  "});",
                  "pm.test(\"Response contains valid area data for year 2000\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an(\"object\");",
                  "    pm.expect(Object.keys(jsonData).length).to.be.greaterThan(0);",
                  "    var firstKey = Object.keys(jsonData)[0];",
                  "    if (firstKey && jsonData[firstKey]) {",
                  "        pm.expect(jsonData[firstKey]).to.satisfy(function(value) {",
                  "            return Array.isArray(value) || typeof value === \"object\";",
                  "        });",
                  "    }",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/v1/areas/2000",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "v1",
                "areas",
                "2000"
              ]
            }
          }
        },
        {
          "name": "Get Area by Year (-2000)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/v1/areas/-2000",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "v1",
                "areas",
                "-2000"
              ]
            }
          }
        },
        {
          "name": "Get Historical Areas (1947)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/v1/areas/1947",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "v1",
                "areas",
                "1947"
              ]
            }
          }
        }
      ]
    },
    {
      "name": "Board/Forum (4th Most Used - 11k requests)",
      "item": [
        {
          "name": "Get Forum Discussions",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Response contains discussions data\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/v1/board/forum/questions/discussions?sorting_method=date&q=1:ae|ruler|KHI&limit=5",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "v1",
                "board",
                "forum",
                "questions",
                "discussions"
              ],
              "query": [
                {
                  "key": "sorting_method",
                  "value": "date"
                },
                {
                  "key": "q",
                  "value": "1:ae|ruler|KHI"
                },
                {
                  "key": "limit",
                  "value": "5"
                }
              ]
            }
          }
        }
      ]
    },
    {
      "name": "User Management",
      "item": [
        {
          "name": "Get User by Email",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Response time is fast\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "pm.test(\"Response contains valid user structure\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property(\"email\");",
                  "    pm.expect(jsonData).to.have.property(\"username\");",
                  "    pm.expect(jsonData.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);",
                  "    pm.expect(jsonData.email).to.equal(\"postman@aui.de\");",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/v1/users/postman@aui.de",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "v1",
                "users",
                "postman@aui.de"
              ]
            }
          }
        },
        {
          "name": "Create User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 400\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 400]);",
                  "});",
                  "if (pm.response.code === 200) {",
                  "    pm.test(\"Response contains valid user\", function () {",
                  "        var jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('email');",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"testUser@test.de\",\n  \"password\": \"testPassword123\",\n  \"username\": \"testUser\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/v1/users/",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "v1",
                "users",
                ""
              ]
            }
          }
        },
        {
          "name": "Update User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Response contains valid user\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('email');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"updatedTestUser\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/v1/users/testUser@test.de",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "v1",
                "users",
                "testUser@test.de"
              ]
            }
          }
        },
        {
          "name": "Delete User",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Response contains valid user\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('email');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/v1/users/testUser@test.de",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "v1",
                "users",
                "testUser@test.de"
              ]
            }
          }
        }
      ]
    },
    {
      "name": "Statistics",
      "item": [
        {
          "name": "Get Statistics",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Response contains statistics data\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.not.be.empty;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/v1/statistics",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "v1",
                "statistics"
              ]
            }
          }
        }
      ]
    },
    {
      "name": "Flags",
      "item": [
        {
          "name": "Get Flags List",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200 or 401\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                  "});",
                  "if (pm.response.code === 200) {",
                  "    pm.test(\"Response contains flags data\", function () {",
                  "        var jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.be.an('array');",
                  "    });",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/v1/flags",
              "host": [
                "{{baseUrl}}"
              ],
              "path": [
                "v1",
                "flags"
              ]
            }
          }
        }
      ]
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "https://2g4uy0bdoe.execute-api.eu-west-1.amazonaws.com"
    }
  ]
}
