{
  "collection": {
    "_": {
      "postman_id": "enhanced-chronas-api-tests"
    },
    "item": [
      {
        "id": "ba09fa07-0276-4685-9875-4ddc1a43d38f",
        "name": "Authentication",
        "item": [
          {
            "id": "67287f32-011f-46cc-8b03-d9513e78bf7a",
            "name": "Login - Valid Credentials",
            "request": {
              "url": {
                "path": [
                  "v1",
                  "auth",
                  "login"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "POST",
              "body": {
                "mode": "urlencoded",
                "urlencoded": [
                  {
                    "key": "email",
                    "value": "postman@aui.de"
                  },
                  {
                    "key": "password",
                    "value": "postman123"
                  }
                ]
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "06573a42-6787-4a02-b96b-45de083f2dc4",
                  "type": "text/javascript",
                  "exec": [
                    "var data = JSON.parse(responseBody);",
                    "pm.globals.set(\"token\", data.token);",
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "pm.test(\"Response time is fast for authentication\", function () {",
                    "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                    "});",
                    "pm.test(\"Response contains valid authentication data\", function () {",
                    "    var jsonData = pm.response.json();",
                    "    pm.expect(jsonData.token).to.not.be.empty;",
                    "    pm.expect(jsonData.username).to.not.be.empty;",
                    "    pm.expect(jsonData.token).to.match(/^[A-Za-z0-9\\-_]+\\.[A-Za-z0-9\\-_]+\\.[A-Za-z0-9\\-_]+$/);",
                    "});"
                  ],
                  "_lastExecutionId": "bc606e1c-e04a-492b-afe8-e31dfdbb66e0"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "296174c1-24eb-4c43-8df8-f835b58ccfd6",
        "name": "Version & Health",
        "item": [
          {
            "id": "d2be0656-03c4-46c1-947f-cb8384044820",
            "name": "Version Info",
            "request": {
              "url": {
                "path": [
                  "v1",
                  "version"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "ae073ae7-b0f5-41f8-be24-d7128bb48645",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "pm.test(\"Response time is fast\", function () {",
                    "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                    "});",
                    "pm.test(\"Response contains valid version format\", function () {",
                    "    var jsonData = pm.response.json();",
                    "    pm.expect(jsonData.version).to.not.be.empty;",
                    "    pm.expect(jsonData.version).to.match(/^\\d+\\.\\d+/);",
                    "});"
                  ],
                  "_lastExecutionId": "99e5af01-5cb4-4042-929f-c7ce3eb087dd"
                }
              }
            ]
          },
          {
            "id": "8a9dd9fd-14f0-429f-839a-201a2933f7ac",
            "name": "Welcome Endpoint",
            "request": {
              "url": {
                "path": [
                  "v1",
                  "version",
                  "welcome"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "ea2d7b31-e165-4d19-bec8-b8894bfea6da",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "pm.test(\"Response contains version and user info\", function () {",
                    "    var jsonData = pm.response.json();",
                    "    pm.expect(jsonData.version).to.not.be.empty;",
                    "});"
                  ],
                  "_lastExecutionId": "b326521c-0e52-4972-831d-981bb5df6b03"
                }
              }
            ]
          },
          {
            "id": "ddd03e51-6314-4c61-84e4-ef79cb0a16a1",
            "name": "Health Check",
            "request": {
              "url": {
                "path": [
                  "v1",
                  "health"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "f8f6cc14-3295-4dc5-97a7-935e627a7bb2",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "pm.test(\"Health check returns OK\", function () {",
                    "    pm.expect(pm.response.text()).to.include('Health OK');",
                    "});"
                  ],
                  "_lastExecutionId": "3ab1754b-02b7-4567-9089-cc4911423542"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "ad65dd3f-3640-4d73-bc99-466d11c37fd3",
        "name": "Metadata (Most Used - 96k requests)",
        "item": [
          {
            "id": "9be15e7b-1c5d-49a2-8a6c-453d061e41de",
            "name": "Get Metadata List",
            "request": {
              "url": {
                "path": [
                  "v1",
                  "metadata",
                  ""
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "2815f8f7-635e-48fb-85c4-e72a4cd405c6",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "pm.test(\"Response time is acceptable\", function () {",
                    "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                    "});",
                    "pm.test(\"Response contains metadata array with valid structure\", function () {",
                    "    var jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.be.an(\"array\");",
                    "    pm.expect(jsonData.length).to.be.greaterThan(0);",
                    "    if (jsonData.length > 0) {",
                    "        pm.expect(jsonData[0]).to.be.an(\"object\");",
                    "        pm.expect(Object.keys(jsonData[0]).length).to.be.greaterThan(0);",
                    "    }",
                    "});"
                  ],
                  "_lastExecutionId": "36bede28-eb02-45f8-bf3f-d0c242e6cd71"
                }
              }
            ]
          },
          {
            "id": "2425e7fe-0331-4a42-afdd-1747cf41ee82",
            "name": "Get Metadata with Filters",
            "request": {
              "url": {
                "path": [
                  "v1",
                  "metadata"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [
                  {
                    "key": "type",
                    "value": "g"
                  },
                  {
                    "key": "f",
                    "value": "provinces,ruler,culture,religion,capital,province,religionGeneral"
                  }
                ],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "9312b2a6-a432-4151-a45a-af1e2bab9882",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "pm.test(\"Response contains filtered metadata\", function () {",
                    "    var jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.not.be.empty;",
                    "});"
                  ],
                  "_lastExecutionId": "dbebd260-6d41-467d-802d-cc1a88c85b0f"
                }
              }
            ]
          },
          {
            "id": "0da3c9d7-8ab8-4e8f-8a22-4ec5cf656f36",
            "name": "Get Metadata with Type and End Parameters",
            "request": {
              "url": {
                "path": [
                  "v1",
                  "metadata"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [
                  {
                    "key": "type",
                    "value": "e"
                  },
                  {
                    "key": "end",
                    "value": "3000"
                  },
                  {
                    "key": "subtype",
                    "value": "ew"
                  }
                ],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "2835733b-4850-4c4c-bc5c-114a7ffebc60",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});"
                  ],
                  "_lastExecutionId": "137efec3-c340-4d2f-b647-7f002a9d0254"
                }
              }
            ]
          },
          {
            "id": "540a15b3-0066-48cf-9ab7-8a6571d8187c",
            "name": "Get Specific Metadata by ID",
            "request": {
              "url": {
                "path": [
                  "v1",
                  "metadata",
                  "religion"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "6513dc32-25f7-484f-96d3-95b99a871490",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "pm.test(\"Response contains metadata object\", function () {",
                    "    var jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.be.an('object');",
                    "});"
                  ],
                  "_lastExecutionId": "002002ca-3094-458c-a9df-0777869d69b6"
                }
              }
            ]
          },
          {
            "id": "365897b7-f566-43ab-9802-495d8914a562",
            "name": "Get Linked Metadata",
            "request": {
              "url": {
                "path": [
                  "v1",
                  "metadata",
                  "links",
                  "getLinked"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [
                  {
                    "key": "source",
                    "value": "1:e_Falklands_War"
                  }
                ],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "ebbc7c9c-6591-47f2-bf75-35ea73ceddad",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "pm.test(\"Response contains map and media objects\", function () {",
                    "    var jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.have.property('map');",
                    "    pm.expect(jsonData).to.have.property('media');",
                    "});"
                  ],
                  "_lastExecutionId": "89025957-551f-4687-afc4-f5d732e4ea57"
                }
              }
            ]
          },
          {
            "id": "4da9a310-ab75-4f60-8221-f14a2addeb4d",
            "name": "Create Metadata",
            "request": {
              "url": {
                "path": [
                  "v1",
                  "metadata"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                },
                {
                  "key": "Authorization",
                  "value": "Bearer {{token}}"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"_id\": \"test_metadata_item\",\n  \"name\": \"Test Metadata\",\n  \"type\": \"g\",\n  \"data\": {\n    \"description\": \"Test metadata item\"\n  }\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "faceea60-f1cf-47e1-81de-c6bf8ee09a57",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200, 201, or 401\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 401]);",
                    "});",
                    "if (pm.response.code !== 401) {",
                    "    pm.test(\"Response contains created metadata with correct structure\", function () {",
                    "        var jsonData = pm.response.json();",
                    "        pm.expect(jsonData).to.not.be.empty;",
                    "        pm.expect(jsonData).to.be.an(\"object\");",
                    "        if (jsonData._id) {",
                    "            pm.globals.set(\"metadataId\", jsonData._id);",
                    "        }",
                    "    });",
                    "}"
                  ],
                  "_lastExecutionId": "6d206237-5ebb-4437-ab68-725cd1bfba26"
                }
              }
            ]
          },
          {
            "id": "a3fc1106-762d-41ce-a296-4570ca3915e5",
            "name": "Update Metadata",
            "request": {
              "url": {
                "path": [
                  "v1",
                  "metadata",
                  "test_metadata_item"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                },
                {
                  "key": "Authorization",
                  "value": "Bearer {{token}}"
                }
              ],
              "method": "PUT",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"name\": \"Updated Test Metadata\",\n  \"data\": {\n    \"description\": \"Updated test metadata item\"\n  }\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "5cec13c3-ca3c-40a8-bdcd-231b1c59f3aa",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200 or 401\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                    "});",
                    "if (pm.response.code !== 401) {",
                    "    pm.test(\"Response contains updated metadata\", function () {",
                    "        var jsonData = pm.response.json();",
                    "        pm.expect(jsonData).to.not.be.empty;",
                    "    });",
                    "}"
                  ],
                  "_lastExecutionId": "f30a2852-9567-48f8-9045-91eed896cc18"
                }
              }
            ]
          },
          {
            "id": "3094b267-8851-4216-99da-c5830af9591e",
            "name": "Update Single Metadata Field",
            "request": {
              "url": {
                "path": [
                  "v1",
                  "metadata",
                  "culture",
                  "single"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                },
                {
                  "key": "Authorization",
                  "value": "Bearer {{token}}"
                }
              ],
              "method": "PUT",
              "body": {
                "mode": "raw",
                "raw": "{\"subEntityId\": \"test_field\", \"nextBody\": [\"\", \"RGB(255,0,0)\"]}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "91d3c187-bd0f-4293-8c00-decc6c1ad3d7",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200 or 401\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                    "});",
                    "if (pm.response.code === 200) {",
                    "    pm.test(\"Metadata single field updated successfully\", function () {",
                    "        pm.expect(pm.response.text()).to.include(\"successfully updated\");",
                    "    });",
                    "}"
                  ],
                  "_lastExecutionId": "ea74781f-17bb-4073-a81e-7d4d85ef25cc"
                }
              }
            ]
          },
          {
            "id": "e7f1b6e1-a64b-423f-b19e-6b6efbae9df3",
            "name": "Add Metadata Link",
            "request": {
              "url": {
                "path": [
                  "v1",
                  "metadata",
                  "culture",
                  "addLink"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                },
                {
                  "key": "Authorization",
                  "value": "Bearer {{token}}"
                }
              ],
              "method": "PUT",
              "body": {
                "mode": "raw",
                "raw": "{\"linkedItemType1\": \"metadata\", \"linkedItemType2\": \"metadata\", \"linkedItemKey1\": \"culture\", \"linkedItemKey2\": \"religion\"}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "47af10bc-c5c1-46ed-bad3-c27e58de9732",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200 or 401\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                    "});",
                    "if (pm.response.code === 200) {",
                    "    pm.test(\"Metadata link added successfully\", function () {",
                    "        pm.expect(pm.response.text()).to.include(\"successfully updated\");",
                    "    });",
                    "}"
                  ],
                  "_lastExecutionId": "e8924c3a-1e3f-47fc-b88e-b4bc41cf0fb8"
                }
              }
            ]
          },
          {
            "id": "1c834bd9-b48c-40ab-b335-c3b27c11f40a",
            "name": "Remove Metadata Link",
            "request": {
              "url": {
                "path": [
                  "v1",
                  "metadata",
                  "culture",
                  "removeLink"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                },
                {
                  "key": "Authorization",
                  "value": "Bearer {{token}}"
                }
              ],
              "method": "PUT",
              "body": {
                "mode": "raw",
                "raw": "{\"linkedItemType1\": \"metadata\", \"linkedItemType2\": \"metadata\", \"linkedItemKey1\": \"culture\", \"linkedItemKey2\": \"religion\"}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "92cfafca-1c13-4438-8d2d-5dc1777a5fc0",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200 or 401\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                    "});",
                    "if (pm.response.code === 200) {",
                    "    pm.test(\"Metadata link removed successfully\", function () {",
                    "        pm.expect(pm.response.text()).to.include(\"successfully updated\");",
                    "    });",
                    "}"
                  ],
                  "_lastExecutionId": "47ced928-c379-4558-9261-c1de9978839e"
                }
              }
            ]
          },
          {
            "id": "16473151-4e10-4361-b850-56eb769e8375",
            "name": "Delete Metadata",
            "request": {
              "url": {
                "path": [
                  "v1",
                  "metadata",
                  "test_metadata_item"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{token}}"
                }
              ],
              "method": "DELETE"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "31b55cb0-276c-40d7-a549-8b18d0f5f383",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200 or 401\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                    "});"
                  ],
                  "_lastExecutionId": "f79ad42a-755b-4290-81c3-3415440c60ec"
                }
              }
            ]
          },
          {
            "id": "42b0e9d4-c595-4a53-931a-9d432fbbec55",
            "name": "Upvote Metadata",
            "request": {
              "url": {
                "path": [
                  "v1",
                  "metadata",
                  "culture",
                  "upvote"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{token}}"
                }
              ],
              "method": "PUT"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "7e8d02a9-e558-48f8-a3b5-cad8afbdb5ad",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});"
                  ],
                  "_lastExecutionId": "279722b7-d397-40f9-a184-0223966fb78e"
                }
              }
            ]
          },
          {
            "id": "0dd50556-f6cc-47db-a7c4-fbcd64137355",
            "name": "Downvote Metadata",
            "request": {
              "url": {
                "path": [
                  "v1",
                  "metadata",
                  "culture",
                  "downvote"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{token}}"
                }
              ],
              "method": "PUT"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "e162af2e-4df5-4bf9-bbce-11360646df04",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});"
                  ],
                  "_lastExecutionId": "aaf71814-dadc-46eb-9629-80b99e69d078"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "fcdf765d-0019-4744-8ca2-fe21a58b0ca6",
        "name": "Markers (2nd Most Used - 33k requests)",
        "item": [
          {
            "id": "dfff1a6f-69ea-400e-b5cd-c1960322f443",
            "name": "Get Single Marker",
            "request": {
              "url": {
                "path": [
                  "v1",
                  "markers",
                  ""
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [
                  {
                    "key": "count",
                    "value": "1"
                  }
                ],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "95d1a2fb-f815-4579-9e8b-9ce59ed14b6d",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "pm.test(\"Response contains marker data\", function () {",
                    "    var jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.be.an('array');",
                    "});"
                  ],
                  "_lastExecutionId": "5989902e-ef84-4a0e-af75-22088a515bd5"
                }
              }
            ]
          },
          {
            "id": "6c8c604a-c3d2-46e0-9f4f-034e24405740",
            "name": "Get Markers with Types and Count",
            "request": {
              "url": {
                "path": [
                  "v1",
                  "markers"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [
                  {
                    "key": "types",
                    "value": "a,ar,at,b,c,ca,cp,e,m,op,p,r,s,si"
                  },
                  {
                    "key": "year",
                    "value": "714"
                  },
                  {
                    "key": "count",
                    "value": "3000"
                  }
                ],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "15ebf48d-fd1c-4590-bdbb-7e3cdac21ce5",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "pm.test(\"Response time is acceptable for large dataset\", function () {",
                    "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                    "});",
                    "pm.test(\"Response contains markers with valid structure\", function () {",
                    "    var jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.be.an(\"array\");",
                    "    pm.expect(jsonData.length).to.be.greaterThan(0);",
                    "    if (jsonData.length > 0) {",
                    "        pm.expect(jsonData[0]).to.have.property(\"_id\");",
                    "        pm.expect(jsonData[0]).to.have.property(\"name\");",
                    "        pm.expect(jsonData[0]).to.have.property(\"coo\");",
                    "        if (jsonData[0].coo && jsonData[0].coo.length === 2) {",
                    "            pm.expect(jsonData[0].coo[0]).to.be.within(-90, 90);",
                    "            pm.expect(jsonData[0].coo[1]).to.be.within(-180, 180);",
                    "        }",
                    "    }",
                    "});"
                  ],
                  "_lastExecutionId": "62d6a0ec-bbf9-4d82-a5fa-9fbe8b54d179"
                }
              }
            ]
          },
          {
            "id": "99a2b0e6-ac55-4337-8ab9-dc9f858c5c79",
            "name": "Get Limited Markers",
            "request": {
              "url": {
                "path": [
                  "v1",
                  "markers"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [
                  {
                    "key": "types",
                    "value": "a,ar,at,b,c,ca,cp,e,m,op,p,r,s,si"
                  },
                  {
                    "key": "year",
                    "value": "1945"
                  },
                  {
                    "key": "count",
                    "value": "100"
                  }
                ],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "04d34445-0ac5-449d-ad3a-5f2b1fcb097b",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "pm.test(\"Response contains exactly 100 or fewer markers\", function () {",
                    "    var jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.be.an('array');",
                    "    pm.expect(jsonData.length).to.be.at.most(100);",
                    "});"
                  ],
                  "_lastExecutionId": "ebf70d3e-e029-4c89-956b-900b4cf6fade"
                }
              }
            ]
          },
          {
            "id": "f3bc2747-6b59-40fc-896e-c38ff29965f1",
            "name": "Create Marker",
            "request": {
              "url": {
                "path": [
                  "v1",
                  "markers"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                },
                {
                  "key": "Authorization",
                  "value": "Bearer {{token}}"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"_id\": \"test_marker\",\n  \"name\": \"Test Marker\",\n  \"type\": \"c\",\n  \"coo\": [0, 0],\n  \"year\": 2000,\n  \"data\": {\n    \"description\": \"Test marker\"\n  }\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "6cbef540-3351-4458-b028-ef7557dabdb9",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200, 201, or 401\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 401]);",
                    "});",
                    "if (pm.response.code !== 401) {",
                    "    pm.test(\"Response contains created marker\", function () {",
                    "        var jsonData = pm.response.json();",
                    "        pm.expect(jsonData).to.not.be.empty;",
                    "        if (jsonData._id) {",
                    "            pm.globals.set(\"markerId\", jsonData._id);",
                    "        }",
                    "    });",
                    "}"
                  ],
                  "_lastExecutionId": "976105fc-c369-4cea-86f5-cd90f59de04d"
                }
              }
            ]
          },
          {
            "id": "35f9cafd-aa14-4fda-8f62-1d976e065dbe",
            "name": "Update Marker",
            "request": {
              "url": {
                "path": [
                  "v1",
                  "markers",
                  "test_marker"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                },
                {
                  "key": "Authorization",
                  "value": "Bearer {{token}}"
                }
              ],
              "method": "PUT",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"name\": \"Updated Test Marker\",\n  \"data\": {\n    \"description\": \"Updated test marker\"\n  }\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "6cfae020-c6f6-44f2-9de8-fe649c1cc726",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200 or 401\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                    "});",
                    "if (pm.response.code !== 401) {",
                    "    pm.test(\"Response contains updated marker\", function () {",
                    "        var jsonData = pm.response.json();",
                    "        pm.expect(jsonData).to.not.be.empty;",
                    "    });",
                    "}"
                  ],
                  "_lastExecutionId": "ee62865f-ddbd-4d81-9377-69548df3241f"
                }
              }
            ]
          },
          {
            "id": "6279e449-b739-4516-958b-8fd400b8aa25",
            "name": "Delete Marker",
            "request": {
              "url": {
                "path": [
                  "v1",
                  "markers",
                  "test_marker"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{token}}"
                }
              ],
              "method": "DELETE"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "a8162679-5fbc-495d-a134-7722481a087c",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200 or 401\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                    "});"
                  ],
                  "_lastExecutionId": "30b557f1-9058-4431-bcde-d0434a642d97"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "e47d75e2-375b-4e03-b0c5-53956befd6ea",
        "name": "Areas (3rd Most Used - 4k+ requests)",
        "item": [
          {
            "id": "13a8ce98-7dbb-4236-95d6-c66992b9c07d",
            "name": "Get Areas List",
            "request": {
              "url": {
                "path": [
                  "v1",
                  "areas"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{token}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "122548d7-42f7-4b0e-8f53-9fc378d30040",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "pm.test(\"Response contains areas data\", function () {",
                    "    var jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.be.an('array');",
                    "});"
                  ],
                  "_lastExecutionId": "727484d4-8c7b-4702-b355-5af15306f3a3"
                }
              }
            ]
          },
          {
            "id": "06981e0b-7744-4fd5-a112-c98bb1417abc",
            "name": "Get Area by Year (2000)",
            "request": {
              "url": {
                "path": [
                  "v1",
                  "areas",
                  "2000"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "b1a73ddc-8bf9-4555-b319-86353421d2f8",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "pm.test(\"Response time is acceptable for historical data\", function () {",
                    "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                    "});",
                    "pm.test(\"Response contains valid area data for year 2000\", function () {",
                    "    var jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.be.an(\"object\");",
                    "    pm.expect(Object.keys(jsonData).length).to.be.greaterThan(0);",
                    "    var firstKey = Object.keys(jsonData)[0];",
                    "    if (firstKey && jsonData[firstKey]) {",
                    "        pm.expect(jsonData[firstKey]).to.satisfy(function(value) {",
                    "            return Array.isArray(value) || typeof value === \"object\";",
                    "        });",
                    "    }",
                    "});"
                  ],
                  "_lastExecutionId": "628202db-b651-4f35-98ce-33ace9a6862e"
                }
              }
            ]
          },
          {
            "id": "b9c9de0d-6c15-413c-92ac-72cab9eaa47c",
            "name": "Get Area by Year (-2000)",
            "request": {
              "url": {
                "path": [
                  "v1",
                  "areas",
                  "-2000"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "857fb6ae-6a45-44cc-91a1-adb6c6b7750b",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});"
                  ],
                  "_lastExecutionId": "f13b0bc4-808f-4e90-922f-0fb87ff22a06"
                }
              }
            ]
          },
          {
            "id": "a047c2d0-0775-4b4e-9123-bb91dc8a530f",
            "name": "Get Historical Areas (1947)",
            "request": {
              "url": {
                "path": [
                  "v1",
                  "areas",
                  "1947"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "d9f5972c-5fd2-4189-ab39-da1a6dd028aa",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});"
                  ],
                  "_lastExecutionId": "8b60bf27-3031-44e4-855c-19a9b77bb409"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "fd2b55e9-e0cf-44a4-8eb3-f27ffddc0259",
        "name": "Board/Forum (4th Most Used - 11k requests)",
        "item": [
          {
            "id": "b1054e1d-00ec-4394-8599-3b9874d973bf",
            "name": "Get Forum Discussions",
            "request": {
              "url": {
                "path": [
                  "v1",
                  "board",
                  "forum",
                  "questions",
                  "discussions"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [
                  {
                    "key": "sorting_method",
                    "value": "date"
                  },
                  {
                    "key": "q",
                    "value": "1:ae|ruler|KHI"
                  },
                  {
                    "key": "limit",
                    "value": "5"
                  }
                ],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "ce1add36-eb1c-40fb-a85c-f48f2b142409",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "pm.test(\"Response contains discussions data\", function () {",
                    "    var jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.be.an('array');",
                    "});"
                  ],
                  "_lastExecutionId": "d4f5f062-3b54-4d64-8a8e-9a09df6af274"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "8f8c4aad-27c2-415d-8867-717effdbb9e7",
        "name": "User Management",
        "item": [
          {
            "id": "4e23fcb4-9ef1-4ea8-b41f-3318be2c55f4",
            "name": "Get User by Email",
            "request": {
              "url": {
                "path": [
                  "v1",
                  "users",
                  "postman@aui.de"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{token}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "a0fe48c3-1508-4e87-a7e5-a76beaac0541",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "pm.test(\"Response time is fast\", function () {",
                    "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                    "});",
                    "pm.test(\"Response contains valid user structure\", function () {",
                    "    var jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.have.property(\"email\");",
                    "    pm.expect(jsonData).to.have.property(\"username\");",
                    "    pm.expect(jsonData.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);",
                    "    pm.expect(jsonData.email).to.equal(\"postman@aui.de\");",
                    "});"
                  ],
                  "_lastExecutionId": "c4ffede9-306d-4f31-b0f5-01077ab19af2"
                }
              }
            ]
          },
          {
            "id": "18f21432-9d52-40da-89ac-6b0eb847f1bd",
            "name": "Create User",
            "request": {
              "url": {
                "path": [
                  "v1",
                  "users",
                  ""
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                },
                {
                  "key": "Authorization",
                  "value": "Bearer {{token}}"
                }
              ],
              "method": "POST",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"email\": \"testUser@test.de\",\n  \"password\": \"testPassword123\",\n  \"username\": \"testUser\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "e468a60e-0d8b-4ca3-b35b-43c0591b7300",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200 or 400\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 400]);",
                    "});",
                    "if (pm.response.code === 200) {",
                    "    pm.test(\"Response contains valid user\", function () {",
                    "        var jsonData = pm.response.json();",
                    "        pm.expect(jsonData).to.have.property('email');",
                    "    });",
                    "}"
                  ],
                  "_lastExecutionId": "a3e867c6-9e2a-47ba-91cf-cdac0608401a"
                }
              }
            ]
          },
          {
            "id": "83acafef-d911-4a60-a5db-f7576521a65c",
            "name": "Update User",
            "request": {
              "url": {
                "path": [
                  "v1",
                  "users",
                  "testUser@test.de"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Content-Type",
                  "value": "application/json"
                },
                {
                  "key": "Authorization",
                  "value": "Bearer {{token}}"
                }
              ],
              "method": "PUT",
              "body": {
                "mode": "raw",
                "raw": "{\n  \"username\": \"updatedTestUser\"\n}"
              }
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "bd3a3429-5671-404f-90a0-c6de13860eb8",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "pm.test(\"Response contains valid user\", function () {",
                    "    var jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.have.property('email');",
                    "});"
                  ],
                  "_lastExecutionId": "387c4f5d-ca2c-4d9c-9c21-ccebcf83ed7b"
                }
              }
            ]
          },
          {
            "id": "4d4a7d6b-7816-4fc7-b78c-94a7577476b4",
            "name": "Delete User",
            "request": {
              "url": {
                "path": [
                  "v1",
                  "users",
                  "testUser@test.de"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{token}}"
                }
              ],
              "method": "DELETE"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "0b1f4689-1267-466f-b1d7-6c095c2d276c",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "pm.test(\"Response contains valid user\", function () {",
                    "    var jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.have.property('email');",
                    "});"
                  ],
                  "_lastExecutionId": "bbd38b7d-d1c5-4a09-ab3f-c79b216c49bf"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "8ae8ac18-7335-4139-af9a-656aac645124",
        "name": "Statistics",
        "item": [
          {
            "id": "5ea8f093-1008-417b-bbe4-7daa933ad7ce",
            "name": "Get Statistics",
            "request": {
              "url": {
                "path": [
                  "v1",
                  "statistics"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "214cac4d-4363-433e-8cd9-96dcd2b913d0",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200\", function () {",
                    "    pm.response.to.have.status(200);",
                    "});",
                    "pm.test(\"Response contains statistics data\", function () {",
                    "    var jsonData = pm.response.json();",
                    "    pm.expect(jsonData).to.not.be.empty;",
                    "});"
                  ],
                  "_lastExecutionId": "3cdd04a4-441b-4712-9e1f-ec453b727a47"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "9d407954-3403-4c03-8af8-7d8a232b138d",
        "name": "Flags",
        "item": [
          {
            "id": "c6ef265f-d1bd-4b00-ae49-d52b07649c9e",
            "name": "Get Flags List",
            "request": {
              "url": {
                "path": [
                  "v1",
                  "flags"
                ],
                "host": [
                  "{{baseUrl}}"
                ],
                "query": [],
                "variable": []
              },
              "header": [
                {
                  "key": "Authorization",
                  "value": "Bearer {{token}}"
                }
              ],
              "method": "GET"
            },
            "response": [],
            "event": [
              {
                "listen": "test",
                "script": {
                  "id": "46ab5e8a-3ab5-4a3b-9a79-bda8f05bef3e",
                  "type": "text/javascript",
                  "exec": [
                    "pm.test(\"Status code is 200 or 401\", function () {",
                    "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                    "});",
                    "if (pm.response.code === 200) {",
                    "    pm.test(\"Response contains flags data\", function () {",
                    "        var jsonData = pm.response.json();",
                    "        pm.expect(jsonData).to.be.an('array');",
                    "    });",
                    "}"
                  ],
                  "_lastExecutionId": "7f46dd6b-55da-48dd-a9ab-90ba3e4071e5"
                }
              }
            ]
          }
        ],
        "event": []
      }
    ],
    "event": [],
    "variable": [
      {
        "type": "any",
        "value": "https://2g4uy0bdoe.execute-api.eu-west-1.amazonaws.com",
        "key": "baseUrl"
      }
    ],
    "info": {
      "_postman_id": "enhanced-chronas-api-tests",
      "name": "Chronas API - Enhanced Coverage",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
      "description": {
        "content": "Enhanced test collection covering most used endpoints based on AWS logs analysis",
        "type": "text/plain"
      }
    }
  },
  "environment": {
    "_": {
      "postman_variable_scope": "environment",
      "postman_exported_at": "2025-09-23T00:00:00.000Z",
      "postman_exported_using": "Kiro Automation"
    },
    "id": "local-dev-environment",
    "name": "chronas-local",
    "values": [
      {
        "type": "any",
        "value": "http://localhost:3001",
        "key": "baseUrl"
      },
      {
        "type": "any",
        "value": "postman@aui.de",
        "key": "testUser"
      },
      {
        "type": "any",
        "value": "password123",
        "key": "testPassword"
      }
    ]
  },
  "globals": {
    "id": "be2f5919-07f6-4942-8a27-d6a65bf7f5bc",
    "values": []
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 34,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 34,
        "pending": 0,
        "failed": 1
      },
      "prerequests": {
        "total": 34,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 34,
        "pending": 0,
        "failed": 34
      },
      "tests": {
        "total": 34,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 59,
        "pending": 0,
        "failed": 59
      },
      "testScripts": {
        "total": 34,
        "pending": 0,
        "failed": 1
      },
      "prerequestScripts": {
        "total": 0,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 0,
      "responseMin": 0,
      "responseMax": 0,
      "responseSd": 0,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1758627604350,
      "completed": 1758627604748
    },
    "executions": [
      {
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 34,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "4fa06e1e-8ce1-4bc9-b0a6-98f8ddbece24",
          "httpRequestId": "37fbcafc-c185-4f54-ac18-01c3ac0df511"
        },
        "item": {
          "id": "67287f32-011f-46cc-8b03-d9513e78bf7a",
          "name": "Login - Valid Credentials",
          "request": {
            "url": {
              "path": [
                "v1",
                "auth",
                "login"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "email",
                  "value": "postman@aui.de"
                },
                {
                  "key": "password",
                  "value": "postman123"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "06573a42-6787-4a02-b96b-45de083f2dc4",
                "type": "text/javascript",
                "exec": [
                  "var data = JSON.parse(responseBody);",
                  "pm.globals.set(\"token\", data.token);",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Response time is fast for authentication\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});",
                  "pm.test(\"Response contains valid authentication data\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.token).to.not.be.empty;",
                  "    pm.expect(jsonData.username).to.not.be.empty;",
                  "    pm.expect(jsonData.token).to.match(/^[A-Za-z0-9\\-_]+\\.[A-Za-z0-9\\-_]+\\.[A-Za-z0-9\\-_]+$/);",
                  "});"
                ],
                "_lastExecutionId": "bc606e1c-e04a-492b-afe8-e31dfdbb66e0"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3001",
            "path": [
              "v1",
              "auth",
              "login"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "9fcb8284-9e01-4e1a-90c7-5fadbdaf93c3",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "urlencoded",
            "urlencoded": [
              {
                "key": "email",
                "value": "postman@aui.de"
              },
              {
                "key": "password",
                "value": "postman123"
              }
            ]
          }
        },
        "id": "67287f32-011f-46cc-8b03-d9513e78bf7a",
        "requestError": {
          "errno": -61,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3001
        },
        "testScript": [
          {
            "error": {
              "type": "Error",
              "name": "JSONError",
              "message": "\"undefined\" is not valid JSON",
              "checksum": "4db15f4d7d3ae61b799898db95379b99",
              "id": "734b1612-7c9b-4805-9eff-6ac00f829851",
              "timestamp": 1758627604382,
              "stacktrace": []
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "8074eabd-e5b2-49cc-92bb-3228ae13bcb7",
          "length": 34,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "5153aebb-1ccc-4762-8270-dacef80b672c"
        },
        "item": {
          "id": "d2be0656-03c4-46c1-947f-cb8384044820",
          "name": "Version Info",
          "request": {
            "url": {
              "path": [
                "v1",
                "version"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ae073ae7-b0f5-41f8-be24-d7128bb48645",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Response time is fast\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "pm.test(\"Response contains valid version format\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.version).to.not.be.empty;",
                  "    pm.expect(jsonData.version).to.match(/^\\d+\\.\\d+/);",
                  "});"
                ],
                "_lastExecutionId": "99e5af01-5cb4-4042-929f-c7ce3eb087dd"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3001",
            "path": [
              "v1",
              "version"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "d622c721-ab2c-488a-a8bc-8591ad793b71",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "id": "d2be0656-03c4-46c1-947f-cb8384044820",
        "requestError": {
          "errno": -61,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3001
        },
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:2)"
            }
          },
          {
            "assertion": "Response time is fast",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response time is fast",
              "message": "expected undefined to be a number or a date",
              "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:2:2)"
            }
          },
          {
            "assertion": "Response contains valid version format",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "Response contains valid version format",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:3:2)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "77859a12-4403-4cff-ad9a-57c2f95d032d",
          "length": 34,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "f1639146-297c-4f9d-8591-34a7d8299bca"
        },
        "item": {
          "id": "8a9dd9fd-14f0-429f-839a-201a2933f7ac",
          "name": "Welcome Endpoint",
          "request": {
            "url": {
              "path": [
                "v1",
                "version",
                "welcome"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ea2d7b31-e165-4d19-bec8-b8894bfea6da",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Response contains version and user info\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.version).to.not.be.empty;",
                  "});"
                ],
                "_lastExecutionId": "b326521c-0e52-4972-831d-981bb5df6b03"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3001",
            "path": [
              "v1",
              "version",
              "welcome"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "6c90f570-f7cc-49f8-8517-37550e511bea",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "id": "8a9dd9fd-14f0-429f-839a-201a2933f7ac",
        "requestError": {
          "errno": -61,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3001
        },
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:3)"
            }
          },
          {
            "assertion": "Response contains version and user info",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Response contains version and user info",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:3)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "da201c80-a4f4-4af3-878b-d7a21b6b5831",
          "length": 34,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "ec4bbdce-c74b-4ea9-b3bc-0f2446321645"
        },
        "item": {
          "id": "ddd03e51-6314-4c61-84e4-ef79cb0a16a1",
          "name": "Health Check",
          "request": {
            "url": {
              "path": [
                "v1",
                "health"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f8f6cc14-3295-4dc5-97a7-935e627a7bb2",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Health check returns OK\", function () {",
                  "    pm.expect(pm.response.text()).to.include('Health OK');",
                  "});"
                ],
                "_lastExecutionId": "3ab1754b-02b7-4567-9089-cc4911423542"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3001",
            "path": [
              "v1",
              "health"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "258d23c2-9b59-4777-b715-cf52ad26bf19",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "id": "ddd03e51-6314-4c61-84e4-ef79cb0a16a1",
        "requestError": {
          "errno": -61,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3001
        },
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:4)"
            }
          },
          {
            "assertion": "Health check returns OK",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Health check returns OK",
              "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
              "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "c939358b-b93b-46ec-b49c-df2f07584512",
          "length": 34,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "32b0056d-b95f-492d-b103-afb7ead503b2"
        },
        "item": {
          "id": "9be15e7b-1c5d-49a2-8a6c-453d061e41de",
          "name": "Get Metadata List",
          "request": {
            "url": {
              "path": [
                "v1",
                "metadata",
                ""
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2815f8f7-635e-48fb-85c4-e72a4cd405c6",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Response time is acceptable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});",
                  "pm.test(\"Response contains metadata array with valid structure\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an(\"array\");",
                  "    pm.expect(jsonData.length).to.be.greaterThan(0);",
                  "    if (jsonData.length > 0) {",
                  "        pm.expect(jsonData[0]).to.be.an(\"object\");",
                  "        pm.expect(Object.keys(jsonData[0]).length).to.be.greaterThan(0);",
                  "    }",
                  "});"
                ],
                "_lastExecutionId": "36bede28-eb02-45f8-bf3f-d0c242e6cd71"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3001",
            "path": [
              "v1",
              "metadata",
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "99bb27ac-8555-4ae0-af48-00eab3e3f123",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "id": "9be15e7b-1c5d-49a2-8a6c-453d061e41de",
        "requestError": {
          "errno": -61,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3001
        },
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:5)"
            }
          },
          {
            "assertion": "Response time is acceptable",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response time is acceptable",
              "message": "expected undefined to be a number or a date",
              "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:2:5)"
            }
          },
          {
            "assertion": "Response contains metadata array with valid structure",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "Response contains metadata array with valid structure",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:3:5)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "0f15e263-ddae-4183-911e-adb0fe74a66f",
          "length": 34,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "e0478c2a-0a98-4957-b383-85327fa1f609"
        },
        "item": {
          "id": "2425e7fe-0331-4a42-afdd-1747cf41ee82",
          "name": "Get Metadata with Filters",
          "request": {
            "url": {
              "path": [
                "v1",
                "metadata"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "type",
                  "value": "g"
                },
                {
                  "key": "f",
                  "value": "provinces,ruler,culture,religion,capital,province,religionGeneral"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9312b2a6-a432-4151-a45a-af1e2bab9882",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Response contains filtered metadata\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.not.be.empty;",
                  "});"
                ],
                "_lastExecutionId": "dbebd260-6d41-467d-802d-cc1a88c85b0f"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3001",
            "path": [
              "v1",
              "metadata"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "type",
                "value": "g"
              },
              {
                "key": "f",
                "value": "provinces,ruler,culture,religion,capital,province,religionGeneral"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "74c66bf5-50d7-4ccc-8433-21627bdbe4a8",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "id": "2425e7fe-0331-4a42-afdd-1747cf41ee82",
        "requestError": {
          "errno": -61,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3001
        },
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:6)"
            }
          },
          {
            "assertion": "Response contains filtered metadata",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Response contains filtered metadata",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:6)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "77856fc5-fdf2-4e67-9585-ac4a15e89c5b",
          "length": 34,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "abc9f49c-3e21-44a0-9133-86d5fa06f787"
        },
        "item": {
          "id": "0da3c9d7-8ab8-4e8f-8a22-4ec5cf656f36",
          "name": "Get Metadata with Type and End Parameters",
          "request": {
            "url": {
              "path": [
                "v1",
                "metadata"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "type",
                  "value": "e"
                },
                {
                  "key": "end",
                  "value": "3000"
                },
                {
                  "key": "subtype",
                  "value": "ew"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2835733b-4850-4c4c-bc5c-114a7ffebc60",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "_lastExecutionId": "137efec3-c340-4d2f-b647-7f002a9d0254"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3001",
            "path": [
              "v1",
              "metadata"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "type",
                "value": "e"
              },
              {
                "key": "end",
                "value": "3000"
              },
              {
                "key": "subtype",
                "value": "ew"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "fec5bb1c-11f1-41da-98cd-881652519b37",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "id": "0da3c9d7-8ab8-4e8f-8a22-4ec5cf656f36",
        "requestError": {
          "errno": -61,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3001
        },
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:7)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "c4cf7ccb-4976-4355-b874-da78df494c68",
          "length": 34,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "6d5ae025-c46b-44e7-919f-80f786b72064"
        },
        "item": {
          "id": "540a15b3-0066-48cf-9ab7-8a6571d8187c",
          "name": "Get Specific Metadata by ID",
          "request": {
            "url": {
              "path": [
                "v1",
                "metadata",
                "religion"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6513dc32-25f7-484f-96d3-95b99a871490",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Response contains metadata object\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('object');",
                  "});"
                ],
                "_lastExecutionId": "002002ca-3094-458c-a9df-0777869d69b6"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3001",
            "path": [
              "v1",
              "metadata",
              "religion"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "8cf62d44-f24a-46bb-9754-5f9e4017c51e",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "id": "540a15b3-0066-48cf-9ab7-8a6571d8187c",
        "requestError": {
          "errno": -61,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3001
        },
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "Response contains metadata object",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Response contains metadata object",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "22d5953b-e722-464c-bc55-f8c5ae760649",
          "length": 34,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "705125f3-13ba-43c3-b9e1-68ad5265af1f"
        },
        "item": {
          "id": "365897b7-f566-43ab-9802-495d8914a562",
          "name": "Get Linked Metadata",
          "request": {
            "url": {
              "path": [
                "v1",
                "metadata",
                "links",
                "getLinked"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "source",
                  "value": "1:e_Falklands_War"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ebbc7c9c-6591-47f2-bf75-35ea73ceddad",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Response contains map and media objects\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('map');",
                  "    pm.expect(jsonData).to.have.property('media');",
                  "});"
                ],
                "_lastExecutionId": "89025957-551f-4687-afc4-f5d732e4ea57"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3001",
            "path": [
              "v1",
              "metadata",
              "links",
              "getLinked"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "source",
                "value": "1:e_Falklands_War"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "0ca68bd8-ffad-473f-9df6-4dd991a4abb7",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "id": "365897b7-f566-43ab-9802-495d8914a562",
        "requestError": {
          "errno": -61,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3001
        },
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:9)"
            }
          },
          {
            "assertion": "Response contains map and media objects",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Response contains map and media objects",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "06e0468c-7c41-4ac8-879b-da1888408801",
          "length": 34,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "452570e0-267d-49e8-8cd7-57511c42b30e"
        },
        "item": {
          "id": "4da9a310-ab75-4f60-8221-f14a2addeb4d",
          "name": "Create Metadata",
          "request": {
            "url": {
              "path": [
                "v1",
                "metadata"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"_id\": \"test_metadata_item\",\n  \"name\": \"Test Metadata\",\n  \"type\": \"g\",\n  \"data\": {\n    \"description\": \"Test metadata item\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "faceea60-f1cf-47e1-81de-c6bf8ee09a57",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200, 201, or 401\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 401]);",
                  "});",
                  "if (pm.response.code !== 401) {",
                  "    pm.test(\"Response contains created metadata with correct structure\", function () {",
                  "        var jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.not.be.empty;",
                  "        pm.expect(jsonData).to.be.an(\"object\");",
                  "        if (jsonData._id) {",
                  "            pm.globals.set(\"metadataId\", jsonData._id);",
                  "        }",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "6d206237-5ebb-4437-ab68-725cd1bfba26"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3001",
            "path": [
              "v1",
              "metadata"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Authorization",
              "value": "Bearer {{token}}"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "3e5e9b2f-451e-4843-8bf6-39abc4c85fe1",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"_id\": \"test_metadata_item\",\n  \"name\": \"Test Metadata\",\n  \"type\": \"g\",\n  \"data\": {\n    \"description\": \"Test metadata item\"\n  }\n}"
          }
        },
        "id": "4da9a310-ab75-4f60-8221-f14a2addeb4d",
        "requestError": {
          "errno": -61,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3001
        },
        "assertions": [
          {
            "assertion": "Status code is 200, 201, or 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200, 201, or 401",
              "message": "expected undefined to be one of [ 200, 201, 401 ]",
              "stack": "AssertionError: expected undefined to be one of [ 200, 201, 401 ]\n   at Object.eval sandbox-script.js:1:10)"
            }
          },
          {
            "assertion": "Response contains created metadata with correct structure",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Response contains created metadata with correct structure",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "42f3f978-9502-4b43-9978-08c24ef55827",
          "length": 34,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "c29ad64c-18d3-4bd6-a1af-a63caaa7bd3f"
        },
        "item": {
          "id": "a3fc1106-762d-41ce-a296-4570ca3915e5",
          "name": "Update Metadata",
          "request": {
            "url": {
              "path": [
                "v1",
                "metadata",
                "test_metadata_item"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Updated Test Metadata\",\n  \"data\": {\n    \"description\": \"Updated test metadata item\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5cec13c3-ca3c-40a8-bdcd-231b1c59f3aa",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200 or 401\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                  "});",
                  "if (pm.response.code !== 401) {",
                  "    pm.test(\"Response contains updated metadata\", function () {",
                  "        var jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.not.be.empty;",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "f30a2852-9567-48f8-9045-91eed896cc18"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3001",
            "path": [
              "v1",
              "metadata",
              "test_metadata_item"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Authorization",
              "value": "Bearer {{token}}"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "9c3b7e1b-e2be-4e17-b2df-69eceba94837",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "PUT",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"name\": \"Updated Test Metadata\",\n  \"data\": {\n    \"description\": \"Updated test metadata item\"\n  }\n}"
          }
        },
        "id": "a3fc1106-762d-41ce-a296-4570ca3915e5",
        "requestError": {
          "errno": -61,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3001
        },
        "assertions": [
          {
            "assertion": "Status code is 200 or 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200 or 401",
              "message": "expected undefined to be one of [ 200, 401 ]",
              "stack": "AssertionError: expected undefined to be one of [ 200, 401 ]\n   at Object.eval sandbox-script.js:1:11)"
            }
          },
          {
            "assertion": "Response contains updated metadata",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Response contains updated metadata",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "e441853a-1a6a-4520-8263-bb32723ca784",
          "length": 34,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "b3251a42-5987-4b48-947b-3183409c0569"
        },
        "item": {
          "id": "3094b267-8851-4216-99da-c5830af9591e",
          "name": "Update Single Metadata Field",
          "request": {
            "url": {
              "path": [
                "v1",
                "metadata",
                "culture",
                "single"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\"subEntityId\": \"test_field\", \"nextBody\": [\"\", \"RGB(255,0,0)\"]}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "91d3c187-bd0f-4293-8c00-decc6c1ad3d7",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200 or 401\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                  "});",
                  "if (pm.response.code === 200) {",
                  "    pm.test(\"Metadata single field updated successfully\", function () {",
                  "        pm.expect(pm.response.text()).to.include(\"successfully updated\");",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "ea74781f-17bb-4073-a81e-7d4d85ef25cc"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3001",
            "path": [
              "v1",
              "metadata",
              "culture",
              "single"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Authorization",
              "value": "Bearer {{token}}"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "88d36603-ca95-435a-9b85-ae8472b2db95",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "PUT",
          "body": {
            "mode": "raw",
            "raw": "{\"subEntityId\": \"test_field\", \"nextBody\": [\"\", \"RGB(255,0,0)\"]}"
          }
        },
        "id": "3094b267-8851-4216-99da-c5830af9591e",
        "requestError": {
          "errno": -61,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3001
        },
        "assertions": [
          {
            "assertion": "Status code is 200 or 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200 or 401",
              "message": "expected undefined to be one of [ 200, 401 ]",
              "stack": "AssertionError: expected undefined to be one of [ 200, 401 ]\n   at Object.eval sandbox-script.js:1:12)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "8a015fca-830f-4fb2-b576-dc440ccd2c57",
          "length": 34,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "9042eb7a-5f7e-4884-baa0-70dc9dc1cc50"
        },
        "item": {
          "id": "e7f1b6e1-a64b-423f-b19e-6b6efbae9df3",
          "name": "Add Metadata Link",
          "request": {
            "url": {
              "path": [
                "v1",
                "metadata",
                "culture",
                "addLink"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\"linkedItemType1\": \"metadata\", \"linkedItemType2\": \"metadata\", \"linkedItemKey1\": \"culture\", \"linkedItemKey2\": \"religion\"}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "47af10bc-c5c1-46ed-bad3-c27e58de9732",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200 or 401\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                  "});",
                  "if (pm.response.code === 200) {",
                  "    pm.test(\"Metadata link added successfully\", function () {",
                  "        pm.expect(pm.response.text()).to.include(\"successfully updated\");",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "e8924c3a-1e3f-47fc-b88e-b4bc41cf0fb8"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3001",
            "path": [
              "v1",
              "metadata",
              "culture",
              "addLink"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Authorization",
              "value": "Bearer {{token}}"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "3dbd2c4c-aa66-4346-a60e-0a5783d839a8",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "PUT",
          "body": {
            "mode": "raw",
            "raw": "{\"linkedItemType1\": \"metadata\", \"linkedItemType2\": \"metadata\", \"linkedItemKey1\": \"culture\", \"linkedItemKey2\": \"religion\"}"
          }
        },
        "id": "e7f1b6e1-a64b-423f-b19e-6b6efbae9df3",
        "requestError": {
          "errno": -61,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3001
        },
        "assertions": [
          {
            "assertion": "Status code is 200 or 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200 or 401",
              "message": "expected undefined to be one of [ 200, 401 ]",
              "stack": "AssertionError: expected undefined to be one of [ 200, 401 ]\n   at Object.eval sandbox-script.js:1:13)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "cab896d4-f7f1-463e-b61c-5b817e54bf0c",
          "length": 34,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "5cd04471-6782-4e8a-82b0-fee6b6b03544"
        },
        "item": {
          "id": "1c834bd9-b48c-40ab-b335-c3b27c11f40a",
          "name": "Remove Metadata Link",
          "request": {
            "url": {
              "path": [
                "v1",
                "metadata",
                "culture",
                "removeLink"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\"linkedItemType1\": \"metadata\", \"linkedItemType2\": \"metadata\", \"linkedItemKey1\": \"culture\", \"linkedItemKey2\": \"religion\"}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "92cfafca-1c13-4438-8d2d-5dc1777a5fc0",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200 or 401\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                  "});",
                  "if (pm.response.code === 200) {",
                  "    pm.test(\"Metadata link removed successfully\", function () {",
                  "        pm.expect(pm.response.text()).to.include(\"successfully updated\");",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "47ced928-c379-4558-9261-c1de9978839e"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3001",
            "path": [
              "v1",
              "metadata",
              "culture",
              "removeLink"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Authorization",
              "value": "Bearer {{token}}"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "953abd48-9b1a-44dd-a16d-f384826f083b",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "PUT",
          "body": {
            "mode": "raw",
            "raw": "{\"linkedItemType1\": \"metadata\", \"linkedItemType2\": \"metadata\", \"linkedItemKey1\": \"culture\", \"linkedItemKey2\": \"religion\"}"
          }
        },
        "id": "1c834bd9-b48c-40ab-b335-c3b27c11f40a",
        "requestError": {
          "errno": -61,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3001
        },
        "assertions": [
          {
            "assertion": "Status code is 200 or 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200 or 401",
              "message": "expected undefined to be one of [ 200, 401 ]",
              "stack": "AssertionError: expected undefined to be one of [ 200, 401 ]\n   at Object.eval sandbox-script.js:1:14)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "584df994-528c-4cbc-a70a-cc9fd24cf2c6",
          "length": 34,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "d4cb7fa9-7d6a-4f9e-8ae7-cfef4733efae"
        },
        "item": {
          "id": "16473151-4e10-4361-b850-56eb769e8375",
          "name": "Delete Metadata",
          "request": {
            "url": {
              "path": [
                "v1",
                "metadata",
                "test_metadata_item"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "31b55cb0-276c-40d7-a549-8b18d0f5f383",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200 or 401\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                  "});"
                ],
                "_lastExecutionId": "f79ad42a-755b-4290-81c3-3415440c60ec"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3001",
            "path": [
              "v1",
              "metadata",
              "test_metadata_item"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer {{token}}"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "d5b8c6c9-cc94-4e6c-bf6a-fd338d901f01",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE"
        },
        "id": "16473151-4e10-4361-b850-56eb769e8375",
        "requestError": {
          "errno": -61,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3001
        },
        "assertions": [
          {
            "assertion": "Status code is 200 or 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200 or 401",
              "message": "expected undefined to be one of [ 200, 401 ]",
              "stack": "AssertionError: expected undefined to be one of [ 200, 401 ]\n   at Object.eval sandbox-script.js:1:15)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "aee54e8a-926b-49f1-b9cb-0a1335d036b7",
          "length": 34,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "6ea19ddb-d8b1-4eb1-b4f9-166c947ff5e0"
        },
        "item": {
          "id": "42b0e9d4-c595-4a53-931a-9d432fbbec55",
          "name": "Upvote Metadata",
          "request": {
            "url": {
              "path": [
                "v1",
                "metadata",
                "culture",
                "upvote"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "method": "PUT"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7e8d02a9-e558-48f8-a3b5-cad8afbdb5ad",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "_lastExecutionId": "279722b7-d397-40f9-a184-0223966fb78e"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3001",
            "path": [
              "v1",
              "metadata",
              "culture",
              "upvote"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer {{token}}"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "63872bbe-7e47-4ce3-8fb5-32b976fd0bd0",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "PUT"
        },
        "id": "42b0e9d4-c595-4a53-931a-9d432fbbec55",
        "requestError": {
          "errno": -61,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3001
        },
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:16)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "303402e1-fa2f-4a12-9fe2-ce6aa9e36b8b",
          "length": 34,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "c7e9109e-5d5f-4317-8567-de4fa931d5f9"
        },
        "item": {
          "id": "0dd50556-f6cc-47db-a7c4-fbcd64137355",
          "name": "Downvote Metadata",
          "request": {
            "url": {
              "path": [
                "v1",
                "metadata",
                "culture",
                "downvote"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "method": "PUT"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e162af2e-4df5-4bf9-bbce-11360646df04",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "_lastExecutionId": "aaf71814-dadc-46eb-9629-80b99e69d078"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3001",
            "path": [
              "v1",
              "metadata",
              "culture",
              "downvote"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer {{token}}"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "8fef445b-e3c8-4832-8b2d-105ed40993e4",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "PUT"
        },
        "id": "0dd50556-f6cc-47db-a7c4-fbcd64137355",
        "requestError": {
          "errno": -61,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3001
        },
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:17)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "9f5ef2cc-0309-4ed3-a08e-15fcf1eaf3af",
          "length": 34,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "fab3f77f-42bc-43b2-adcb-4a288269c42c"
        },
        "item": {
          "id": "dfff1a6f-69ea-400e-b5cd-c1960322f443",
          "name": "Get Single Marker",
          "request": {
            "url": {
              "path": [
                "v1",
                "markers",
                ""
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "count",
                  "value": "1"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "95d1a2fb-f815-4579-9e8b-9ce59ed14b6d",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Response contains marker data\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});"
                ],
                "_lastExecutionId": "5989902e-ef84-4a0e-af75-22088a515bd5"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3001",
            "path": [
              "v1",
              "markers",
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "count",
                "value": "1"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "16b7f798-f70f-4dbc-a67c-d44d440d73b6",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "id": "dfff1a6f-69ea-400e-b5cd-c1960322f443",
        "requestError": {
          "errno": -61,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3001
        },
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:18)"
            }
          },
          {
            "assertion": "Response contains marker data",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Response contains marker data",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "63b3b6e3-4014-4e6e-8467-b8e81191c03a",
          "length": 34,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "9e583e05-273f-4516-b18d-4063b117c9ed"
        },
        "item": {
          "id": "6c8c604a-c3d2-46e0-9f4f-034e24405740",
          "name": "Get Markers with Types and Count",
          "request": {
            "url": {
              "path": [
                "v1",
                "markers"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "types",
                  "value": "a,ar,at,b,c,ca,cp,e,m,op,p,r,s,si"
                },
                {
                  "key": "year",
                  "value": "714"
                },
                {
                  "key": "count",
                  "value": "3000"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "15ebf48d-fd1c-4590-bdbb-7e3cdac21ce5",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Response time is acceptable for large dataset\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                  "});",
                  "pm.test(\"Response contains markers with valid structure\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an(\"array\");",
                  "    pm.expect(jsonData.length).to.be.greaterThan(0);",
                  "    if (jsonData.length > 0) {",
                  "        pm.expect(jsonData[0]).to.have.property(\"_id\");",
                  "        pm.expect(jsonData[0]).to.have.property(\"name\");",
                  "        pm.expect(jsonData[0]).to.have.property(\"coo\");",
                  "        if (jsonData[0].coo && jsonData[0].coo.length === 2) {",
                  "            pm.expect(jsonData[0].coo[0]).to.be.within(-90, 90);",
                  "            pm.expect(jsonData[0].coo[1]).to.be.within(-180, 180);",
                  "        }",
                  "    }",
                  "});"
                ],
                "_lastExecutionId": "62d6a0ec-bbf9-4d82-a5fa-9fbe8b54d179"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3001",
            "path": [
              "v1",
              "markers"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "types",
                "value": "a,ar,at,b,c,ca,cp,e,m,op,p,r,s,si"
              },
              {
                "key": "year",
                "value": "714"
              },
              {
                "key": "count",
                "value": "3000"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "9122fdda-3bd2-4ea4-908e-d4f4037f45f6",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "id": "6c8c604a-c3d2-46e0-9f4f-034e24405740",
        "requestError": {
          "errno": -61,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3001
        },
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:19)"
            }
          },
          {
            "assertion": "Response time is acceptable for large dataset",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response time is acceptable for large dataset",
              "message": "expected undefined to be a number or a date",
              "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:2:19)"
            }
          },
          {
            "assertion": "Response contains markers with valid structure",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "Response contains markers with valid structure",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:3:19)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "d404035c-04b3-4627-9ec1-ee8f0a3a9c47",
          "length": 34,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "614b2783-5a4a-4f90-bbde-e5c364839ead"
        },
        "item": {
          "id": "99a2b0e6-ac55-4337-8ab9-dc9f858c5c79",
          "name": "Get Limited Markers",
          "request": {
            "url": {
              "path": [
                "v1",
                "markers"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "types",
                  "value": "a,ar,at,b,c,ca,cp,e,m,op,p,r,s,si"
                },
                {
                  "key": "year",
                  "value": "1945"
                },
                {
                  "key": "count",
                  "value": "100"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "04d34445-0ac5-449d-ad3a-5f2b1fcb097b",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Response contains exactly 100 or fewer markers\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "    pm.expect(jsonData.length).to.be.at.most(100);",
                  "});"
                ],
                "_lastExecutionId": "ebf70d3e-e029-4c89-956b-900b4cf6fade"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3001",
            "path": [
              "v1",
              "markers"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "types",
                "value": "a,ar,at,b,c,ca,cp,e,m,op,p,r,s,si"
              },
              {
                "key": "year",
                "value": "1945"
              },
              {
                "key": "count",
                "value": "100"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "75bf8290-883c-425a-97d8-649b92f9a66e",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "id": "99a2b0e6-ac55-4337-8ab9-dc9f858c5c79",
        "requestError": {
          "errno": -61,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3001
        },
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:20)"
            }
          },
          {
            "assertion": "Response contains exactly 100 or fewer markers",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Response contains exactly 100 or fewer markers",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "4c35bb1c-0b45-47c9-a4fb-84fe3ad76eee",
          "length": 34,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "88f864b0-a1d4-47bb-befb-9887af725b4a"
        },
        "item": {
          "id": "f3bc2747-6b59-40fc-896e-c38ff29965f1",
          "name": "Create Marker",
          "request": {
            "url": {
              "path": [
                "v1",
                "markers"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"_id\": \"test_marker\",\n  \"name\": \"Test Marker\",\n  \"type\": \"c\",\n  \"coo\": [0, 0],\n  \"year\": 2000,\n  \"data\": {\n    \"description\": \"Test marker\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6cbef540-3351-4458-b028-ef7557dabdb9",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200, 201, or 401\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 401]);",
                  "});",
                  "if (pm.response.code !== 401) {",
                  "    pm.test(\"Response contains created marker\", function () {",
                  "        var jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.not.be.empty;",
                  "        if (jsonData._id) {",
                  "            pm.globals.set(\"markerId\", jsonData._id);",
                  "        }",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "976105fc-c369-4cea-86f5-cd90f59de04d"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3001",
            "path": [
              "v1",
              "markers"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Authorization",
              "value": "Bearer {{token}}"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "abe3d6ff-e1f3-4335-bec7-3ba4f6aae3ef",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"_id\": \"test_marker\",\n  \"name\": \"Test Marker\",\n  \"type\": \"c\",\n  \"coo\": [0, 0],\n  \"year\": 2000,\n  \"data\": {\n    \"description\": \"Test marker\"\n  }\n}"
          }
        },
        "id": "f3bc2747-6b59-40fc-896e-c38ff29965f1",
        "requestError": {
          "errno": -61,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3001
        },
        "assertions": [
          {
            "assertion": "Status code is 200, 201, or 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200, 201, or 401",
              "message": "expected undefined to be one of [ 200, 201, 401 ]",
              "stack": "AssertionError: expected undefined to be one of [ 200, 201, 401 ]\n   at Object.eval sandbox-script.js:1:21)"
            }
          },
          {
            "assertion": "Response contains created marker",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Response contains created marker",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "71ba0a93-675d-4be7-8c4c-6e3ea637ba6c",
          "length": 34,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "1855714f-c6a9-4d6d-819b-3f0a006f94c5"
        },
        "item": {
          "id": "35f9cafd-aa14-4fda-8f62-1d976e065dbe",
          "name": "Update Marker",
          "request": {
            "url": {
              "path": [
                "v1",
                "markers",
                "test_marker"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Updated Test Marker\",\n  \"data\": {\n    \"description\": \"Updated test marker\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6cfae020-c6f6-44f2-9de8-fe649c1cc726",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200 or 401\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                  "});",
                  "if (pm.response.code !== 401) {",
                  "    pm.test(\"Response contains updated marker\", function () {",
                  "        var jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.not.be.empty;",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "ee62865f-ddbd-4d81-9377-69548df3241f"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3001",
            "path": [
              "v1",
              "markers",
              "test_marker"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Authorization",
              "value": "Bearer {{token}}"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "c1404b0d-3e23-4b2f-9c45-9e0921c88296",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "PUT",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"name\": \"Updated Test Marker\",\n  \"data\": {\n    \"description\": \"Updated test marker\"\n  }\n}"
          }
        },
        "id": "35f9cafd-aa14-4fda-8f62-1d976e065dbe",
        "requestError": {
          "errno": -61,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3001
        },
        "assertions": [
          {
            "assertion": "Status code is 200 or 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200 or 401",
              "message": "expected undefined to be one of [ 200, 401 ]",
              "stack": "AssertionError: expected undefined to be one of [ 200, 401 ]\n   at Object.eval sandbox-script.js:1:22)"
            }
          },
          {
            "assertion": "Response contains updated marker",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Response contains updated marker",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "dac08b4c-0de8-4dd6-9113-e2549ee4ed3e",
          "length": 34,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "959939bc-3fd9-4d19-84f1-b30a10e67824"
        },
        "item": {
          "id": "6279e449-b739-4516-958b-8fd400b8aa25",
          "name": "Delete Marker",
          "request": {
            "url": {
              "path": [
                "v1",
                "markers",
                "test_marker"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a8162679-5fbc-495d-a134-7722481a087c",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200 or 401\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                  "});"
                ],
                "_lastExecutionId": "30b557f1-9058-4431-bcde-d0434a642d97"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3001",
            "path": [
              "v1",
              "markers",
              "test_marker"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer {{token}}"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "68944098-b3bb-4844-8e60-919faa256783",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE"
        },
        "id": "6279e449-b739-4516-958b-8fd400b8aa25",
        "requestError": {
          "errno": -61,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3001
        },
        "assertions": [
          {
            "assertion": "Status code is 200 or 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200 or 401",
              "message": "expected undefined to be one of [ 200, 401 ]",
              "stack": "AssertionError: expected undefined to be one of [ 200, 401 ]\n   at Object.eval sandbox-script.js:1:23)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "6e152873-ede1-4ce2-9791-98a9bdf4cbcb",
          "length": 34,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "a6584145-7fee-449f-9736-3685ca062145"
        },
        "item": {
          "id": "13a8ce98-7dbb-4236-95d6-c66992b9c07d",
          "name": "Get Areas List",
          "request": {
            "url": {
              "path": [
                "v1",
                "areas"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "122548d7-42f7-4b0e-8f53-9fc378d30040",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Response contains areas data\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});"
                ],
                "_lastExecutionId": "727484d4-8c7b-4702-b355-5af15306f3a3"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3001",
            "path": [
              "v1",
              "areas"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer {{token}}"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "cf2abefc-df6e-4fe9-86c0-c893bca2ae97",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "id": "13a8ce98-7dbb-4236-95d6-c66992b9c07d",
        "requestError": {
          "errno": -61,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3001
        },
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:24)"
            }
          },
          {
            "assertion": "Response contains areas data",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Response contains areas data",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "7811e2f0-220e-480f-9540-d6fabf80dfc3",
          "length": 34,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "dea7843f-5291-4354-b9dc-7c2e8ec8db88"
        },
        "item": {
          "id": "06981e0b-7744-4fd5-a112-c98bb1417abc",
          "name": "Get Area by Year (2000)",
          "request": {
            "url": {
              "path": [
                "v1",
                "areas",
                "2000"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b1a73ddc-8bf9-4555-b319-86353421d2f8",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Response time is acceptable for historical data\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                  "});",
                  "pm.test(\"Response contains valid area data for year 2000\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an(\"object\");",
                  "    pm.expect(Object.keys(jsonData).length).to.be.greaterThan(0);",
                  "    var firstKey = Object.keys(jsonData)[0];",
                  "    if (firstKey && jsonData[firstKey]) {",
                  "        pm.expect(jsonData[firstKey]).to.satisfy(function(value) {",
                  "            return Array.isArray(value) || typeof value === \"object\";",
                  "        });",
                  "    }",
                  "});"
                ],
                "_lastExecutionId": "628202db-b651-4f35-98ce-33ace9a6862e"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3001",
            "path": [
              "v1",
              "areas",
              "2000"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "e3ffee1f-aec2-4187-aa97-551c9746fdd7",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "id": "06981e0b-7744-4fd5-a112-c98bb1417abc",
        "requestError": {
          "errno": -61,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3001
        },
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:25)"
            }
          },
          {
            "assertion": "Response time is acceptable for historical data",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response time is acceptable for historical data",
              "message": "expected undefined to be a number or a date",
              "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:2:25)"
            }
          },
          {
            "assertion": "Response contains valid area data for year 2000",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "Response contains valid area data for year 2000",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:3:25)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "b73ecdf1-bdce-477f-9782-b38f94ac6dbe",
          "length": 34,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "d57de25f-65e9-42a4-b796-422ed3567b0b"
        },
        "item": {
          "id": "b9c9de0d-6c15-413c-92ac-72cab9eaa47c",
          "name": "Get Area by Year (-2000)",
          "request": {
            "url": {
              "path": [
                "v1",
                "areas",
                "-2000"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "857fb6ae-6a45-44cc-91a1-adb6c6b7750b",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "_lastExecutionId": "f13b0bc4-808f-4e90-922f-0fb87ff22a06"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3001",
            "path": [
              "v1",
              "areas",
              "-2000"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "0c887bc1-7c3e-489a-8cd4-cc1663a68685",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "id": "b9c9de0d-6c15-413c-92ac-72cab9eaa47c",
        "requestError": {
          "errno": -61,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3001
        },
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:26)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "a9dad484-dd3e-4091-86de-2d7b7bb3e599",
          "length": 34,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "a1cdbc27-e9af-4054-82c8-77fda82f9c45"
        },
        "item": {
          "id": "a047c2d0-0775-4b4e-9123-bb91dc8a530f",
          "name": "Get Historical Areas (1947)",
          "request": {
            "url": {
              "path": [
                "v1",
                "areas",
                "1947"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d9f5972c-5fd2-4189-ab39-da1a6dd028aa",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "_lastExecutionId": "8b60bf27-3031-44e4-855c-19a9b77bb409"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3001",
            "path": [
              "v1",
              "areas",
              "1947"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "8f8ffa29-8314-4800-aa39-c49ee8f4164d",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "id": "a047c2d0-0775-4b4e-9123-bb91dc8a530f",
        "requestError": {
          "errno": -61,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3001
        },
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:27)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "f9269dfd-d841-4559-89a4-1b820892e720",
          "length": 34,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "00c01af3-fb4a-4af8-a131-238fdc62b28d"
        },
        "item": {
          "id": "b1054e1d-00ec-4394-8599-3b9874d973bf",
          "name": "Get Forum Discussions",
          "request": {
            "url": {
              "path": [
                "v1",
                "board",
                "forum",
                "questions",
                "discussions"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "sorting_method",
                  "value": "date"
                },
                {
                  "key": "q",
                  "value": "1:ae|ruler|KHI"
                },
                {
                  "key": "limit",
                  "value": "5"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ce1add36-eb1c-40fb-a85c-f48f2b142409",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Response contains discussions data\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});"
                ],
                "_lastExecutionId": "d4f5f062-3b54-4d64-8a8e-9a09df6af274"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3001",
            "path": [
              "v1",
              "board",
              "forum",
              "questions",
              "discussions"
            ],
            "host": [
              "localhost"
            ],
            "query": [
              {
                "key": "sorting_method",
                "value": "date"
              },
              {
                "key": "q",
                "value": "1:ae|ruler|KHI"
              },
              {
                "key": "limit",
                "value": "5"
              }
            ],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "b3e54433-fd63-42d3-a437-f871e87f0727",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "id": "b1054e1d-00ec-4394-8599-3b9874d973bf",
        "requestError": {
          "errno": -61,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3001
        },
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:28)"
            }
          },
          {
            "assertion": "Response contains discussions data",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Response contains discussions data",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "75dbb7c5-c7f6-40fa-9da5-94666c479791",
          "length": 34,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "3423810e-89aa-46bf-bf2c-cafa7516416a"
        },
        "item": {
          "id": "4e23fcb4-9ef1-4ea8-b41f-3318be2c55f4",
          "name": "Get User by Email",
          "request": {
            "url": {
              "path": [
                "v1",
                "users",
                "postman@aui.de"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a0fe48c3-1508-4e87-a7e5-a76beaac0541",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Response time is fast\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "pm.test(\"Response contains valid user structure\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property(\"email\");",
                  "    pm.expect(jsonData).to.have.property(\"username\");",
                  "    pm.expect(jsonData.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);",
                  "    pm.expect(jsonData.email).to.equal(\"postman@aui.de\");",
                  "});"
                ],
                "_lastExecutionId": "c4ffede9-306d-4f31-b0f5-01077ab19af2"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3001",
            "path": [
              "v1",
              "users",
              "postman@aui.de"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer {{token}}"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "7263d8b3-ba93-4d74-84de-d59a9b65d8f8",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "id": "4e23fcb4-9ef1-4ea8-b41f-3318be2c55f4",
        "requestError": {
          "errno": -61,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3001
        },
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:29)"
            }
          },
          {
            "assertion": "Response time is fast",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "Response time is fast",
              "message": "expected undefined to be a number or a date",
              "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:2:29)"
            }
          },
          {
            "assertion": "Response contains valid user structure",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "Response contains valid user structure",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:3:29)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "66e6a99f-ab5e-4991-8d01-b2f891d3cdda",
          "length": 34,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "00d5e3ee-62ed-4139-828b-dbf192c66973"
        },
        "item": {
          "id": "18f21432-9d52-40da-89ac-6b0eb847f1bd",
          "name": "Create User",
          "request": {
            "url": {
              "path": [
                "v1",
                "users",
                ""
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"testUser@test.de\",\n  \"password\": \"testPassword123\",\n  \"username\": \"testUser\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e468a60e-0d8b-4ca3-b35b-43c0591b7300",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200 or 400\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 400]);",
                  "});",
                  "if (pm.response.code === 200) {",
                  "    pm.test(\"Response contains valid user\", function () {",
                  "        var jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('email');",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "a3e867c6-9e2a-47ba-91cf-cdac0608401a"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3001",
            "path": [
              "v1",
              "users",
              ""
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Authorization",
              "value": "Bearer {{token}}"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "32bd9c42-abe5-4cbf-8ca2-b9c649ab1ea5",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "POST",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"email\": \"testUser@test.de\",\n  \"password\": \"testPassword123\",\n  \"username\": \"testUser\"\n}"
          }
        },
        "id": "18f21432-9d52-40da-89ac-6b0eb847f1bd",
        "requestError": {
          "errno": -61,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3001
        },
        "assertions": [
          {
            "assertion": "Status code is 200 or 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200 or 400",
              "message": "expected undefined to be one of [ 200, 400 ]",
              "stack": "AssertionError: expected undefined to be one of [ 200, 400 ]\n   at Object.eval sandbox-script.js:1:30)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "79bf56a1-28ac-43a5-af7a-533f9cfa5f6b",
          "length": 34,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "918cf2e1-1ff3-4e0c-817f-8df0852cee90"
        },
        "item": {
          "id": "83acafef-d911-4a60-a5db-f7576521a65c",
          "name": "Update User",
          "request": {
            "url": {
              "path": [
                "v1",
                "users",
                "testUser@test.de"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"updatedTestUser\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "bd3a3429-5671-404f-90a0-c6de13860eb8",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Response contains valid user\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('email');",
                  "});"
                ],
                "_lastExecutionId": "387c4f5d-ca2c-4d9c-9c21-ccebcf83ed7b"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3001",
            "path": [
              "v1",
              "users",
              "testUser@test.de"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Content-Type",
              "value": "application/json"
            },
            {
              "key": "Authorization",
              "value": "Bearer {{token}}"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "11c5b136-782a-4e52-b83b-8b2f8d4de78d",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "PUT",
          "body": {
            "mode": "raw",
            "raw": "{\n  \"username\": \"updatedTestUser\"\n}"
          }
        },
        "id": "83acafef-d911-4a60-a5db-f7576521a65c",
        "requestError": {
          "errno": -61,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3001
        },
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:31)"
            }
          },
          {
            "assertion": "Response contains valid user",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Response contains valid user",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "3b2a6584-8687-4a19-a7ff-5f25ca68c68d",
          "length": 34,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "17cc00d8-702b-4a8c-9bd1-ba6df0e089e1"
        },
        "item": {
          "id": "4d4a7d6b-7816-4fc7-b78c-94a7577476b4",
          "name": "Delete User",
          "request": {
            "url": {
              "path": [
                "v1",
                "users",
                "testUser@test.de"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0b1f4689-1267-466f-b1d7-6c095c2d276c",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Response contains valid user\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('email');",
                  "});"
                ],
                "_lastExecutionId": "bbd38b7d-d1c5-4a09-ab3f-c79b216c49bf"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3001",
            "path": [
              "v1",
              "users",
              "testUser@test.de"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer {{token}}"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "c011102f-911e-4c30-8792-b8a56a9006fa",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "DELETE"
        },
        "id": "4d4a7d6b-7816-4fc7-b78c-94a7577476b4",
        "requestError": {
          "errno": -61,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3001
        },
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:32)"
            }
          },
          {
            "assertion": "Response contains valid user",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Response contains valid user",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "899250ce-018d-4127-ad54-aa8ff6f2dd77",
          "length": 34,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "1629331c-5b60-4a62-833a-9f287b61fd2c"
        },
        "item": {
          "id": "5ea8f093-1008-417b-bbe4-7daa933ad7ce",
          "name": "Get Statistics",
          "request": {
            "url": {
              "path": [
                "v1",
                "statistics"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "214cac4d-4363-433e-8cd9-96dcd2b913d0",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Response contains statistics data\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.not.be.empty;",
                  "});"
                ],
                "_lastExecutionId": "3cdd04a4-441b-4712-9e1f-ec453b727a47"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3001",
            "path": [
              "v1",
              "statistics"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "2aba2323-ad1d-4653-a54f-1a44c670add4",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "id": "5ea8f093-1008-417b-bbe4-7daa933ad7ce",
        "requestError": {
          "errno": -61,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3001
        },
        "assertions": [
          {
            "assertion": "Status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200",
              "message": "expected PostmanResponse{ …(5) } to have property 'code'",
              "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:33)"
            }
          },
          {
            "assertion": "Response contains statistics data",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "Response contains statistics data",
              "message": "\"undefined\" is not valid JSON",
              "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "cursor": {
          "ref": "6cabbf25-409d-41fc-86b6-10b20cc5bed7",
          "length": 34,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "98622681-eb43-4cb9-be11-09a088dd9fb1"
        },
        "item": {
          "id": "c6ef265f-d1bd-4b00-ae49-d52b07649c9e",
          "name": "Get Flags List",
          "request": {
            "url": {
              "path": [
                "v1",
                "flags"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "46ab5e8a-3ab5-4a3b-9a79-bda8f05bef3e",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200 or 401\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                  "});",
                  "if (pm.response.code === 200) {",
                  "    pm.test(\"Response contains flags data\", function () {",
                  "        var jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.be.an('array');",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "7f46dd6b-55da-48dd-a9ab-90ba3e4071e5"
              }
            }
          ]
        },
        "request": {
          "url": {
            "protocol": "http",
            "port": "3001",
            "path": [
              "v1",
              "flags"
            ],
            "host": [
              "localhost"
            ],
            "query": [],
            "variable": []
          },
          "header": [
            {
              "key": "Authorization",
              "value": "Bearer {{token}}"
            },
            {
              "key": "User-Agent",
              "value": "PostmanRuntime/7.39.1",
              "system": true
            },
            {
              "key": "Accept",
              "value": "*/*",
              "system": true
            },
            {
              "key": "Cache-Control",
              "value": "no-cache",
              "system": true
            },
            {
              "key": "Postman-Token",
              "value": "8f9c061c-dbc6-46e0-b4d3-095a4fa24250",
              "system": true
            },
            {
              "key": "Host",
              "value": "localhost:3001",
              "system": true
            },
            {
              "key": "Accept-Encoding",
              "value": "gzip, deflate, br",
              "system": true
            },
            {
              "key": "Connection",
              "value": "keep-alive",
              "system": true
            }
          ],
          "method": "GET"
        },
        "id": "c6ef265f-d1bd-4b00-ae49-d52b07649c9e",
        "requestError": {
          "errno": -61,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3001
        },
        "assertions": [
          {
            "assertion": "Status code is 200 or 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "Status code is 200 or 401",
              "message": "expected undefined to be one of [ 200, 401 ]",
              "stack": "AssertionError: expected undefined to be one of [ 200, 401 ]\n   at Object.eval sandbox-script.js:1:34)"
            }
          }
        ]
      }
    ],
    "transfers": {
      "responseTotal": 0
    },
    "failures": [
      {
        "error": {
          "errno": -61,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3001,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:3001",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:3001\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1637:16)",
          "checksum": "f958207822d918da82c40a9f858a19c2",
          "id": "c8f9c699-d130-4f17-9594-47fd4528f076",
          "timestamp": 1758627604374,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1637,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "67287f32-011f-46cc-8b03-d9513e78bf7a",
          "name": "Login - Valid Credentials",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3001",
              "path": [
                "v1",
                "auth",
                "login"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "9fcb8284-9e01-4e1a-90c7-5fadbdaf93c3",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:3001",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST",
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "email",
                  "value": "postman@aui.de"
                },
                {
                  "key": "password",
                  "value": "postman123"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "06573a42-6787-4a02-b96b-45de083f2dc4",
                "type": "text/javascript",
                "exec": [
                  "var data = JSON.parse(responseBody);",
                  "pm.globals.set(\"token\", data.token);",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Response time is fast for authentication\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});",
                  "pm.test(\"Response contains valid authentication data\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.token).to.not.be.empty;",
                  "    pm.expect(jsonData.username).to.not.be.empty;",
                  "    pm.expect(jsonData.token).to.match(/^[A-Za-z0-9\\-_]+\\.[A-Za-z0-9\\-_]+\\.[A-Za-z0-9\\-_]+$/);",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 34,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "4fa06e1e-8ce1-4bc9-b0a6-98f8ddbece24",
          "httpRequestId": "37fbcafc-c185-4f54-ac18-01c3ac0df511"
        }
      },
      {
        "error": {
          "type": "Error",
          "name": "JSONError",
          "message": "\"undefined\" is not valid JSON",
          "checksum": "4db15f4d7d3ae61b799898db95379b99",
          "id": "734b1612-7c9b-4805-9eff-6ac00f829851",
          "timestamp": 1758627604382,
          "stacktrace": []
        },
        "at": "test-script",
        "source": {
          "id": "67287f32-011f-46cc-8b03-d9513e78bf7a",
          "name": "Login - Valid Credentials",
          "request": {
            "url": {
              "path": [
                "v1",
                "auth",
                "login"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "POST",
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "email",
                  "value": "postman@aui.de"
                },
                {
                  "key": "password",
                  "value": "postman123"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "06573a42-6787-4a02-b96b-45de083f2dc4",
                "type": "text/javascript",
                "exec": [
                  "var data = JSON.parse(responseBody);",
                  "pm.globals.set(\"token\", data.token);",
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Response time is fast for authentication\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});",
                  "pm.test(\"Response contains valid authentication data\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.token).to.not.be.empty;",
                  "    pm.expect(jsonData.username).to.not.be.empty;",
                  "    pm.expect(jsonData.token).to.match(/^[A-Za-z0-9\\-_]+\\.[A-Za-z0-9\\-_]+\\.[A-Za-z0-9\\-_]+$/);",
                  "});"
                ],
                "_lastExecutionId": "bc606e1c-e04a-492b-afe8-e31dfdbb66e0"
              }
            }
          ]
        },
        "parent": {
          "id": "ba09fa07-0276-4685-9875-4ddc1a43d38f",
          "name": "Authentication",
          "item": [
            {
              "id": "67287f32-011f-46cc-8b03-d9513e78bf7a",
              "name": "Login - Valid Credentials",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "auth",
                    "login"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "POST",
                "body": {
                  "mode": "urlencoded",
                  "urlencoded": [
                    {
                      "key": "email",
                      "value": "postman@aui.de"
                    },
                    {
                      "key": "password",
                      "value": "postman123"
                    }
                  ]
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "06573a42-6787-4a02-b96b-45de083f2dc4",
                    "type": "text/javascript",
                    "exec": [
                      "var data = JSON.parse(responseBody);",
                      "pm.globals.set(\"token\", data.token);",
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response time is fast for authentication\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                      "});",
                      "pm.test(\"Response contains valid authentication data\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.token).to.not.be.empty;",
                      "    pm.expect(jsonData.username).to.not.be.empty;",
                      "    pm.expect(jsonData.token).to.match(/^[A-Za-z0-9\\-_]+\\.[A-Za-z0-9\\-_]+\\.[A-Za-z0-9\\-_]+$/);",
                      "});"
                    ],
                    "_lastExecutionId": "bc606e1c-e04a-492b-afe8-e31dfdbb66e0"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 34,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "4fa06e1e-8ce1-4bc9-b0a6-98f8ddbece24",
          "httpRequestId": "37fbcafc-c185-4f54-ac18-01c3ac0df511",
          "scriptId": "06573a42-6787-4a02-b96b-45de083f2dc4"
        }
      },
      {
        "error": {
          "errno": -61,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3001,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:3001",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:3001\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1637:16)",
          "checksum": "f958207822d918da82c40a9f858a19c2",
          "id": "259c3054-9d97-4be3-a659-266c64acaf0f",
          "timestamp": 1758627604392,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1637,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "d2be0656-03c4-46c1-947f-cb8384044820",
          "name": "Version Info",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3001",
              "path": [
                "v1",
                "version"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "d622c721-ab2c-488a-a8bc-8591ad793b71",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:3001",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ae073ae7-b0f5-41f8-be24-d7128bb48645",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Response time is fast\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "pm.test(\"Response contains valid version format\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.version).to.not.be.empty;",
                  "    pm.expect(jsonData.version).to.match(/^\\d+\\.\\d+/);",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "8074eabd-e5b2-49cc-92bb-3228ae13bcb7",
          "length": 34,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "5153aebb-1ccc-4762-8270-dacef80b672c"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:2)",
          "checksum": "169020131664477cec85b1c00a6464f6",
          "id": "81839246-3239-40e6-9339-c4c2cc883ea0",
          "timestamp": 1758627604399,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 2,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "d2be0656-03c4-46c1-947f-cb8384044820",
          "name": "Version Info",
          "request": {
            "url": {
              "path": [
                "v1",
                "version"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ae073ae7-b0f5-41f8-be24-d7128bb48645",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Response time is fast\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "pm.test(\"Response contains valid version format\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.version).to.not.be.empty;",
                  "    pm.expect(jsonData.version).to.match(/^\\d+\\.\\d+/);",
                  "});"
                ],
                "_lastExecutionId": "99e5af01-5cb4-4042-929f-c7ce3eb087dd"
              }
            }
          ]
        },
        "parent": {
          "id": "296174c1-24eb-4c43-8df8-f835b58ccfd6",
          "name": "Version & Health",
          "item": [
            {
              "id": "d2be0656-03c4-46c1-947f-cb8384044820",
              "name": "Version Info",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "version"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ae073ae7-b0f5-41f8-be24-d7128bb48645",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response time is fast\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      "pm.test(\"Response contains valid version format\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.version).to.not.be.empty;",
                      "    pm.expect(jsonData.version).to.match(/^\\d+\\.\\d+/);",
                      "});"
                    ],
                    "_lastExecutionId": "99e5af01-5cb4-4042-929f-c7ce3eb087dd"
                  }
                }
              ]
            },
            {
              "id": "8a9dd9fd-14f0-429f-839a-201a2933f7ac",
              "name": "Welcome Endpoint",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "version",
                    "welcome"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ea2d7b31-e165-4d19-bec8-b8894bfea6da",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response contains version and user info\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.version).to.not.be.empty;",
                      "});"
                    ],
                    "_lastExecutionId": "b326521c-0e52-4972-831d-981bb5df6b03"
                  }
                }
              ]
            },
            {
              "id": "ddd03e51-6314-4c61-84e4-ef79cb0a16a1",
              "name": "Health Check",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "health"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f8f6cc14-3295-4dc5-97a7-935e627a7bb2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Health check returns OK\", function () {",
                      "    pm.expect(pm.response.text()).to.include('Health OK');",
                      "});"
                    ],
                    "_lastExecutionId": "3ab1754b-02b7-4567-9089-cc4911423542"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "8074eabd-e5b2-49cc-92bb-3228ae13bcb7",
          "length": 34,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "5153aebb-1ccc-4762-8270-dacef80b672c",
          "scriptId": "ae073ae7-b0f5-41f8-be24-d7128bb48645",
          "execution": "99e5af01-5cb4-4042-929f-c7ce3eb087dd"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response time is fast",
          "message": "expected undefined to be a number or a date",
          "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:2:2)",
          "checksum": "f170e5af497b4858c70ac3fa9244d6bb",
          "id": "4bdaf7f9-cdde-4b29-a022-eb5c0949b436",
          "timestamp": 1758627604399,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 2,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "d2be0656-03c4-46c1-947f-cb8384044820",
          "name": "Version Info",
          "request": {
            "url": {
              "path": [
                "v1",
                "version"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ae073ae7-b0f5-41f8-be24-d7128bb48645",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Response time is fast\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "pm.test(\"Response contains valid version format\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.version).to.not.be.empty;",
                  "    pm.expect(jsonData.version).to.match(/^\\d+\\.\\d+/);",
                  "});"
                ],
                "_lastExecutionId": "99e5af01-5cb4-4042-929f-c7ce3eb087dd"
              }
            }
          ]
        },
        "parent": {
          "id": "296174c1-24eb-4c43-8df8-f835b58ccfd6",
          "name": "Version & Health",
          "item": [
            {
              "id": "d2be0656-03c4-46c1-947f-cb8384044820",
              "name": "Version Info",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "version"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ae073ae7-b0f5-41f8-be24-d7128bb48645",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response time is fast\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      "pm.test(\"Response contains valid version format\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.version).to.not.be.empty;",
                      "    pm.expect(jsonData.version).to.match(/^\\d+\\.\\d+/);",
                      "});"
                    ],
                    "_lastExecutionId": "99e5af01-5cb4-4042-929f-c7ce3eb087dd"
                  }
                }
              ]
            },
            {
              "id": "8a9dd9fd-14f0-429f-839a-201a2933f7ac",
              "name": "Welcome Endpoint",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "version",
                    "welcome"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ea2d7b31-e165-4d19-bec8-b8894bfea6da",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response contains version and user info\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.version).to.not.be.empty;",
                      "});"
                    ],
                    "_lastExecutionId": "b326521c-0e52-4972-831d-981bb5df6b03"
                  }
                }
              ]
            },
            {
              "id": "ddd03e51-6314-4c61-84e4-ef79cb0a16a1",
              "name": "Health Check",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "health"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f8f6cc14-3295-4dc5-97a7-935e627a7bb2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Health check returns OK\", function () {",
                      "    pm.expect(pm.response.text()).to.include('Health OK');",
                      "});"
                    ],
                    "_lastExecutionId": "3ab1754b-02b7-4567-9089-cc4911423542"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "8074eabd-e5b2-49cc-92bb-3228ae13bcb7",
          "length": 34,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "5153aebb-1ccc-4762-8270-dacef80b672c",
          "scriptId": "ae073ae7-b0f5-41f8-be24-d7128bb48645",
          "execution": "99e5af01-5cb4-4042-929f-c7ce3eb087dd"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 2,
          "test": "Response contains valid version format",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:3:2)",
          "checksum": "6979669d4b8b9d39dbed4764fdc40269",
          "id": "f9d2984d-28d2-41c7-892b-4420a1a342d4",
          "timestamp": 1758627604400,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 2,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "d2be0656-03c4-46c1-947f-cb8384044820",
          "name": "Version Info",
          "request": {
            "url": {
              "path": [
                "v1",
                "version"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ae073ae7-b0f5-41f8-be24-d7128bb48645",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Response time is fast\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "pm.test(\"Response contains valid version format\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.version).to.not.be.empty;",
                  "    pm.expect(jsonData.version).to.match(/^\\d+\\.\\d+/);",
                  "});"
                ],
                "_lastExecutionId": "99e5af01-5cb4-4042-929f-c7ce3eb087dd"
              }
            }
          ]
        },
        "parent": {
          "id": "296174c1-24eb-4c43-8df8-f835b58ccfd6",
          "name": "Version & Health",
          "item": [
            {
              "id": "d2be0656-03c4-46c1-947f-cb8384044820",
              "name": "Version Info",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "version"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ae073ae7-b0f5-41f8-be24-d7128bb48645",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response time is fast\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      "pm.test(\"Response contains valid version format\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.version).to.not.be.empty;",
                      "    pm.expect(jsonData.version).to.match(/^\\d+\\.\\d+/);",
                      "});"
                    ],
                    "_lastExecutionId": "99e5af01-5cb4-4042-929f-c7ce3eb087dd"
                  }
                }
              ]
            },
            {
              "id": "8a9dd9fd-14f0-429f-839a-201a2933f7ac",
              "name": "Welcome Endpoint",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "version",
                    "welcome"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ea2d7b31-e165-4d19-bec8-b8894bfea6da",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response contains version and user info\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.version).to.not.be.empty;",
                      "});"
                    ],
                    "_lastExecutionId": "b326521c-0e52-4972-831d-981bb5df6b03"
                  }
                }
              ]
            },
            {
              "id": "ddd03e51-6314-4c61-84e4-ef79cb0a16a1",
              "name": "Health Check",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "health"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f8f6cc14-3295-4dc5-97a7-935e627a7bb2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Health check returns OK\", function () {",
                      "    pm.expect(pm.response.text()).to.include('Health OK');",
                      "});"
                    ],
                    "_lastExecutionId": "3ab1754b-02b7-4567-9089-cc4911423542"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "8074eabd-e5b2-49cc-92bb-3228ae13bcb7",
          "length": 34,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "5153aebb-1ccc-4762-8270-dacef80b672c",
          "scriptId": "ae073ae7-b0f5-41f8-be24-d7128bb48645",
          "execution": "99e5af01-5cb4-4042-929f-c7ce3eb087dd"
        }
      },
      {
        "error": {
          "errno": -61,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3001,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:3001",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:3001\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1637:16)",
          "checksum": "f958207822d918da82c40a9f858a19c2",
          "id": "25c04055-3423-46e5-b599-63a0de9a6694",
          "timestamp": 1758627604408,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1637,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "8a9dd9fd-14f0-429f-839a-201a2933f7ac",
          "name": "Welcome Endpoint",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3001",
              "path": [
                "v1",
                "version",
                "welcome"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "6c90f570-f7cc-49f8-8517-37550e511bea",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:3001",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ea2d7b31-e165-4d19-bec8-b8894bfea6da",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Response contains version and user info\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.version).to.not.be.empty;",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "77859a12-4403-4cff-ad9a-57c2f95d032d",
          "length": 34,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "f1639146-297c-4f9d-8591-34a7d8299bca"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:3)",
          "checksum": "470ce06f8bb94c3fa9bc0a37723a5549",
          "id": "b40604fb-a13e-4640-9685-551e44680a02",
          "timestamp": 1758627604411,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 3,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "8a9dd9fd-14f0-429f-839a-201a2933f7ac",
          "name": "Welcome Endpoint",
          "request": {
            "url": {
              "path": [
                "v1",
                "version",
                "welcome"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ea2d7b31-e165-4d19-bec8-b8894bfea6da",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Response contains version and user info\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.version).to.not.be.empty;",
                  "});"
                ],
                "_lastExecutionId": "b326521c-0e52-4972-831d-981bb5df6b03"
              }
            }
          ]
        },
        "parent": {
          "id": "296174c1-24eb-4c43-8df8-f835b58ccfd6",
          "name": "Version & Health",
          "item": [
            {
              "id": "d2be0656-03c4-46c1-947f-cb8384044820",
              "name": "Version Info",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "version"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ae073ae7-b0f5-41f8-be24-d7128bb48645",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response time is fast\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      "pm.test(\"Response contains valid version format\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.version).to.not.be.empty;",
                      "    pm.expect(jsonData.version).to.match(/^\\d+\\.\\d+/);",
                      "});"
                    ],
                    "_lastExecutionId": "99e5af01-5cb4-4042-929f-c7ce3eb087dd"
                  }
                }
              ]
            },
            {
              "id": "8a9dd9fd-14f0-429f-839a-201a2933f7ac",
              "name": "Welcome Endpoint",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "version",
                    "welcome"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ea2d7b31-e165-4d19-bec8-b8894bfea6da",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response contains version and user info\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.version).to.not.be.empty;",
                      "});"
                    ],
                    "_lastExecutionId": "b326521c-0e52-4972-831d-981bb5df6b03"
                  }
                }
              ]
            },
            {
              "id": "ddd03e51-6314-4c61-84e4-ef79cb0a16a1",
              "name": "Health Check",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "health"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f8f6cc14-3295-4dc5-97a7-935e627a7bb2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Health check returns OK\", function () {",
                      "    pm.expect(pm.response.text()).to.include('Health OK');",
                      "});"
                    ],
                    "_lastExecutionId": "3ab1754b-02b7-4567-9089-cc4911423542"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "77859a12-4403-4cff-ad9a-57c2f95d032d",
          "length": 34,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "f1639146-297c-4f9d-8591-34a7d8299bca",
          "scriptId": "ea2d7b31-e165-4d19-bec8-b8894bfea6da",
          "execution": "b326521c-0e52-4972-831d-981bb5df6b03"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Response contains version and user info",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:3)",
          "checksum": "688276056c93bbfa7b546fa5f4a3c479",
          "id": "7b34db4e-ea82-4a58-9772-1a3e176afd8f",
          "timestamp": 1758627604412,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 3,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "8a9dd9fd-14f0-429f-839a-201a2933f7ac",
          "name": "Welcome Endpoint",
          "request": {
            "url": {
              "path": [
                "v1",
                "version",
                "welcome"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ea2d7b31-e165-4d19-bec8-b8894bfea6da",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Response contains version and user info\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.version).to.not.be.empty;",
                  "});"
                ],
                "_lastExecutionId": "b326521c-0e52-4972-831d-981bb5df6b03"
              }
            }
          ]
        },
        "parent": {
          "id": "296174c1-24eb-4c43-8df8-f835b58ccfd6",
          "name": "Version & Health",
          "item": [
            {
              "id": "d2be0656-03c4-46c1-947f-cb8384044820",
              "name": "Version Info",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "version"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ae073ae7-b0f5-41f8-be24-d7128bb48645",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response time is fast\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      "pm.test(\"Response contains valid version format\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.version).to.not.be.empty;",
                      "    pm.expect(jsonData.version).to.match(/^\\d+\\.\\d+/);",
                      "});"
                    ],
                    "_lastExecutionId": "99e5af01-5cb4-4042-929f-c7ce3eb087dd"
                  }
                }
              ]
            },
            {
              "id": "8a9dd9fd-14f0-429f-839a-201a2933f7ac",
              "name": "Welcome Endpoint",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "version",
                    "welcome"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ea2d7b31-e165-4d19-bec8-b8894bfea6da",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response contains version and user info\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.version).to.not.be.empty;",
                      "});"
                    ],
                    "_lastExecutionId": "b326521c-0e52-4972-831d-981bb5df6b03"
                  }
                }
              ]
            },
            {
              "id": "ddd03e51-6314-4c61-84e4-ef79cb0a16a1",
              "name": "Health Check",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "health"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f8f6cc14-3295-4dc5-97a7-935e627a7bb2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Health check returns OK\", function () {",
                      "    pm.expect(pm.response.text()).to.include('Health OK');",
                      "});"
                    ],
                    "_lastExecutionId": "3ab1754b-02b7-4567-9089-cc4911423542"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "77859a12-4403-4cff-ad9a-57c2f95d032d",
          "length": 34,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "f1639146-297c-4f9d-8591-34a7d8299bca",
          "scriptId": "ea2d7b31-e165-4d19-bec8-b8894bfea6da",
          "execution": "b326521c-0e52-4972-831d-981bb5df6b03"
        }
      },
      {
        "error": {
          "errno": -61,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3001,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:3001",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:3001\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1637:16)",
          "checksum": "f958207822d918da82c40a9f858a19c2",
          "id": "f320249e-5aed-45ee-b687-efcdf22afc06",
          "timestamp": 1758627604419,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1637,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "ddd03e51-6314-4c61-84e4-ef79cb0a16a1",
          "name": "Health Check",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3001",
              "path": [
                "v1",
                "health"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "258d23c2-9b59-4777-b715-cf52ad26bf19",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:3001",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f8f6cc14-3295-4dc5-97a7-935e627a7bb2",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Health check returns OK\", function () {",
                  "    pm.expect(pm.response.text()).to.include('Health OK');",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "da201c80-a4f4-4af3-878b-d7a21b6b5831",
          "length": 34,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "ec4bbdce-c74b-4ea9-b3bc-0f2446321645"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:4)",
          "checksum": "5e78bc18623b85feb0a8ad40f56e64fc",
          "id": "81040004-2392-4150-bb5b-490aa2df35b5",
          "timestamp": 1758627604421,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 4,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "ddd03e51-6314-4c61-84e4-ef79cb0a16a1",
          "name": "Health Check",
          "request": {
            "url": {
              "path": [
                "v1",
                "health"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f8f6cc14-3295-4dc5-97a7-935e627a7bb2",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Health check returns OK\", function () {",
                  "    pm.expect(pm.response.text()).to.include('Health OK');",
                  "});"
                ],
                "_lastExecutionId": "3ab1754b-02b7-4567-9089-cc4911423542"
              }
            }
          ]
        },
        "parent": {
          "id": "296174c1-24eb-4c43-8df8-f835b58ccfd6",
          "name": "Version & Health",
          "item": [
            {
              "id": "d2be0656-03c4-46c1-947f-cb8384044820",
              "name": "Version Info",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "version"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ae073ae7-b0f5-41f8-be24-d7128bb48645",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response time is fast\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      "pm.test(\"Response contains valid version format\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.version).to.not.be.empty;",
                      "    pm.expect(jsonData.version).to.match(/^\\d+\\.\\d+/);",
                      "});"
                    ],
                    "_lastExecutionId": "99e5af01-5cb4-4042-929f-c7ce3eb087dd"
                  }
                }
              ]
            },
            {
              "id": "8a9dd9fd-14f0-429f-839a-201a2933f7ac",
              "name": "Welcome Endpoint",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "version",
                    "welcome"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ea2d7b31-e165-4d19-bec8-b8894bfea6da",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response contains version and user info\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.version).to.not.be.empty;",
                      "});"
                    ],
                    "_lastExecutionId": "b326521c-0e52-4972-831d-981bb5df6b03"
                  }
                }
              ]
            },
            {
              "id": "ddd03e51-6314-4c61-84e4-ef79cb0a16a1",
              "name": "Health Check",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "health"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f8f6cc14-3295-4dc5-97a7-935e627a7bb2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Health check returns OK\", function () {",
                      "    pm.expect(pm.response.text()).to.include('Health OK');",
                      "});"
                    ],
                    "_lastExecutionId": "3ab1754b-02b7-4567-9089-cc4911423542"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "da201c80-a4f4-4af3-878b-d7a21b6b5831",
          "length": 34,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "ec4bbdce-c74b-4ea9-b3bc-0f2446321645",
          "scriptId": "f8f6cc14-3295-4dc5-97a7-935e627a7bb2",
          "execution": "3ab1754b-02b7-4567-9089-cc4911423542"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Health check returns OK",
          "message": "the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string",
          "stack": "AssertionError: the given combination of arguments (undefined and string) is invalid for this assertion. You can use an array, a map, an object, a set, a string, or a weakset instead of a string\n   at Object.eval sandbox-script.js:2:4)",
          "checksum": "87e8ac69c2f58eeefde342b2516b1a01",
          "id": "ba74336a-aec2-453a-98a2-f9e6ed5cf5ff",
          "timestamp": 1758627604421,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 4,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "ddd03e51-6314-4c61-84e4-ef79cb0a16a1",
          "name": "Health Check",
          "request": {
            "url": {
              "path": [
                "v1",
                "health"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "f8f6cc14-3295-4dc5-97a7-935e627a7bb2",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Health check returns OK\", function () {",
                  "    pm.expect(pm.response.text()).to.include('Health OK');",
                  "});"
                ],
                "_lastExecutionId": "3ab1754b-02b7-4567-9089-cc4911423542"
              }
            }
          ]
        },
        "parent": {
          "id": "296174c1-24eb-4c43-8df8-f835b58ccfd6",
          "name": "Version & Health",
          "item": [
            {
              "id": "d2be0656-03c4-46c1-947f-cb8384044820",
              "name": "Version Info",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "version"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ae073ae7-b0f5-41f8-be24-d7128bb48645",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response time is fast\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      "pm.test(\"Response contains valid version format\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.version).to.not.be.empty;",
                      "    pm.expect(jsonData.version).to.match(/^\\d+\\.\\d+/);",
                      "});"
                    ],
                    "_lastExecutionId": "99e5af01-5cb4-4042-929f-c7ce3eb087dd"
                  }
                }
              ]
            },
            {
              "id": "8a9dd9fd-14f0-429f-839a-201a2933f7ac",
              "name": "Welcome Endpoint",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "version",
                    "welcome"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ea2d7b31-e165-4d19-bec8-b8894bfea6da",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response contains version and user info\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData.version).to.not.be.empty;",
                      "});"
                    ],
                    "_lastExecutionId": "b326521c-0e52-4972-831d-981bb5df6b03"
                  }
                }
              ]
            },
            {
              "id": "ddd03e51-6314-4c61-84e4-ef79cb0a16a1",
              "name": "Health Check",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "health"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "f8f6cc14-3295-4dc5-97a7-935e627a7bb2",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Health check returns OK\", function () {",
                      "    pm.expect(pm.response.text()).to.include('Health OK');",
                      "});"
                    ],
                    "_lastExecutionId": "3ab1754b-02b7-4567-9089-cc4911423542"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "da201c80-a4f4-4af3-878b-d7a21b6b5831",
          "length": 34,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "ec4bbdce-c74b-4ea9-b3bc-0f2446321645",
          "scriptId": "f8f6cc14-3295-4dc5-97a7-935e627a7bb2",
          "execution": "3ab1754b-02b7-4567-9089-cc4911423542"
        }
      },
      {
        "error": {
          "errno": -61,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3001,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:3001",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:3001\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1637:16)",
          "checksum": "f958207822d918da82c40a9f858a19c2",
          "id": "397d11b5-fa9e-4320-952d-c0622f9b9037",
          "timestamp": 1758627604429,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1637,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "9be15e7b-1c5d-49a2-8a6c-453d061e41de",
          "name": "Get Metadata List",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3001",
              "path": [
                "v1",
                "metadata",
                ""
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "99bb27ac-8555-4ae0-af48-00eab3e3f123",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:3001",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2815f8f7-635e-48fb-85c4-e72a4cd405c6",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Response time is acceptable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});",
                  "pm.test(\"Response contains metadata array with valid structure\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an(\"array\");",
                  "    pm.expect(jsonData.length).to.be.greaterThan(0);",
                  "    if (jsonData.length > 0) {",
                  "        pm.expect(jsonData[0]).to.be.an(\"object\");",
                  "        pm.expect(Object.keys(jsonData[0]).length).to.be.greaterThan(0);",
                  "    }",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "c939358b-b93b-46ec-b49c-df2f07584512",
          "length": 34,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "32b0056d-b95f-492d-b103-afb7ead503b2"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:5)",
          "checksum": "069f20f87cf5d2c50296503d3aba1045",
          "id": "baa4238c-d979-4a84-8b40-0281c97254d7",
          "timestamp": 1758627604433,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 5,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "9be15e7b-1c5d-49a2-8a6c-453d061e41de",
          "name": "Get Metadata List",
          "request": {
            "url": {
              "path": [
                "v1",
                "metadata",
                ""
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2815f8f7-635e-48fb-85c4-e72a4cd405c6",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Response time is acceptable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});",
                  "pm.test(\"Response contains metadata array with valid structure\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an(\"array\");",
                  "    pm.expect(jsonData.length).to.be.greaterThan(0);",
                  "    if (jsonData.length > 0) {",
                  "        pm.expect(jsonData[0]).to.be.an(\"object\");",
                  "        pm.expect(Object.keys(jsonData[0]).length).to.be.greaterThan(0);",
                  "    }",
                  "});"
                ],
                "_lastExecutionId": "36bede28-eb02-45f8-bf3f-d0c242e6cd71"
              }
            }
          ]
        },
        "parent": {
          "id": "ad65dd3f-3640-4d73-bc99-466d11c37fd3",
          "name": "Metadata (Most Used - 96k requests)",
          "item": [
            {
              "id": "9be15e7b-1c5d-49a2-8a6c-453d061e41de",
              "name": "Get Metadata List",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    ""
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2815f8f7-635e-48fb-85c4-e72a4cd405c6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response time is acceptable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                      "});",
                      "pm.test(\"Response contains metadata array with valid structure\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an(\"array\");",
                      "    pm.expect(jsonData.length).to.be.greaterThan(0);",
                      "    if (jsonData.length > 0) {",
                      "        pm.expect(jsonData[0]).to.be.an(\"object\");",
                      "        pm.expect(Object.keys(jsonData[0]).length).to.be.greaterThan(0);",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "36bede28-eb02-45f8-bf3f-d0c242e6cd71"
                  }
                }
              ]
            },
            {
              "id": "2425e7fe-0331-4a42-afdd-1747cf41ee82",
              "name": "Get Metadata with Filters",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "type",
                      "value": "g"
                    },
                    {
                      "key": "f",
                      "value": "provinces,ruler,culture,religion,capital,province,religionGeneral"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9312b2a6-a432-4151-a45a-af1e2bab9882",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response contains filtered metadata\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.not.be.empty;",
                      "});"
                    ],
                    "_lastExecutionId": "dbebd260-6d41-467d-802d-cc1a88c85b0f"
                  }
                }
              ]
            },
            {
              "id": "0da3c9d7-8ab8-4e8f-8a22-4ec5cf656f36",
              "name": "Get Metadata with Type and End Parameters",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "type",
                      "value": "e"
                    },
                    {
                      "key": "end",
                      "value": "3000"
                    },
                    {
                      "key": "subtype",
                      "value": "ew"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2835733b-4850-4c4c-bc5c-114a7ffebc60",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "137efec3-c340-4d2f-b647-7f002a9d0254"
                  }
                }
              ]
            },
            {
              "id": "540a15b3-0066-48cf-9ab7-8a6571d8187c",
              "name": "Get Specific Metadata by ID",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "religion"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6513dc32-25f7-484f-96d3-95b99a871490",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response contains metadata object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('object');",
                      "});"
                    ],
                    "_lastExecutionId": "002002ca-3094-458c-a9df-0777869d69b6"
                  }
                }
              ]
            },
            {
              "id": "365897b7-f566-43ab-9802-495d8914a562",
              "name": "Get Linked Metadata",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "links",
                    "getLinked"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "source",
                      "value": "1:e_Falklands_War"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ebbc7c9c-6591-47f2-bf75-35ea73ceddad",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response contains map and media objects\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('map');",
                      "    pm.expect(jsonData).to.have.property('media');",
                      "});"
                    ],
                    "_lastExecutionId": "89025957-551f-4687-afc4-f5d732e4ea57"
                  }
                }
              ]
            },
            {
              "id": "4da9a310-ab75-4f60-8221-f14a2addeb4d",
              "name": "Create Metadata",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"_id\": \"test_metadata_item\",\n  \"name\": \"Test Metadata\",\n  \"type\": \"g\",\n  \"data\": {\n    \"description\": \"Test metadata item\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "faceea60-f1cf-47e1-81de-c6bf8ee09a57",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200, 201, or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 401]);",
                      "});",
                      "if (pm.response.code !== 401) {",
                      "    pm.test(\"Response contains created metadata with correct structure\", function () {",
                      "        var jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.not.be.empty;",
                      "        pm.expect(jsonData).to.be.an(\"object\");",
                      "        if (jsonData._id) {",
                      "            pm.globals.set(\"metadataId\", jsonData._id);",
                      "        }",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "6d206237-5ebb-4437-ab68-725cd1bfba26"
                  }
                }
              ]
            },
            {
              "id": "a3fc1106-762d-41ce-a296-4570ca3915e5",
              "name": "Update Metadata",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "test_metadata_item"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Updated Test Metadata\",\n  \"data\": {\n    \"description\": \"Updated test metadata item\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5cec13c3-ca3c-40a8-bdcd-231b1c59f3aa",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});",
                      "if (pm.response.code !== 401) {",
                      "    pm.test(\"Response contains updated metadata\", function () {",
                      "        var jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.not.be.empty;",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "f30a2852-9567-48f8-9045-91eed896cc18"
                  }
                }
              ]
            },
            {
              "id": "3094b267-8851-4216-99da-c5830af9591e",
              "name": "Update Single Metadata Field",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "culture",
                    "single"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\"subEntityId\": \"test_field\", \"nextBody\": [\"\", \"RGB(255,0,0)\"]}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "91d3c187-bd0f-4293-8c00-decc6c1ad3d7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});",
                      "if (pm.response.code === 200) {",
                      "    pm.test(\"Metadata single field updated successfully\", function () {",
                      "        pm.expect(pm.response.text()).to.include(\"successfully updated\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "ea74781f-17bb-4073-a81e-7d4d85ef25cc"
                  }
                }
              ]
            },
            {
              "id": "e7f1b6e1-a64b-423f-b19e-6b6efbae9df3",
              "name": "Add Metadata Link",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "culture",
                    "addLink"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\"linkedItemType1\": \"metadata\", \"linkedItemType2\": \"metadata\", \"linkedItemKey1\": \"culture\", \"linkedItemKey2\": \"religion\"}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "47af10bc-c5c1-46ed-bad3-c27e58de9732",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});",
                      "if (pm.response.code === 200) {",
                      "    pm.test(\"Metadata link added successfully\", function () {",
                      "        pm.expect(pm.response.text()).to.include(\"successfully updated\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "e8924c3a-1e3f-47fc-b88e-b4bc41cf0fb8"
                  }
                }
              ]
            },
            {
              "id": "1c834bd9-b48c-40ab-b335-c3b27c11f40a",
              "name": "Remove Metadata Link",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "culture",
                    "removeLink"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\"linkedItemType1\": \"metadata\", \"linkedItemType2\": \"metadata\", \"linkedItemKey1\": \"culture\", \"linkedItemKey2\": \"religion\"}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "92cfafca-1c13-4438-8d2d-5dc1777a5fc0",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});",
                      "if (pm.response.code === 200) {",
                      "    pm.test(\"Metadata link removed successfully\", function () {",
                      "        pm.expect(pm.response.text()).to.include(\"successfully updated\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "47ced928-c379-4558-9261-c1de9978839e"
                  }
                }
              ]
            },
            {
              "id": "16473151-4e10-4361-b850-56eb769e8375",
              "name": "Delete Metadata",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "test_metadata_item"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "31b55cb0-276c-40d7-a549-8b18d0f5f383",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});"
                    ],
                    "_lastExecutionId": "f79ad42a-755b-4290-81c3-3415440c60ec"
                  }
                }
              ]
            },
            {
              "id": "42b0e9d4-c595-4a53-931a-9d432fbbec55",
              "name": "Upvote Metadata",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "culture",
                    "upvote"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7e8d02a9-e558-48f8-a3b5-cad8afbdb5ad",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "279722b7-d397-40f9-a184-0223966fb78e"
                  }
                }
              ]
            },
            {
              "id": "0dd50556-f6cc-47db-a7c4-fbcd64137355",
              "name": "Downvote Metadata",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "culture",
                    "downvote"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e162af2e-4df5-4bf9-bbce-11360646df04",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "aaf71814-dadc-46eb-9629-80b99e69d078"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "c939358b-b93b-46ec-b49c-df2f07584512",
          "length": 34,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "32b0056d-b95f-492d-b103-afb7ead503b2",
          "scriptId": "2815f8f7-635e-48fb-85c4-e72a4cd405c6",
          "execution": "36bede28-eb02-45f8-bf3f-d0c242e6cd71"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response time is acceptable",
          "message": "expected undefined to be a number or a date",
          "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:2:5)",
          "checksum": "2a964e3770e2367eb159d0e58dcd61c1",
          "id": "f6a297ae-2e2f-400d-a4ee-dbc2f95af1ea",
          "timestamp": 1758627604433,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 5,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "9be15e7b-1c5d-49a2-8a6c-453d061e41de",
          "name": "Get Metadata List",
          "request": {
            "url": {
              "path": [
                "v1",
                "metadata",
                ""
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2815f8f7-635e-48fb-85c4-e72a4cd405c6",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Response time is acceptable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});",
                  "pm.test(\"Response contains metadata array with valid structure\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an(\"array\");",
                  "    pm.expect(jsonData.length).to.be.greaterThan(0);",
                  "    if (jsonData.length > 0) {",
                  "        pm.expect(jsonData[0]).to.be.an(\"object\");",
                  "        pm.expect(Object.keys(jsonData[0]).length).to.be.greaterThan(0);",
                  "    }",
                  "});"
                ],
                "_lastExecutionId": "36bede28-eb02-45f8-bf3f-d0c242e6cd71"
              }
            }
          ]
        },
        "parent": {
          "id": "ad65dd3f-3640-4d73-bc99-466d11c37fd3",
          "name": "Metadata (Most Used - 96k requests)",
          "item": [
            {
              "id": "9be15e7b-1c5d-49a2-8a6c-453d061e41de",
              "name": "Get Metadata List",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    ""
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2815f8f7-635e-48fb-85c4-e72a4cd405c6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response time is acceptable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                      "});",
                      "pm.test(\"Response contains metadata array with valid structure\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an(\"array\");",
                      "    pm.expect(jsonData.length).to.be.greaterThan(0);",
                      "    if (jsonData.length > 0) {",
                      "        pm.expect(jsonData[0]).to.be.an(\"object\");",
                      "        pm.expect(Object.keys(jsonData[0]).length).to.be.greaterThan(0);",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "36bede28-eb02-45f8-bf3f-d0c242e6cd71"
                  }
                }
              ]
            },
            {
              "id": "2425e7fe-0331-4a42-afdd-1747cf41ee82",
              "name": "Get Metadata with Filters",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "type",
                      "value": "g"
                    },
                    {
                      "key": "f",
                      "value": "provinces,ruler,culture,religion,capital,province,religionGeneral"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9312b2a6-a432-4151-a45a-af1e2bab9882",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response contains filtered metadata\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.not.be.empty;",
                      "});"
                    ],
                    "_lastExecutionId": "dbebd260-6d41-467d-802d-cc1a88c85b0f"
                  }
                }
              ]
            },
            {
              "id": "0da3c9d7-8ab8-4e8f-8a22-4ec5cf656f36",
              "name": "Get Metadata with Type and End Parameters",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "type",
                      "value": "e"
                    },
                    {
                      "key": "end",
                      "value": "3000"
                    },
                    {
                      "key": "subtype",
                      "value": "ew"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2835733b-4850-4c4c-bc5c-114a7ffebc60",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "137efec3-c340-4d2f-b647-7f002a9d0254"
                  }
                }
              ]
            },
            {
              "id": "540a15b3-0066-48cf-9ab7-8a6571d8187c",
              "name": "Get Specific Metadata by ID",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "religion"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6513dc32-25f7-484f-96d3-95b99a871490",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response contains metadata object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('object');",
                      "});"
                    ],
                    "_lastExecutionId": "002002ca-3094-458c-a9df-0777869d69b6"
                  }
                }
              ]
            },
            {
              "id": "365897b7-f566-43ab-9802-495d8914a562",
              "name": "Get Linked Metadata",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "links",
                    "getLinked"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "source",
                      "value": "1:e_Falklands_War"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ebbc7c9c-6591-47f2-bf75-35ea73ceddad",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response contains map and media objects\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('map');",
                      "    pm.expect(jsonData).to.have.property('media');",
                      "});"
                    ],
                    "_lastExecutionId": "89025957-551f-4687-afc4-f5d732e4ea57"
                  }
                }
              ]
            },
            {
              "id": "4da9a310-ab75-4f60-8221-f14a2addeb4d",
              "name": "Create Metadata",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"_id\": \"test_metadata_item\",\n  \"name\": \"Test Metadata\",\n  \"type\": \"g\",\n  \"data\": {\n    \"description\": \"Test metadata item\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "faceea60-f1cf-47e1-81de-c6bf8ee09a57",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200, 201, or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 401]);",
                      "});",
                      "if (pm.response.code !== 401) {",
                      "    pm.test(\"Response contains created metadata with correct structure\", function () {",
                      "        var jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.not.be.empty;",
                      "        pm.expect(jsonData).to.be.an(\"object\");",
                      "        if (jsonData._id) {",
                      "            pm.globals.set(\"metadataId\", jsonData._id);",
                      "        }",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "6d206237-5ebb-4437-ab68-725cd1bfba26"
                  }
                }
              ]
            },
            {
              "id": "a3fc1106-762d-41ce-a296-4570ca3915e5",
              "name": "Update Metadata",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "test_metadata_item"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Updated Test Metadata\",\n  \"data\": {\n    \"description\": \"Updated test metadata item\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5cec13c3-ca3c-40a8-bdcd-231b1c59f3aa",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});",
                      "if (pm.response.code !== 401) {",
                      "    pm.test(\"Response contains updated metadata\", function () {",
                      "        var jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.not.be.empty;",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "f30a2852-9567-48f8-9045-91eed896cc18"
                  }
                }
              ]
            },
            {
              "id": "3094b267-8851-4216-99da-c5830af9591e",
              "name": "Update Single Metadata Field",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "culture",
                    "single"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\"subEntityId\": \"test_field\", \"nextBody\": [\"\", \"RGB(255,0,0)\"]}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "91d3c187-bd0f-4293-8c00-decc6c1ad3d7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});",
                      "if (pm.response.code === 200) {",
                      "    pm.test(\"Metadata single field updated successfully\", function () {",
                      "        pm.expect(pm.response.text()).to.include(\"successfully updated\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "ea74781f-17bb-4073-a81e-7d4d85ef25cc"
                  }
                }
              ]
            },
            {
              "id": "e7f1b6e1-a64b-423f-b19e-6b6efbae9df3",
              "name": "Add Metadata Link",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "culture",
                    "addLink"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\"linkedItemType1\": \"metadata\", \"linkedItemType2\": \"metadata\", \"linkedItemKey1\": \"culture\", \"linkedItemKey2\": \"religion\"}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "47af10bc-c5c1-46ed-bad3-c27e58de9732",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});",
                      "if (pm.response.code === 200) {",
                      "    pm.test(\"Metadata link added successfully\", function () {",
                      "        pm.expect(pm.response.text()).to.include(\"successfully updated\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "e8924c3a-1e3f-47fc-b88e-b4bc41cf0fb8"
                  }
                }
              ]
            },
            {
              "id": "1c834bd9-b48c-40ab-b335-c3b27c11f40a",
              "name": "Remove Metadata Link",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "culture",
                    "removeLink"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\"linkedItemType1\": \"metadata\", \"linkedItemType2\": \"metadata\", \"linkedItemKey1\": \"culture\", \"linkedItemKey2\": \"religion\"}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "92cfafca-1c13-4438-8d2d-5dc1777a5fc0",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});",
                      "if (pm.response.code === 200) {",
                      "    pm.test(\"Metadata link removed successfully\", function () {",
                      "        pm.expect(pm.response.text()).to.include(\"successfully updated\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "47ced928-c379-4558-9261-c1de9978839e"
                  }
                }
              ]
            },
            {
              "id": "16473151-4e10-4361-b850-56eb769e8375",
              "name": "Delete Metadata",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "test_metadata_item"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "31b55cb0-276c-40d7-a549-8b18d0f5f383",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});"
                    ],
                    "_lastExecutionId": "f79ad42a-755b-4290-81c3-3415440c60ec"
                  }
                }
              ]
            },
            {
              "id": "42b0e9d4-c595-4a53-931a-9d432fbbec55",
              "name": "Upvote Metadata",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "culture",
                    "upvote"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7e8d02a9-e558-48f8-a3b5-cad8afbdb5ad",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "279722b7-d397-40f9-a184-0223966fb78e"
                  }
                }
              ]
            },
            {
              "id": "0dd50556-f6cc-47db-a7c4-fbcd64137355",
              "name": "Downvote Metadata",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "culture",
                    "downvote"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e162af2e-4df5-4bf9-bbce-11360646df04",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "aaf71814-dadc-46eb-9629-80b99e69d078"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "c939358b-b93b-46ec-b49c-df2f07584512",
          "length": 34,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "32b0056d-b95f-492d-b103-afb7ead503b2",
          "scriptId": "2815f8f7-635e-48fb-85c4-e72a4cd405c6",
          "execution": "36bede28-eb02-45f8-bf3f-d0c242e6cd71"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 2,
          "test": "Response contains metadata array with valid structure",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:3:5)",
          "checksum": "6b9aadb0797ed54a8165ed35adb78084",
          "id": "6d5220bf-5404-4eba-8780-d1d096990a0a",
          "timestamp": 1758627604433,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 5,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "9be15e7b-1c5d-49a2-8a6c-453d061e41de",
          "name": "Get Metadata List",
          "request": {
            "url": {
              "path": [
                "v1",
                "metadata",
                ""
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2815f8f7-635e-48fb-85c4-e72a4cd405c6",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Response time is acceptable\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                  "});",
                  "pm.test(\"Response contains metadata array with valid structure\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an(\"array\");",
                  "    pm.expect(jsonData.length).to.be.greaterThan(0);",
                  "    if (jsonData.length > 0) {",
                  "        pm.expect(jsonData[0]).to.be.an(\"object\");",
                  "        pm.expect(Object.keys(jsonData[0]).length).to.be.greaterThan(0);",
                  "    }",
                  "});"
                ],
                "_lastExecutionId": "36bede28-eb02-45f8-bf3f-d0c242e6cd71"
              }
            }
          ]
        },
        "parent": {
          "id": "ad65dd3f-3640-4d73-bc99-466d11c37fd3",
          "name": "Metadata (Most Used - 96k requests)",
          "item": [
            {
              "id": "9be15e7b-1c5d-49a2-8a6c-453d061e41de",
              "name": "Get Metadata List",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    ""
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2815f8f7-635e-48fb-85c4-e72a4cd405c6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response time is acceptable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                      "});",
                      "pm.test(\"Response contains metadata array with valid structure\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an(\"array\");",
                      "    pm.expect(jsonData.length).to.be.greaterThan(0);",
                      "    if (jsonData.length > 0) {",
                      "        pm.expect(jsonData[0]).to.be.an(\"object\");",
                      "        pm.expect(Object.keys(jsonData[0]).length).to.be.greaterThan(0);",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "36bede28-eb02-45f8-bf3f-d0c242e6cd71"
                  }
                }
              ]
            },
            {
              "id": "2425e7fe-0331-4a42-afdd-1747cf41ee82",
              "name": "Get Metadata with Filters",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "type",
                      "value": "g"
                    },
                    {
                      "key": "f",
                      "value": "provinces,ruler,culture,religion,capital,province,religionGeneral"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9312b2a6-a432-4151-a45a-af1e2bab9882",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response contains filtered metadata\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.not.be.empty;",
                      "});"
                    ],
                    "_lastExecutionId": "dbebd260-6d41-467d-802d-cc1a88c85b0f"
                  }
                }
              ]
            },
            {
              "id": "0da3c9d7-8ab8-4e8f-8a22-4ec5cf656f36",
              "name": "Get Metadata with Type and End Parameters",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "type",
                      "value": "e"
                    },
                    {
                      "key": "end",
                      "value": "3000"
                    },
                    {
                      "key": "subtype",
                      "value": "ew"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2835733b-4850-4c4c-bc5c-114a7ffebc60",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "137efec3-c340-4d2f-b647-7f002a9d0254"
                  }
                }
              ]
            },
            {
              "id": "540a15b3-0066-48cf-9ab7-8a6571d8187c",
              "name": "Get Specific Metadata by ID",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "religion"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6513dc32-25f7-484f-96d3-95b99a871490",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response contains metadata object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('object');",
                      "});"
                    ],
                    "_lastExecutionId": "002002ca-3094-458c-a9df-0777869d69b6"
                  }
                }
              ]
            },
            {
              "id": "365897b7-f566-43ab-9802-495d8914a562",
              "name": "Get Linked Metadata",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "links",
                    "getLinked"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "source",
                      "value": "1:e_Falklands_War"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ebbc7c9c-6591-47f2-bf75-35ea73ceddad",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response contains map and media objects\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('map');",
                      "    pm.expect(jsonData).to.have.property('media');",
                      "});"
                    ],
                    "_lastExecutionId": "89025957-551f-4687-afc4-f5d732e4ea57"
                  }
                }
              ]
            },
            {
              "id": "4da9a310-ab75-4f60-8221-f14a2addeb4d",
              "name": "Create Metadata",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"_id\": \"test_metadata_item\",\n  \"name\": \"Test Metadata\",\n  \"type\": \"g\",\n  \"data\": {\n    \"description\": \"Test metadata item\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "faceea60-f1cf-47e1-81de-c6bf8ee09a57",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200, 201, or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 401]);",
                      "});",
                      "if (pm.response.code !== 401) {",
                      "    pm.test(\"Response contains created metadata with correct structure\", function () {",
                      "        var jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.not.be.empty;",
                      "        pm.expect(jsonData).to.be.an(\"object\");",
                      "        if (jsonData._id) {",
                      "            pm.globals.set(\"metadataId\", jsonData._id);",
                      "        }",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "6d206237-5ebb-4437-ab68-725cd1bfba26"
                  }
                }
              ]
            },
            {
              "id": "a3fc1106-762d-41ce-a296-4570ca3915e5",
              "name": "Update Metadata",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "test_metadata_item"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Updated Test Metadata\",\n  \"data\": {\n    \"description\": \"Updated test metadata item\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5cec13c3-ca3c-40a8-bdcd-231b1c59f3aa",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});",
                      "if (pm.response.code !== 401) {",
                      "    pm.test(\"Response contains updated metadata\", function () {",
                      "        var jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.not.be.empty;",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "f30a2852-9567-48f8-9045-91eed896cc18"
                  }
                }
              ]
            },
            {
              "id": "3094b267-8851-4216-99da-c5830af9591e",
              "name": "Update Single Metadata Field",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "culture",
                    "single"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\"subEntityId\": \"test_field\", \"nextBody\": [\"\", \"RGB(255,0,0)\"]}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "91d3c187-bd0f-4293-8c00-decc6c1ad3d7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});",
                      "if (pm.response.code === 200) {",
                      "    pm.test(\"Metadata single field updated successfully\", function () {",
                      "        pm.expect(pm.response.text()).to.include(\"successfully updated\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "ea74781f-17bb-4073-a81e-7d4d85ef25cc"
                  }
                }
              ]
            },
            {
              "id": "e7f1b6e1-a64b-423f-b19e-6b6efbae9df3",
              "name": "Add Metadata Link",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "culture",
                    "addLink"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\"linkedItemType1\": \"metadata\", \"linkedItemType2\": \"metadata\", \"linkedItemKey1\": \"culture\", \"linkedItemKey2\": \"religion\"}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "47af10bc-c5c1-46ed-bad3-c27e58de9732",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});",
                      "if (pm.response.code === 200) {",
                      "    pm.test(\"Metadata link added successfully\", function () {",
                      "        pm.expect(pm.response.text()).to.include(\"successfully updated\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "e8924c3a-1e3f-47fc-b88e-b4bc41cf0fb8"
                  }
                }
              ]
            },
            {
              "id": "1c834bd9-b48c-40ab-b335-c3b27c11f40a",
              "name": "Remove Metadata Link",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "culture",
                    "removeLink"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\"linkedItemType1\": \"metadata\", \"linkedItemType2\": \"metadata\", \"linkedItemKey1\": \"culture\", \"linkedItemKey2\": \"religion\"}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "92cfafca-1c13-4438-8d2d-5dc1777a5fc0",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});",
                      "if (pm.response.code === 200) {",
                      "    pm.test(\"Metadata link removed successfully\", function () {",
                      "        pm.expect(pm.response.text()).to.include(\"successfully updated\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "47ced928-c379-4558-9261-c1de9978839e"
                  }
                }
              ]
            },
            {
              "id": "16473151-4e10-4361-b850-56eb769e8375",
              "name": "Delete Metadata",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "test_metadata_item"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "31b55cb0-276c-40d7-a549-8b18d0f5f383",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});"
                    ],
                    "_lastExecutionId": "f79ad42a-755b-4290-81c3-3415440c60ec"
                  }
                }
              ]
            },
            {
              "id": "42b0e9d4-c595-4a53-931a-9d432fbbec55",
              "name": "Upvote Metadata",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "culture",
                    "upvote"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7e8d02a9-e558-48f8-a3b5-cad8afbdb5ad",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "279722b7-d397-40f9-a184-0223966fb78e"
                  }
                }
              ]
            },
            {
              "id": "0dd50556-f6cc-47db-a7c4-fbcd64137355",
              "name": "Downvote Metadata",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "culture",
                    "downvote"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e162af2e-4df5-4bf9-bbce-11360646df04",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "aaf71814-dadc-46eb-9629-80b99e69d078"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "c939358b-b93b-46ec-b49c-df2f07584512",
          "length": 34,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "32b0056d-b95f-492d-b103-afb7ead503b2",
          "scriptId": "2815f8f7-635e-48fb-85c4-e72a4cd405c6",
          "execution": "36bede28-eb02-45f8-bf3f-d0c242e6cd71"
        }
      },
      {
        "error": {
          "errno": -61,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3001,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:3001",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:3001\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1637:16)",
          "checksum": "f958207822d918da82c40a9f858a19c2",
          "id": "e89cba9a-9520-4dcc-8b22-97241f58a281",
          "timestamp": 1758627604441,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1637,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "2425e7fe-0331-4a42-afdd-1747cf41ee82",
          "name": "Get Metadata with Filters",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3001",
              "path": [
                "v1",
                "metadata"
              ],
              "host": [
                "localhost"
              ],
              "query": [
                {
                  "key": "type",
                  "value": "g"
                },
                {
                  "key": "f",
                  "value": "provinces,ruler,culture,religion,capital,province,religionGeneral"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "74c66bf5-50d7-4ccc-8433-21627bdbe4a8",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:3001",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9312b2a6-a432-4151-a45a-af1e2bab9882",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Response contains filtered metadata\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.not.be.empty;",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "0f15e263-ddae-4183-911e-adb0fe74a66f",
          "length": 34,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "e0478c2a-0a98-4957-b383-85327fa1f609"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:6)",
          "checksum": "1a4ec3a35892ad375c572c535bbc6e63",
          "id": "279f9cc7-875a-48e0-b094-3297116fd5c6",
          "timestamp": 1758627604444,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 6,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "2425e7fe-0331-4a42-afdd-1747cf41ee82",
          "name": "Get Metadata with Filters",
          "request": {
            "url": {
              "path": [
                "v1",
                "metadata"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "type",
                  "value": "g"
                },
                {
                  "key": "f",
                  "value": "provinces,ruler,culture,religion,capital,province,religionGeneral"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9312b2a6-a432-4151-a45a-af1e2bab9882",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Response contains filtered metadata\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.not.be.empty;",
                  "});"
                ],
                "_lastExecutionId": "dbebd260-6d41-467d-802d-cc1a88c85b0f"
              }
            }
          ]
        },
        "parent": {
          "id": "ad65dd3f-3640-4d73-bc99-466d11c37fd3",
          "name": "Metadata (Most Used - 96k requests)",
          "item": [
            {
              "id": "9be15e7b-1c5d-49a2-8a6c-453d061e41de",
              "name": "Get Metadata List",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    ""
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2815f8f7-635e-48fb-85c4-e72a4cd405c6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response time is acceptable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                      "});",
                      "pm.test(\"Response contains metadata array with valid structure\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an(\"array\");",
                      "    pm.expect(jsonData.length).to.be.greaterThan(0);",
                      "    if (jsonData.length > 0) {",
                      "        pm.expect(jsonData[0]).to.be.an(\"object\");",
                      "        pm.expect(Object.keys(jsonData[0]).length).to.be.greaterThan(0);",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "36bede28-eb02-45f8-bf3f-d0c242e6cd71"
                  }
                }
              ]
            },
            {
              "id": "2425e7fe-0331-4a42-afdd-1747cf41ee82",
              "name": "Get Metadata with Filters",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "type",
                      "value": "g"
                    },
                    {
                      "key": "f",
                      "value": "provinces,ruler,culture,religion,capital,province,religionGeneral"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9312b2a6-a432-4151-a45a-af1e2bab9882",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response contains filtered metadata\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.not.be.empty;",
                      "});"
                    ],
                    "_lastExecutionId": "dbebd260-6d41-467d-802d-cc1a88c85b0f"
                  }
                }
              ]
            },
            {
              "id": "0da3c9d7-8ab8-4e8f-8a22-4ec5cf656f36",
              "name": "Get Metadata with Type and End Parameters",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "type",
                      "value": "e"
                    },
                    {
                      "key": "end",
                      "value": "3000"
                    },
                    {
                      "key": "subtype",
                      "value": "ew"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2835733b-4850-4c4c-bc5c-114a7ffebc60",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "137efec3-c340-4d2f-b647-7f002a9d0254"
                  }
                }
              ]
            },
            {
              "id": "540a15b3-0066-48cf-9ab7-8a6571d8187c",
              "name": "Get Specific Metadata by ID",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "religion"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6513dc32-25f7-484f-96d3-95b99a871490",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response contains metadata object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('object');",
                      "});"
                    ],
                    "_lastExecutionId": "002002ca-3094-458c-a9df-0777869d69b6"
                  }
                }
              ]
            },
            {
              "id": "365897b7-f566-43ab-9802-495d8914a562",
              "name": "Get Linked Metadata",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "links",
                    "getLinked"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "source",
                      "value": "1:e_Falklands_War"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ebbc7c9c-6591-47f2-bf75-35ea73ceddad",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response contains map and media objects\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('map');",
                      "    pm.expect(jsonData).to.have.property('media');",
                      "});"
                    ],
                    "_lastExecutionId": "89025957-551f-4687-afc4-f5d732e4ea57"
                  }
                }
              ]
            },
            {
              "id": "4da9a310-ab75-4f60-8221-f14a2addeb4d",
              "name": "Create Metadata",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"_id\": \"test_metadata_item\",\n  \"name\": \"Test Metadata\",\n  \"type\": \"g\",\n  \"data\": {\n    \"description\": \"Test metadata item\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "faceea60-f1cf-47e1-81de-c6bf8ee09a57",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200, 201, or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 401]);",
                      "});",
                      "if (pm.response.code !== 401) {",
                      "    pm.test(\"Response contains created metadata with correct structure\", function () {",
                      "        var jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.not.be.empty;",
                      "        pm.expect(jsonData).to.be.an(\"object\");",
                      "        if (jsonData._id) {",
                      "            pm.globals.set(\"metadataId\", jsonData._id);",
                      "        }",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "6d206237-5ebb-4437-ab68-725cd1bfba26"
                  }
                }
              ]
            },
            {
              "id": "a3fc1106-762d-41ce-a296-4570ca3915e5",
              "name": "Update Metadata",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "test_metadata_item"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Updated Test Metadata\",\n  \"data\": {\n    \"description\": \"Updated test metadata item\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5cec13c3-ca3c-40a8-bdcd-231b1c59f3aa",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});",
                      "if (pm.response.code !== 401) {",
                      "    pm.test(\"Response contains updated metadata\", function () {",
                      "        var jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.not.be.empty;",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "f30a2852-9567-48f8-9045-91eed896cc18"
                  }
                }
              ]
            },
            {
              "id": "3094b267-8851-4216-99da-c5830af9591e",
              "name": "Update Single Metadata Field",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "culture",
                    "single"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\"subEntityId\": \"test_field\", \"nextBody\": [\"\", \"RGB(255,0,0)\"]}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "91d3c187-bd0f-4293-8c00-decc6c1ad3d7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});",
                      "if (pm.response.code === 200) {",
                      "    pm.test(\"Metadata single field updated successfully\", function () {",
                      "        pm.expect(pm.response.text()).to.include(\"successfully updated\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "ea74781f-17bb-4073-a81e-7d4d85ef25cc"
                  }
                }
              ]
            },
            {
              "id": "e7f1b6e1-a64b-423f-b19e-6b6efbae9df3",
              "name": "Add Metadata Link",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "culture",
                    "addLink"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\"linkedItemType1\": \"metadata\", \"linkedItemType2\": \"metadata\", \"linkedItemKey1\": \"culture\", \"linkedItemKey2\": \"religion\"}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "47af10bc-c5c1-46ed-bad3-c27e58de9732",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});",
                      "if (pm.response.code === 200) {",
                      "    pm.test(\"Metadata link added successfully\", function () {",
                      "        pm.expect(pm.response.text()).to.include(\"successfully updated\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "e8924c3a-1e3f-47fc-b88e-b4bc41cf0fb8"
                  }
                }
              ]
            },
            {
              "id": "1c834bd9-b48c-40ab-b335-c3b27c11f40a",
              "name": "Remove Metadata Link",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "culture",
                    "removeLink"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\"linkedItemType1\": \"metadata\", \"linkedItemType2\": \"metadata\", \"linkedItemKey1\": \"culture\", \"linkedItemKey2\": \"religion\"}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "92cfafca-1c13-4438-8d2d-5dc1777a5fc0",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});",
                      "if (pm.response.code === 200) {",
                      "    pm.test(\"Metadata link removed successfully\", function () {",
                      "        pm.expect(pm.response.text()).to.include(\"successfully updated\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "47ced928-c379-4558-9261-c1de9978839e"
                  }
                }
              ]
            },
            {
              "id": "16473151-4e10-4361-b850-56eb769e8375",
              "name": "Delete Metadata",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "test_metadata_item"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "31b55cb0-276c-40d7-a549-8b18d0f5f383",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});"
                    ],
                    "_lastExecutionId": "f79ad42a-755b-4290-81c3-3415440c60ec"
                  }
                }
              ]
            },
            {
              "id": "42b0e9d4-c595-4a53-931a-9d432fbbec55",
              "name": "Upvote Metadata",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "culture",
                    "upvote"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7e8d02a9-e558-48f8-a3b5-cad8afbdb5ad",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "279722b7-d397-40f9-a184-0223966fb78e"
                  }
                }
              ]
            },
            {
              "id": "0dd50556-f6cc-47db-a7c4-fbcd64137355",
              "name": "Downvote Metadata",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "culture",
                    "downvote"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e162af2e-4df5-4bf9-bbce-11360646df04",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "aaf71814-dadc-46eb-9629-80b99e69d078"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "0f15e263-ddae-4183-911e-adb0fe74a66f",
          "length": 34,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "e0478c2a-0a98-4957-b383-85327fa1f609",
          "scriptId": "9312b2a6-a432-4151-a45a-af1e2bab9882",
          "execution": "dbebd260-6d41-467d-802d-cc1a88c85b0f"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Response contains filtered metadata",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:6)",
          "checksum": "378349c3596026428dddbb9035626c30",
          "id": "151d1896-33c2-4493-a351-129c6ce3756a",
          "timestamp": 1758627604444,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 6,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "2425e7fe-0331-4a42-afdd-1747cf41ee82",
          "name": "Get Metadata with Filters",
          "request": {
            "url": {
              "path": [
                "v1",
                "metadata"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "type",
                  "value": "g"
                },
                {
                  "key": "f",
                  "value": "provinces,ruler,culture,religion,capital,province,religionGeneral"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "9312b2a6-a432-4151-a45a-af1e2bab9882",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Response contains filtered metadata\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.not.be.empty;",
                  "});"
                ],
                "_lastExecutionId": "dbebd260-6d41-467d-802d-cc1a88c85b0f"
              }
            }
          ]
        },
        "parent": {
          "id": "ad65dd3f-3640-4d73-bc99-466d11c37fd3",
          "name": "Metadata (Most Used - 96k requests)",
          "item": [
            {
              "id": "9be15e7b-1c5d-49a2-8a6c-453d061e41de",
              "name": "Get Metadata List",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    ""
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2815f8f7-635e-48fb-85c4-e72a4cd405c6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response time is acceptable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                      "});",
                      "pm.test(\"Response contains metadata array with valid structure\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an(\"array\");",
                      "    pm.expect(jsonData.length).to.be.greaterThan(0);",
                      "    if (jsonData.length > 0) {",
                      "        pm.expect(jsonData[0]).to.be.an(\"object\");",
                      "        pm.expect(Object.keys(jsonData[0]).length).to.be.greaterThan(0);",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "36bede28-eb02-45f8-bf3f-d0c242e6cd71"
                  }
                }
              ]
            },
            {
              "id": "2425e7fe-0331-4a42-afdd-1747cf41ee82",
              "name": "Get Metadata with Filters",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "type",
                      "value": "g"
                    },
                    {
                      "key": "f",
                      "value": "provinces,ruler,culture,religion,capital,province,religionGeneral"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9312b2a6-a432-4151-a45a-af1e2bab9882",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response contains filtered metadata\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.not.be.empty;",
                      "});"
                    ],
                    "_lastExecutionId": "dbebd260-6d41-467d-802d-cc1a88c85b0f"
                  }
                }
              ]
            },
            {
              "id": "0da3c9d7-8ab8-4e8f-8a22-4ec5cf656f36",
              "name": "Get Metadata with Type and End Parameters",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "type",
                      "value": "e"
                    },
                    {
                      "key": "end",
                      "value": "3000"
                    },
                    {
                      "key": "subtype",
                      "value": "ew"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2835733b-4850-4c4c-bc5c-114a7ffebc60",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "137efec3-c340-4d2f-b647-7f002a9d0254"
                  }
                }
              ]
            },
            {
              "id": "540a15b3-0066-48cf-9ab7-8a6571d8187c",
              "name": "Get Specific Metadata by ID",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "religion"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6513dc32-25f7-484f-96d3-95b99a871490",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response contains metadata object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('object');",
                      "});"
                    ],
                    "_lastExecutionId": "002002ca-3094-458c-a9df-0777869d69b6"
                  }
                }
              ]
            },
            {
              "id": "365897b7-f566-43ab-9802-495d8914a562",
              "name": "Get Linked Metadata",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "links",
                    "getLinked"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "source",
                      "value": "1:e_Falklands_War"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ebbc7c9c-6591-47f2-bf75-35ea73ceddad",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response contains map and media objects\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('map');",
                      "    pm.expect(jsonData).to.have.property('media');",
                      "});"
                    ],
                    "_lastExecutionId": "89025957-551f-4687-afc4-f5d732e4ea57"
                  }
                }
              ]
            },
            {
              "id": "4da9a310-ab75-4f60-8221-f14a2addeb4d",
              "name": "Create Metadata",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"_id\": \"test_metadata_item\",\n  \"name\": \"Test Metadata\",\n  \"type\": \"g\",\n  \"data\": {\n    \"description\": \"Test metadata item\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "faceea60-f1cf-47e1-81de-c6bf8ee09a57",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200, 201, or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 401]);",
                      "});",
                      "if (pm.response.code !== 401) {",
                      "    pm.test(\"Response contains created metadata with correct structure\", function () {",
                      "        var jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.not.be.empty;",
                      "        pm.expect(jsonData).to.be.an(\"object\");",
                      "        if (jsonData._id) {",
                      "            pm.globals.set(\"metadataId\", jsonData._id);",
                      "        }",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "6d206237-5ebb-4437-ab68-725cd1bfba26"
                  }
                }
              ]
            },
            {
              "id": "a3fc1106-762d-41ce-a296-4570ca3915e5",
              "name": "Update Metadata",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "test_metadata_item"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Updated Test Metadata\",\n  \"data\": {\n    \"description\": \"Updated test metadata item\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5cec13c3-ca3c-40a8-bdcd-231b1c59f3aa",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});",
                      "if (pm.response.code !== 401) {",
                      "    pm.test(\"Response contains updated metadata\", function () {",
                      "        var jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.not.be.empty;",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "f30a2852-9567-48f8-9045-91eed896cc18"
                  }
                }
              ]
            },
            {
              "id": "3094b267-8851-4216-99da-c5830af9591e",
              "name": "Update Single Metadata Field",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "culture",
                    "single"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\"subEntityId\": \"test_field\", \"nextBody\": [\"\", \"RGB(255,0,0)\"]}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "91d3c187-bd0f-4293-8c00-decc6c1ad3d7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});",
                      "if (pm.response.code === 200) {",
                      "    pm.test(\"Metadata single field updated successfully\", function () {",
                      "        pm.expect(pm.response.text()).to.include(\"successfully updated\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "ea74781f-17bb-4073-a81e-7d4d85ef25cc"
                  }
                }
              ]
            },
            {
              "id": "e7f1b6e1-a64b-423f-b19e-6b6efbae9df3",
              "name": "Add Metadata Link",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "culture",
                    "addLink"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\"linkedItemType1\": \"metadata\", \"linkedItemType2\": \"metadata\", \"linkedItemKey1\": \"culture\", \"linkedItemKey2\": \"religion\"}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "47af10bc-c5c1-46ed-bad3-c27e58de9732",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});",
                      "if (pm.response.code === 200) {",
                      "    pm.test(\"Metadata link added successfully\", function () {",
                      "        pm.expect(pm.response.text()).to.include(\"successfully updated\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "e8924c3a-1e3f-47fc-b88e-b4bc41cf0fb8"
                  }
                }
              ]
            },
            {
              "id": "1c834bd9-b48c-40ab-b335-c3b27c11f40a",
              "name": "Remove Metadata Link",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "culture",
                    "removeLink"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\"linkedItemType1\": \"metadata\", \"linkedItemType2\": \"metadata\", \"linkedItemKey1\": \"culture\", \"linkedItemKey2\": \"religion\"}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "92cfafca-1c13-4438-8d2d-5dc1777a5fc0",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});",
                      "if (pm.response.code === 200) {",
                      "    pm.test(\"Metadata link removed successfully\", function () {",
                      "        pm.expect(pm.response.text()).to.include(\"successfully updated\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "47ced928-c379-4558-9261-c1de9978839e"
                  }
                }
              ]
            },
            {
              "id": "16473151-4e10-4361-b850-56eb769e8375",
              "name": "Delete Metadata",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "test_metadata_item"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "31b55cb0-276c-40d7-a549-8b18d0f5f383",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});"
                    ],
                    "_lastExecutionId": "f79ad42a-755b-4290-81c3-3415440c60ec"
                  }
                }
              ]
            },
            {
              "id": "42b0e9d4-c595-4a53-931a-9d432fbbec55",
              "name": "Upvote Metadata",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "culture",
                    "upvote"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7e8d02a9-e558-48f8-a3b5-cad8afbdb5ad",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "279722b7-d397-40f9-a184-0223966fb78e"
                  }
                }
              ]
            },
            {
              "id": "0dd50556-f6cc-47db-a7c4-fbcd64137355",
              "name": "Downvote Metadata",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "culture",
                    "downvote"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e162af2e-4df5-4bf9-bbce-11360646df04",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "aaf71814-dadc-46eb-9629-80b99e69d078"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "0f15e263-ddae-4183-911e-adb0fe74a66f",
          "length": 34,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "e0478c2a-0a98-4957-b383-85327fa1f609",
          "scriptId": "9312b2a6-a432-4151-a45a-af1e2bab9882",
          "execution": "dbebd260-6d41-467d-802d-cc1a88c85b0f"
        }
      },
      {
        "error": {
          "errno": -61,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3001,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:3001",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:3001\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1637:16)",
          "checksum": "f958207822d918da82c40a9f858a19c2",
          "id": "408456e0-e891-44fa-9ec4-378620586751",
          "timestamp": 1758627604452,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1637,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "0da3c9d7-8ab8-4e8f-8a22-4ec5cf656f36",
          "name": "Get Metadata with Type and End Parameters",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3001",
              "path": [
                "v1",
                "metadata"
              ],
              "host": [
                "localhost"
              ],
              "query": [
                {
                  "key": "type",
                  "value": "e"
                },
                {
                  "key": "end",
                  "value": "3000"
                },
                {
                  "key": "subtype",
                  "value": "ew"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "fec5bb1c-11f1-41da-98cd-881652519b37",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:3001",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2835733b-4850-4c4c-bc5c-114a7ffebc60",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "77856fc5-fdf2-4e67-9585-ac4a15e89c5b",
          "length": 34,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "abc9f49c-3e21-44a0-9133-86d5fa06f787"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:7)",
          "checksum": "cceaa75a111dfd6afb1dcf3ec5edba7f",
          "id": "386f591f-c635-441b-85b8-b4e1b08b06c9",
          "timestamp": 1758627604455,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 7,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "0da3c9d7-8ab8-4e8f-8a22-4ec5cf656f36",
          "name": "Get Metadata with Type and End Parameters",
          "request": {
            "url": {
              "path": [
                "v1",
                "metadata"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "type",
                  "value": "e"
                },
                {
                  "key": "end",
                  "value": "3000"
                },
                {
                  "key": "subtype",
                  "value": "ew"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "2835733b-4850-4c4c-bc5c-114a7ffebc60",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "_lastExecutionId": "137efec3-c340-4d2f-b647-7f002a9d0254"
              }
            }
          ]
        },
        "parent": {
          "id": "ad65dd3f-3640-4d73-bc99-466d11c37fd3",
          "name": "Metadata (Most Used - 96k requests)",
          "item": [
            {
              "id": "9be15e7b-1c5d-49a2-8a6c-453d061e41de",
              "name": "Get Metadata List",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    ""
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2815f8f7-635e-48fb-85c4-e72a4cd405c6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response time is acceptable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                      "});",
                      "pm.test(\"Response contains metadata array with valid structure\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an(\"array\");",
                      "    pm.expect(jsonData.length).to.be.greaterThan(0);",
                      "    if (jsonData.length > 0) {",
                      "        pm.expect(jsonData[0]).to.be.an(\"object\");",
                      "        pm.expect(Object.keys(jsonData[0]).length).to.be.greaterThan(0);",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "36bede28-eb02-45f8-bf3f-d0c242e6cd71"
                  }
                }
              ]
            },
            {
              "id": "2425e7fe-0331-4a42-afdd-1747cf41ee82",
              "name": "Get Metadata with Filters",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "type",
                      "value": "g"
                    },
                    {
                      "key": "f",
                      "value": "provinces,ruler,culture,religion,capital,province,religionGeneral"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9312b2a6-a432-4151-a45a-af1e2bab9882",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response contains filtered metadata\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.not.be.empty;",
                      "});"
                    ],
                    "_lastExecutionId": "dbebd260-6d41-467d-802d-cc1a88c85b0f"
                  }
                }
              ]
            },
            {
              "id": "0da3c9d7-8ab8-4e8f-8a22-4ec5cf656f36",
              "name": "Get Metadata with Type and End Parameters",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "type",
                      "value": "e"
                    },
                    {
                      "key": "end",
                      "value": "3000"
                    },
                    {
                      "key": "subtype",
                      "value": "ew"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2835733b-4850-4c4c-bc5c-114a7ffebc60",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "137efec3-c340-4d2f-b647-7f002a9d0254"
                  }
                }
              ]
            },
            {
              "id": "540a15b3-0066-48cf-9ab7-8a6571d8187c",
              "name": "Get Specific Metadata by ID",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "religion"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6513dc32-25f7-484f-96d3-95b99a871490",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response contains metadata object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('object');",
                      "});"
                    ],
                    "_lastExecutionId": "002002ca-3094-458c-a9df-0777869d69b6"
                  }
                }
              ]
            },
            {
              "id": "365897b7-f566-43ab-9802-495d8914a562",
              "name": "Get Linked Metadata",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "links",
                    "getLinked"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "source",
                      "value": "1:e_Falklands_War"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ebbc7c9c-6591-47f2-bf75-35ea73ceddad",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response contains map and media objects\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('map');",
                      "    pm.expect(jsonData).to.have.property('media');",
                      "});"
                    ],
                    "_lastExecutionId": "89025957-551f-4687-afc4-f5d732e4ea57"
                  }
                }
              ]
            },
            {
              "id": "4da9a310-ab75-4f60-8221-f14a2addeb4d",
              "name": "Create Metadata",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"_id\": \"test_metadata_item\",\n  \"name\": \"Test Metadata\",\n  \"type\": \"g\",\n  \"data\": {\n    \"description\": \"Test metadata item\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "faceea60-f1cf-47e1-81de-c6bf8ee09a57",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200, 201, or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 401]);",
                      "});",
                      "if (pm.response.code !== 401) {",
                      "    pm.test(\"Response contains created metadata with correct structure\", function () {",
                      "        var jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.not.be.empty;",
                      "        pm.expect(jsonData).to.be.an(\"object\");",
                      "        if (jsonData._id) {",
                      "            pm.globals.set(\"metadataId\", jsonData._id);",
                      "        }",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "6d206237-5ebb-4437-ab68-725cd1bfba26"
                  }
                }
              ]
            },
            {
              "id": "a3fc1106-762d-41ce-a296-4570ca3915e5",
              "name": "Update Metadata",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "test_metadata_item"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Updated Test Metadata\",\n  \"data\": {\n    \"description\": \"Updated test metadata item\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5cec13c3-ca3c-40a8-bdcd-231b1c59f3aa",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});",
                      "if (pm.response.code !== 401) {",
                      "    pm.test(\"Response contains updated metadata\", function () {",
                      "        var jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.not.be.empty;",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "f30a2852-9567-48f8-9045-91eed896cc18"
                  }
                }
              ]
            },
            {
              "id": "3094b267-8851-4216-99da-c5830af9591e",
              "name": "Update Single Metadata Field",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "culture",
                    "single"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\"subEntityId\": \"test_field\", \"nextBody\": [\"\", \"RGB(255,0,0)\"]}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "91d3c187-bd0f-4293-8c00-decc6c1ad3d7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});",
                      "if (pm.response.code === 200) {",
                      "    pm.test(\"Metadata single field updated successfully\", function () {",
                      "        pm.expect(pm.response.text()).to.include(\"successfully updated\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "ea74781f-17bb-4073-a81e-7d4d85ef25cc"
                  }
                }
              ]
            },
            {
              "id": "e7f1b6e1-a64b-423f-b19e-6b6efbae9df3",
              "name": "Add Metadata Link",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "culture",
                    "addLink"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\"linkedItemType1\": \"metadata\", \"linkedItemType2\": \"metadata\", \"linkedItemKey1\": \"culture\", \"linkedItemKey2\": \"religion\"}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "47af10bc-c5c1-46ed-bad3-c27e58de9732",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});",
                      "if (pm.response.code === 200) {",
                      "    pm.test(\"Metadata link added successfully\", function () {",
                      "        pm.expect(pm.response.text()).to.include(\"successfully updated\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "e8924c3a-1e3f-47fc-b88e-b4bc41cf0fb8"
                  }
                }
              ]
            },
            {
              "id": "1c834bd9-b48c-40ab-b335-c3b27c11f40a",
              "name": "Remove Metadata Link",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "culture",
                    "removeLink"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\"linkedItemType1\": \"metadata\", \"linkedItemType2\": \"metadata\", \"linkedItemKey1\": \"culture\", \"linkedItemKey2\": \"religion\"}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "92cfafca-1c13-4438-8d2d-5dc1777a5fc0",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});",
                      "if (pm.response.code === 200) {",
                      "    pm.test(\"Metadata link removed successfully\", function () {",
                      "        pm.expect(pm.response.text()).to.include(\"successfully updated\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "47ced928-c379-4558-9261-c1de9978839e"
                  }
                }
              ]
            },
            {
              "id": "16473151-4e10-4361-b850-56eb769e8375",
              "name": "Delete Metadata",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "test_metadata_item"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "31b55cb0-276c-40d7-a549-8b18d0f5f383",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});"
                    ],
                    "_lastExecutionId": "f79ad42a-755b-4290-81c3-3415440c60ec"
                  }
                }
              ]
            },
            {
              "id": "42b0e9d4-c595-4a53-931a-9d432fbbec55",
              "name": "Upvote Metadata",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "culture",
                    "upvote"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7e8d02a9-e558-48f8-a3b5-cad8afbdb5ad",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "279722b7-d397-40f9-a184-0223966fb78e"
                  }
                }
              ]
            },
            {
              "id": "0dd50556-f6cc-47db-a7c4-fbcd64137355",
              "name": "Downvote Metadata",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "culture",
                    "downvote"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e162af2e-4df5-4bf9-bbce-11360646df04",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "aaf71814-dadc-46eb-9629-80b99e69d078"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "77856fc5-fdf2-4e67-9585-ac4a15e89c5b",
          "length": 34,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "abc9f49c-3e21-44a0-9133-86d5fa06f787",
          "scriptId": "2835733b-4850-4c4c-bc5c-114a7ffebc60",
          "execution": "137efec3-c340-4d2f-b647-7f002a9d0254"
        }
      },
      {
        "error": {
          "errno": -61,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3001,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:3001",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:3001\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1637:16)",
          "checksum": "f958207822d918da82c40a9f858a19c2",
          "id": "b81687e9-58ad-4b7a-8a6b-bae95a55881b",
          "timestamp": 1758627604463,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1637,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "540a15b3-0066-48cf-9ab7-8a6571d8187c",
          "name": "Get Specific Metadata by ID",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3001",
              "path": [
                "v1",
                "metadata",
                "religion"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "8cf62d44-f24a-46bb-9754-5f9e4017c51e",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:3001",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6513dc32-25f7-484f-96d3-95b99a871490",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Response contains metadata object\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('object');",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "c4cf7ccb-4976-4355-b874-da78df494c68",
          "length": 34,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "6d5ae025-c46b-44e7-919f-80f786b72064"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:8)",
          "checksum": "685d167932608e4ac32feacd43beb324",
          "id": "abe50f64-4372-4b8e-8d5c-60ce58caa9d9",
          "timestamp": 1758627604466,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 8,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "540a15b3-0066-48cf-9ab7-8a6571d8187c",
          "name": "Get Specific Metadata by ID",
          "request": {
            "url": {
              "path": [
                "v1",
                "metadata",
                "religion"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6513dc32-25f7-484f-96d3-95b99a871490",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Response contains metadata object\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('object');",
                  "});"
                ],
                "_lastExecutionId": "002002ca-3094-458c-a9df-0777869d69b6"
              }
            }
          ]
        },
        "parent": {
          "id": "ad65dd3f-3640-4d73-bc99-466d11c37fd3",
          "name": "Metadata (Most Used - 96k requests)",
          "item": [
            {
              "id": "9be15e7b-1c5d-49a2-8a6c-453d061e41de",
              "name": "Get Metadata List",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    ""
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2815f8f7-635e-48fb-85c4-e72a4cd405c6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response time is acceptable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                      "});",
                      "pm.test(\"Response contains metadata array with valid structure\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an(\"array\");",
                      "    pm.expect(jsonData.length).to.be.greaterThan(0);",
                      "    if (jsonData.length > 0) {",
                      "        pm.expect(jsonData[0]).to.be.an(\"object\");",
                      "        pm.expect(Object.keys(jsonData[0]).length).to.be.greaterThan(0);",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "36bede28-eb02-45f8-bf3f-d0c242e6cd71"
                  }
                }
              ]
            },
            {
              "id": "2425e7fe-0331-4a42-afdd-1747cf41ee82",
              "name": "Get Metadata with Filters",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "type",
                      "value": "g"
                    },
                    {
                      "key": "f",
                      "value": "provinces,ruler,culture,religion,capital,province,religionGeneral"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9312b2a6-a432-4151-a45a-af1e2bab9882",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response contains filtered metadata\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.not.be.empty;",
                      "});"
                    ],
                    "_lastExecutionId": "dbebd260-6d41-467d-802d-cc1a88c85b0f"
                  }
                }
              ]
            },
            {
              "id": "0da3c9d7-8ab8-4e8f-8a22-4ec5cf656f36",
              "name": "Get Metadata with Type and End Parameters",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "type",
                      "value": "e"
                    },
                    {
                      "key": "end",
                      "value": "3000"
                    },
                    {
                      "key": "subtype",
                      "value": "ew"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2835733b-4850-4c4c-bc5c-114a7ffebc60",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "137efec3-c340-4d2f-b647-7f002a9d0254"
                  }
                }
              ]
            },
            {
              "id": "540a15b3-0066-48cf-9ab7-8a6571d8187c",
              "name": "Get Specific Metadata by ID",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "religion"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6513dc32-25f7-484f-96d3-95b99a871490",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response contains metadata object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('object');",
                      "});"
                    ],
                    "_lastExecutionId": "002002ca-3094-458c-a9df-0777869d69b6"
                  }
                }
              ]
            },
            {
              "id": "365897b7-f566-43ab-9802-495d8914a562",
              "name": "Get Linked Metadata",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "links",
                    "getLinked"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "source",
                      "value": "1:e_Falklands_War"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ebbc7c9c-6591-47f2-bf75-35ea73ceddad",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response contains map and media objects\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('map');",
                      "    pm.expect(jsonData).to.have.property('media');",
                      "});"
                    ],
                    "_lastExecutionId": "89025957-551f-4687-afc4-f5d732e4ea57"
                  }
                }
              ]
            },
            {
              "id": "4da9a310-ab75-4f60-8221-f14a2addeb4d",
              "name": "Create Metadata",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"_id\": \"test_metadata_item\",\n  \"name\": \"Test Metadata\",\n  \"type\": \"g\",\n  \"data\": {\n    \"description\": \"Test metadata item\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "faceea60-f1cf-47e1-81de-c6bf8ee09a57",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200, 201, or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 401]);",
                      "});",
                      "if (pm.response.code !== 401) {",
                      "    pm.test(\"Response contains created metadata with correct structure\", function () {",
                      "        var jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.not.be.empty;",
                      "        pm.expect(jsonData).to.be.an(\"object\");",
                      "        if (jsonData._id) {",
                      "            pm.globals.set(\"metadataId\", jsonData._id);",
                      "        }",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "6d206237-5ebb-4437-ab68-725cd1bfba26"
                  }
                }
              ]
            },
            {
              "id": "a3fc1106-762d-41ce-a296-4570ca3915e5",
              "name": "Update Metadata",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "test_metadata_item"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Updated Test Metadata\",\n  \"data\": {\n    \"description\": \"Updated test metadata item\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5cec13c3-ca3c-40a8-bdcd-231b1c59f3aa",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});",
                      "if (pm.response.code !== 401) {",
                      "    pm.test(\"Response contains updated metadata\", function () {",
                      "        var jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.not.be.empty;",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "f30a2852-9567-48f8-9045-91eed896cc18"
                  }
                }
              ]
            },
            {
              "id": "3094b267-8851-4216-99da-c5830af9591e",
              "name": "Update Single Metadata Field",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "culture",
                    "single"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\"subEntityId\": \"test_field\", \"nextBody\": [\"\", \"RGB(255,0,0)\"]}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "91d3c187-bd0f-4293-8c00-decc6c1ad3d7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});",
                      "if (pm.response.code === 200) {",
                      "    pm.test(\"Metadata single field updated successfully\", function () {",
                      "        pm.expect(pm.response.text()).to.include(\"successfully updated\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "ea74781f-17bb-4073-a81e-7d4d85ef25cc"
                  }
                }
              ]
            },
            {
              "id": "e7f1b6e1-a64b-423f-b19e-6b6efbae9df3",
              "name": "Add Metadata Link",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "culture",
                    "addLink"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\"linkedItemType1\": \"metadata\", \"linkedItemType2\": \"metadata\", \"linkedItemKey1\": \"culture\", \"linkedItemKey2\": \"religion\"}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "47af10bc-c5c1-46ed-bad3-c27e58de9732",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});",
                      "if (pm.response.code === 200) {",
                      "    pm.test(\"Metadata link added successfully\", function () {",
                      "        pm.expect(pm.response.text()).to.include(\"successfully updated\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "e8924c3a-1e3f-47fc-b88e-b4bc41cf0fb8"
                  }
                }
              ]
            },
            {
              "id": "1c834bd9-b48c-40ab-b335-c3b27c11f40a",
              "name": "Remove Metadata Link",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "culture",
                    "removeLink"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\"linkedItemType1\": \"metadata\", \"linkedItemType2\": \"metadata\", \"linkedItemKey1\": \"culture\", \"linkedItemKey2\": \"religion\"}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "92cfafca-1c13-4438-8d2d-5dc1777a5fc0",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});",
                      "if (pm.response.code === 200) {",
                      "    pm.test(\"Metadata link removed successfully\", function () {",
                      "        pm.expect(pm.response.text()).to.include(\"successfully updated\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "47ced928-c379-4558-9261-c1de9978839e"
                  }
                }
              ]
            },
            {
              "id": "16473151-4e10-4361-b850-56eb769e8375",
              "name": "Delete Metadata",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "test_metadata_item"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "31b55cb0-276c-40d7-a549-8b18d0f5f383",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});"
                    ],
                    "_lastExecutionId": "f79ad42a-755b-4290-81c3-3415440c60ec"
                  }
                }
              ]
            },
            {
              "id": "42b0e9d4-c595-4a53-931a-9d432fbbec55",
              "name": "Upvote Metadata",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "culture",
                    "upvote"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7e8d02a9-e558-48f8-a3b5-cad8afbdb5ad",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "279722b7-d397-40f9-a184-0223966fb78e"
                  }
                }
              ]
            },
            {
              "id": "0dd50556-f6cc-47db-a7c4-fbcd64137355",
              "name": "Downvote Metadata",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "culture",
                    "downvote"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e162af2e-4df5-4bf9-bbce-11360646df04",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "aaf71814-dadc-46eb-9629-80b99e69d078"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "c4cf7ccb-4976-4355-b874-da78df494c68",
          "length": 34,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "6d5ae025-c46b-44e7-919f-80f786b72064",
          "scriptId": "6513dc32-25f7-484f-96d3-95b99a871490",
          "execution": "002002ca-3094-458c-a9df-0777869d69b6"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Response contains metadata object",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:8)",
          "checksum": "f94ee0e5b65585152b9efd5303f1dcdd",
          "id": "e54203ed-724a-4780-932e-475999a4daf9",
          "timestamp": 1758627604466,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 8,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "540a15b3-0066-48cf-9ab7-8a6571d8187c",
          "name": "Get Specific Metadata by ID",
          "request": {
            "url": {
              "path": [
                "v1",
                "metadata",
                "religion"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6513dc32-25f7-484f-96d3-95b99a871490",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Response contains metadata object\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('object');",
                  "});"
                ],
                "_lastExecutionId": "002002ca-3094-458c-a9df-0777869d69b6"
              }
            }
          ]
        },
        "parent": {
          "id": "ad65dd3f-3640-4d73-bc99-466d11c37fd3",
          "name": "Metadata (Most Used - 96k requests)",
          "item": [
            {
              "id": "9be15e7b-1c5d-49a2-8a6c-453d061e41de",
              "name": "Get Metadata List",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    ""
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2815f8f7-635e-48fb-85c4-e72a4cd405c6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response time is acceptable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                      "});",
                      "pm.test(\"Response contains metadata array with valid structure\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an(\"array\");",
                      "    pm.expect(jsonData.length).to.be.greaterThan(0);",
                      "    if (jsonData.length > 0) {",
                      "        pm.expect(jsonData[0]).to.be.an(\"object\");",
                      "        pm.expect(Object.keys(jsonData[0]).length).to.be.greaterThan(0);",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "36bede28-eb02-45f8-bf3f-d0c242e6cd71"
                  }
                }
              ]
            },
            {
              "id": "2425e7fe-0331-4a42-afdd-1747cf41ee82",
              "name": "Get Metadata with Filters",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "type",
                      "value": "g"
                    },
                    {
                      "key": "f",
                      "value": "provinces,ruler,culture,religion,capital,province,religionGeneral"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9312b2a6-a432-4151-a45a-af1e2bab9882",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response contains filtered metadata\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.not.be.empty;",
                      "});"
                    ],
                    "_lastExecutionId": "dbebd260-6d41-467d-802d-cc1a88c85b0f"
                  }
                }
              ]
            },
            {
              "id": "0da3c9d7-8ab8-4e8f-8a22-4ec5cf656f36",
              "name": "Get Metadata with Type and End Parameters",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "type",
                      "value": "e"
                    },
                    {
                      "key": "end",
                      "value": "3000"
                    },
                    {
                      "key": "subtype",
                      "value": "ew"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2835733b-4850-4c4c-bc5c-114a7ffebc60",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "137efec3-c340-4d2f-b647-7f002a9d0254"
                  }
                }
              ]
            },
            {
              "id": "540a15b3-0066-48cf-9ab7-8a6571d8187c",
              "name": "Get Specific Metadata by ID",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "religion"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6513dc32-25f7-484f-96d3-95b99a871490",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response contains metadata object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('object');",
                      "});"
                    ],
                    "_lastExecutionId": "002002ca-3094-458c-a9df-0777869d69b6"
                  }
                }
              ]
            },
            {
              "id": "365897b7-f566-43ab-9802-495d8914a562",
              "name": "Get Linked Metadata",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "links",
                    "getLinked"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "source",
                      "value": "1:e_Falklands_War"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ebbc7c9c-6591-47f2-bf75-35ea73ceddad",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response contains map and media objects\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('map');",
                      "    pm.expect(jsonData).to.have.property('media');",
                      "});"
                    ],
                    "_lastExecutionId": "89025957-551f-4687-afc4-f5d732e4ea57"
                  }
                }
              ]
            },
            {
              "id": "4da9a310-ab75-4f60-8221-f14a2addeb4d",
              "name": "Create Metadata",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"_id\": \"test_metadata_item\",\n  \"name\": \"Test Metadata\",\n  \"type\": \"g\",\n  \"data\": {\n    \"description\": \"Test metadata item\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "faceea60-f1cf-47e1-81de-c6bf8ee09a57",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200, 201, or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 401]);",
                      "});",
                      "if (pm.response.code !== 401) {",
                      "    pm.test(\"Response contains created metadata with correct structure\", function () {",
                      "        var jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.not.be.empty;",
                      "        pm.expect(jsonData).to.be.an(\"object\");",
                      "        if (jsonData._id) {",
                      "            pm.globals.set(\"metadataId\", jsonData._id);",
                      "        }",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "6d206237-5ebb-4437-ab68-725cd1bfba26"
                  }
                }
              ]
            },
            {
              "id": "a3fc1106-762d-41ce-a296-4570ca3915e5",
              "name": "Update Metadata",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "test_metadata_item"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Updated Test Metadata\",\n  \"data\": {\n    \"description\": \"Updated test metadata item\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5cec13c3-ca3c-40a8-bdcd-231b1c59f3aa",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});",
                      "if (pm.response.code !== 401) {",
                      "    pm.test(\"Response contains updated metadata\", function () {",
                      "        var jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.not.be.empty;",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "f30a2852-9567-48f8-9045-91eed896cc18"
                  }
                }
              ]
            },
            {
              "id": "3094b267-8851-4216-99da-c5830af9591e",
              "name": "Update Single Metadata Field",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "culture",
                    "single"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\"subEntityId\": \"test_field\", \"nextBody\": [\"\", \"RGB(255,0,0)\"]}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "91d3c187-bd0f-4293-8c00-decc6c1ad3d7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});",
                      "if (pm.response.code === 200) {",
                      "    pm.test(\"Metadata single field updated successfully\", function () {",
                      "        pm.expect(pm.response.text()).to.include(\"successfully updated\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "ea74781f-17bb-4073-a81e-7d4d85ef25cc"
                  }
                }
              ]
            },
            {
              "id": "e7f1b6e1-a64b-423f-b19e-6b6efbae9df3",
              "name": "Add Metadata Link",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "culture",
                    "addLink"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\"linkedItemType1\": \"metadata\", \"linkedItemType2\": \"metadata\", \"linkedItemKey1\": \"culture\", \"linkedItemKey2\": \"religion\"}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "47af10bc-c5c1-46ed-bad3-c27e58de9732",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});",
                      "if (pm.response.code === 200) {",
                      "    pm.test(\"Metadata link added successfully\", function () {",
                      "        pm.expect(pm.response.text()).to.include(\"successfully updated\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "e8924c3a-1e3f-47fc-b88e-b4bc41cf0fb8"
                  }
                }
              ]
            },
            {
              "id": "1c834bd9-b48c-40ab-b335-c3b27c11f40a",
              "name": "Remove Metadata Link",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "culture",
                    "removeLink"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\"linkedItemType1\": \"metadata\", \"linkedItemType2\": \"metadata\", \"linkedItemKey1\": \"culture\", \"linkedItemKey2\": \"religion\"}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "92cfafca-1c13-4438-8d2d-5dc1777a5fc0",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});",
                      "if (pm.response.code === 200) {",
                      "    pm.test(\"Metadata link removed successfully\", function () {",
                      "        pm.expect(pm.response.text()).to.include(\"successfully updated\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "47ced928-c379-4558-9261-c1de9978839e"
                  }
                }
              ]
            },
            {
              "id": "16473151-4e10-4361-b850-56eb769e8375",
              "name": "Delete Metadata",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "test_metadata_item"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "31b55cb0-276c-40d7-a549-8b18d0f5f383",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});"
                    ],
                    "_lastExecutionId": "f79ad42a-755b-4290-81c3-3415440c60ec"
                  }
                }
              ]
            },
            {
              "id": "42b0e9d4-c595-4a53-931a-9d432fbbec55",
              "name": "Upvote Metadata",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "culture",
                    "upvote"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7e8d02a9-e558-48f8-a3b5-cad8afbdb5ad",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "279722b7-d397-40f9-a184-0223966fb78e"
                  }
                }
              ]
            },
            {
              "id": "0dd50556-f6cc-47db-a7c4-fbcd64137355",
              "name": "Downvote Metadata",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "culture",
                    "downvote"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e162af2e-4df5-4bf9-bbce-11360646df04",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "aaf71814-dadc-46eb-9629-80b99e69d078"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "c4cf7ccb-4976-4355-b874-da78df494c68",
          "length": 34,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "6d5ae025-c46b-44e7-919f-80f786b72064",
          "scriptId": "6513dc32-25f7-484f-96d3-95b99a871490",
          "execution": "002002ca-3094-458c-a9df-0777869d69b6"
        }
      },
      {
        "error": {
          "errno": -61,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3001,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:3001",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:3001\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1637:16)",
          "checksum": "f958207822d918da82c40a9f858a19c2",
          "id": "c57761be-60df-4a83-abe6-6d24da91301f",
          "timestamp": 1758627604474,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1637,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "365897b7-f566-43ab-9802-495d8914a562",
          "name": "Get Linked Metadata",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3001",
              "path": [
                "v1",
                "metadata",
                "links",
                "getLinked"
              ],
              "host": [
                "localhost"
              ],
              "query": [
                {
                  "key": "source",
                  "value": "1:e_Falklands_War"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "0ca68bd8-ffad-473f-9df6-4dd991a4abb7",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:3001",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ebbc7c9c-6591-47f2-bf75-35ea73ceddad",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Response contains map and media objects\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('map');",
                  "    pm.expect(jsonData).to.have.property('media');",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "22d5953b-e722-464c-bc55-f8c5ae760649",
          "length": 34,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "705125f3-13ba-43c3-b9e1-68ad5265af1f"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:9)",
          "checksum": "3c8b6d0f45100a696bd28f8ebac2fd43",
          "id": "9c51f7d5-7135-4212-924c-da2b1bef8b4a",
          "timestamp": 1758627604477,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 9,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "365897b7-f566-43ab-9802-495d8914a562",
          "name": "Get Linked Metadata",
          "request": {
            "url": {
              "path": [
                "v1",
                "metadata",
                "links",
                "getLinked"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "source",
                  "value": "1:e_Falklands_War"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ebbc7c9c-6591-47f2-bf75-35ea73ceddad",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Response contains map and media objects\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('map');",
                  "    pm.expect(jsonData).to.have.property('media');",
                  "});"
                ],
                "_lastExecutionId": "89025957-551f-4687-afc4-f5d732e4ea57"
              }
            }
          ]
        },
        "parent": {
          "id": "ad65dd3f-3640-4d73-bc99-466d11c37fd3",
          "name": "Metadata (Most Used - 96k requests)",
          "item": [
            {
              "id": "9be15e7b-1c5d-49a2-8a6c-453d061e41de",
              "name": "Get Metadata List",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    ""
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2815f8f7-635e-48fb-85c4-e72a4cd405c6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response time is acceptable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                      "});",
                      "pm.test(\"Response contains metadata array with valid structure\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an(\"array\");",
                      "    pm.expect(jsonData.length).to.be.greaterThan(0);",
                      "    if (jsonData.length > 0) {",
                      "        pm.expect(jsonData[0]).to.be.an(\"object\");",
                      "        pm.expect(Object.keys(jsonData[0]).length).to.be.greaterThan(0);",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "36bede28-eb02-45f8-bf3f-d0c242e6cd71"
                  }
                }
              ]
            },
            {
              "id": "2425e7fe-0331-4a42-afdd-1747cf41ee82",
              "name": "Get Metadata with Filters",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "type",
                      "value": "g"
                    },
                    {
                      "key": "f",
                      "value": "provinces,ruler,culture,religion,capital,province,religionGeneral"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9312b2a6-a432-4151-a45a-af1e2bab9882",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response contains filtered metadata\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.not.be.empty;",
                      "});"
                    ],
                    "_lastExecutionId": "dbebd260-6d41-467d-802d-cc1a88c85b0f"
                  }
                }
              ]
            },
            {
              "id": "0da3c9d7-8ab8-4e8f-8a22-4ec5cf656f36",
              "name": "Get Metadata with Type and End Parameters",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "type",
                      "value": "e"
                    },
                    {
                      "key": "end",
                      "value": "3000"
                    },
                    {
                      "key": "subtype",
                      "value": "ew"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2835733b-4850-4c4c-bc5c-114a7ffebc60",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "137efec3-c340-4d2f-b647-7f002a9d0254"
                  }
                }
              ]
            },
            {
              "id": "540a15b3-0066-48cf-9ab7-8a6571d8187c",
              "name": "Get Specific Metadata by ID",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "religion"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6513dc32-25f7-484f-96d3-95b99a871490",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response contains metadata object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('object');",
                      "});"
                    ],
                    "_lastExecutionId": "002002ca-3094-458c-a9df-0777869d69b6"
                  }
                }
              ]
            },
            {
              "id": "365897b7-f566-43ab-9802-495d8914a562",
              "name": "Get Linked Metadata",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "links",
                    "getLinked"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "source",
                      "value": "1:e_Falklands_War"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ebbc7c9c-6591-47f2-bf75-35ea73ceddad",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response contains map and media objects\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('map');",
                      "    pm.expect(jsonData).to.have.property('media');",
                      "});"
                    ],
                    "_lastExecutionId": "89025957-551f-4687-afc4-f5d732e4ea57"
                  }
                }
              ]
            },
            {
              "id": "4da9a310-ab75-4f60-8221-f14a2addeb4d",
              "name": "Create Metadata",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"_id\": \"test_metadata_item\",\n  \"name\": \"Test Metadata\",\n  \"type\": \"g\",\n  \"data\": {\n    \"description\": \"Test metadata item\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "faceea60-f1cf-47e1-81de-c6bf8ee09a57",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200, 201, or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 401]);",
                      "});",
                      "if (pm.response.code !== 401) {",
                      "    pm.test(\"Response contains created metadata with correct structure\", function () {",
                      "        var jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.not.be.empty;",
                      "        pm.expect(jsonData).to.be.an(\"object\");",
                      "        if (jsonData._id) {",
                      "            pm.globals.set(\"metadataId\", jsonData._id);",
                      "        }",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "6d206237-5ebb-4437-ab68-725cd1bfba26"
                  }
                }
              ]
            },
            {
              "id": "a3fc1106-762d-41ce-a296-4570ca3915e5",
              "name": "Update Metadata",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "test_metadata_item"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Updated Test Metadata\",\n  \"data\": {\n    \"description\": \"Updated test metadata item\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5cec13c3-ca3c-40a8-bdcd-231b1c59f3aa",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});",
                      "if (pm.response.code !== 401) {",
                      "    pm.test(\"Response contains updated metadata\", function () {",
                      "        var jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.not.be.empty;",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "f30a2852-9567-48f8-9045-91eed896cc18"
                  }
                }
              ]
            },
            {
              "id": "3094b267-8851-4216-99da-c5830af9591e",
              "name": "Update Single Metadata Field",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "culture",
                    "single"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\"subEntityId\": \"test_field\", \"nextBody\": [\"\", \"RGB(255,0,0)\"]}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "91d3c187-bd0f-4293-8c00-decc6c1ad3d7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});",
                      "if (pm.response.code === 200) {",
                      "    pm.test(\"Metadata single field updated successfully\", function () {",
                      "        pm.expect(pm.response.text()).to.include(\"successfully updated\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "ea74781f-17bb-4073-a81e-7d4d85ef25cc"
                  }
                }
              ]
            },
            {
              "id": "e7f1b6e1-a64b-423f-b19e-6b6efbae9df3",
              "name": "Add Metadata Link",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "culture",
                    "addLink"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\"linkedItemType1\": \"metadata\", \"linkedItemType2\": \"metadata\", \"linkedItemKey1\": \"culture\", \"linkedItemKey2\": \"religion\"}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "47af10bc-c5c1-46ed-bad3-c27e58de9732",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});",
                      "if (pm.response.code === 200) {",
                      "    pm.test(\"Metadata link added successfully\", function () {",
                      "        pm.expect(pm.response.text()).to.include(\"successfully updated\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "e8924c3a-1e3f-47fc-b88e-b4bc41cf0fb8"
                  }
                }
              ]
            },
            {
              "id": "1c834bd9-b48c-40ab-b335-c3b27c11f40a",
              "name": "Remove Metadata Link",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "culture",
                    "removeLink"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\"linkedItemType1\": \"metadata\", \"linkedItemType2\": \"metadata\", \"linkedItemKey1\": \"culture\", \"linkedItemKey2\": \"religion\"}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "92cfafca-1c13-4438-8d2d-5dc1777a5fc0",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});",
                      "if (pm.response.code === 200) {",
                      "    pm.test(\"Metadata link removed successfully\", function () {",
                      "        pm.expect(pm.response.text()).to.include(\"successfully updated\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "47ced928-c379-4558-9261-c1de9978839e"
                  }
                }
              ]
            },
            {
              "id": "16473151-4e10-4361-b850-56eb769e8375",
              "name": "Delete Metadata",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "test_metadata_item"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "31b55cb0-276c-40d7-a549-8b18d0f5f383",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});"
                    ],
                    "_lastExecutionId": "f79ad42a-755b-4290-81c3-3415440c60ec"
                  }
                }
              ]
            },
            {
              "id": "42b0e9d4-c595-4a53-931a-9d432fbbec55",
              "name": "Upvote Metadata",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "culture",
                    "upvote"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7e8d02a9-e558-48f8-a3b5-cad8afbdb5ad",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "279722b7-d397-40f9-a184-0223966fb78e"
                  }
                }
              ]
            },
            {
              "id": "0dd50556-f6cc-47db-a7c4-fbcd64137355",
              "name": "Downvote Metadata",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "culture",
                    "downvote"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e162af2e-4df5-4bf9-bbce-11360646df04",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "aaf71814-dadc-46eb-9629-80b99e69d078"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "22d5953b-e722-464c-bc55-f8c5ae760649",
          "length": 34,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "705125f3-13ba-43c3-b9e1-68ad5265af1f",
          "scriptId": "ebbc7c9c-6591-47f2-bf75-35ea73ceddad",
          "execution": "89025957-551f-4687-afc4-f5d732e4ea57"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Response contains map and media objects",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:9)",
          "checksum": "178eb98725efff705e7f020c61098de2",
          "id": "98405cae-cccd-4875-a878-a9bf5ee1a889",
          "timestamp": 1758627604477,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 9,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "365897b7-f566-43ab-9802-495d8914a562",
          "name": "Get Linked Metadata",
          "request": {
            "url": {
              "path": [
                "v1",
                "metadata",
                "links",
                "getLinked"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "source",
                  "value": "1:e_Falklands_War"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ebbc7c9c-6591-47f2-bf75-35ea73ceddad",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Response contains map and media objects\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('map');",
                  "    pm.expect(jsonData).to.have.property('media');",
                  "});"
                ],
                "_lastExecutionId": "89025957-551f-4687-afc4-f5d732e4ea57"
              }
            }
          ]
        },
        "parent": {
          "id": "ad65dd3f-3640-4d73-bc99-466d11c37fd3",
          "name": "Metadata (Most Used - 96k requests)",
          "item": [
            {
              "id": "9be15e7b-1c5d-49a2-8a6c-453d061e41de",
              "name": "Get Metadata List",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    ""
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2815f8f7-635e-48fb-85c4-e72a4cd405c6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response time is acceptable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                      "});",
                      "pm.test(\"Response contains metadata array with valid structure\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an(\"array\");",
                      "    pm.expect(jsonData.length).to.be.greaterThan(0);",
                      "    if (jsonData.length > 0) {",
                      "        pm.expect(jsonData[0]).to.be.an(\"object\");",
                      "        pm.expect(Object.keys(jsonData[0]).length).to.be.greaterThan(0);",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "36bede28-eb02-45f8-bf3f-d0c242e6cd71"
                  }
                }
              ]
            },
            {
              "id": "2425e7fe-0331-4a42-afdd-1747cf41ee82",
              "name": "Get Metadata with Filters",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "type",
                      "value": "g"
                    },
                    {
                      "key": "f",
                      "value": "provinces,ruler,culture,religion,capital,province,religionGeneral"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9312b2a6-a432-4151-a45a-af1e2bab9882",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response contains filtered metadata\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.not.be.empty;",
                      "});"
                    ],
                    "_lastExecutionId": "dbebd260-6d41-467d-802d-cc1a88c85b0f"
                  }
                }
              ]
            },
            {
              "id": "0da3c9d7-8ab8-4e8f-8a22-4ec5cf656f36",
              "name": "Get Metadata with Type and End Parameters",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "type",
                      "value": "e"
                    },
                    {
                      "key": "end",
                      "value": "3000"
                    },
                    {
                      "key": "subtype",
                      "value": "ew"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2835733b-4850-4c4c-bc5c-114a7ffebc60",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "137efec3-c340-4d2f-b647-7f002a9d0254"
                  }
                }
              ]
            },
            {
              "id": "540a15b3-0066-48cf-9ab7-8a6571d8187c",
              "name": "Get Specific Metadata by ID",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "religion"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6513dc32-25f7-484f-96d3-95b99a871490",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response contains metadata object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('object');",
                      "});"
                    ],
                    "_lastExecutionId": "002002ca-3094-458c-a9df-0777869d69b6"
                  }
                }
              ]
            },
            {
              "id": "365897b7-f566-43ab-9802-495d8914a562",
              "name": "Get Linked Metadata",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "links",
                    "getLinked"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "source",
                      "value": "1:e_Falklands_War"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ebbc7c9c-6591-47f2-bf75-35ea73ceddad",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response contains map and media objects\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('map');",
                      "    pm.expect(jsonData).to.have.property('media');",
                      "});"
                    ],
                    "_lastExecutionId": "89025957-551f-4687-afc4-f5d732e4ea57"
                  }
                }
              ]
            },
            {
              "id": "4da9a310-ab75-4f60-8221-f14a2addeb4d",
              "name": "Create Metadata",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"_id\": \"test_metadata_item\",\n  \"name\": \"Test Metadata\",\n  \"type\": \"g\",\n  \"data\": {\n    \"description\": \"Test metadata item\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "faceea60-f1cf-47e1-81de-c6bf8ee09a57",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200, 201, or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 401]);",
                      "});",
                      "if (pm.response.code !== 401) {",
                      "    pm.test(\"Response contains created metadata with correct structure\", function () {",
                      "        var jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.not.be.empty;",
                      "        pm.expect(jsonData).to.be.an(\"object\");",
                      "        if (jsonData._id) {",
                      "            pm.globals.set(\"metadataId\", jsonData._id);",
                      "        }",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "6d206237-5ebb-4437-ab68-725cd1bfba26"
                  }
                }
              ]
            },
            {
              "id": "a3fc1106-762d-41ce-a296-4570ca3915e5",
              "name": "Update Metadata",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "test_metadata_item"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Updated Test Metadata\",\n  \"data\": {\n    \"description\": \"Updated test metadata item\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5cec13c3-ca3c-40a8-bdcd-231b1c59f3aa",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});",
                      "if (pm.response.code !== 401) {",
                      "    pm.test(\"Response contains updated metadata\", function () {",
                      "        var jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.not.be.empty;",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "f30a2852-9567-48f8-9045-91eed896cc18"
                  }
                }
              ]
            },
            {
              "id": "3094b267-8851-4216-99da-c5830af9591e",
              "name": "Update Single Metadata Field",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "culture",
                    "single"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\"subEntityId\": \"test_field\", \"nextBody\": [\"\", \"RGB(255,0,0)\"]}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "91d3c187-bd0f-4293-8c00-decc6c1ad3d7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});",
                      "if (pm.response.code === 200) {",
                      "    pm.test(\"Metadata single field updated successfully\", function () {",
                      "        pm.expect(pm.response.text()).to.include(\"successfully updated\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "ea74781f-17bb-4073-a81e-7d4d85ef25cc"
                  }
                }
              ]
            },
            {
              "id": "e7f1b6e1-a64b-423f-b19e-6b6efbae9df3",
              "name": "Add Metadata Link",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "culture",
                    "addLink"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\"linkedItemType1\": \"metadata\", \"linkedItemType2\": \"metadata\", \"linkedItemKey1\": \"culture\", \"linkedItemKey2\": \"religion\"}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "47af10bc-c5c1-46ed-bad3-c27e58de9732",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});",
                      "if (pm.response.code === 200) {",
                      "    pm.test(\"Metadata link added successfully\", function () {",
                      "        pm.expect(pm.response.text()).to.include(\"successfully updated\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "e8924c3a-1e3f-47fc-b88e-b4bc41cf0fb8"
                  }
                }
              ]
            },
            {
              "id": "1c834bd9-b48c-40ab-b335-c3b27c11f40a",
              "name": "Remove Metadata Link",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "culture",
                    "removeLink"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\"linkedItemType1\": \"metadata\", \"linkedItemType2\": \"metadata\", \"linkedItemKey1\": \"culture\", \"linkedItemKey2\": \"religion\"}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "92cfafca-1c13-4438-8d2d-5dc1777a5fc0",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});",
                      "if (pm.response.code === 200) {",
                      "    pm.test(\"Metadata link removed successfully\", function () {",
                      "        pm.expect(pm.response.text()).to.include(\"successfully updated\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "47ced928-c379-4558-9261-c1de9978839e"
                  }
                }
              ]
            },
            {
              "id": "16473151-4e10-4361-b850-56eb769e8375",
              "name": "Delete Metadata",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "test_metadata_item"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "31b55cb0-276c-40d7-a549-8b18d0f5f383",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});"
                    ],
                    "_lastExecutionId": "f79ad42a-755b-4290-81c3-3415440c60ec"
                  }
                }
              ]
            },
            {
              "id": "42b0e9d4-c595-4a53-931a-9d432fbbec55",
              "name": "Upvote Metadata",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "culture",
                    "upvote"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7e8d02a9-e558-48f8-a3b5-cad8afbdb5ad",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "279722b7-d397-40f9-a184-0223966fb78e"
                  }
                }
              ]
            },
            {
              "id": "0dd50556-f6cc-47db-a7c4-fbcd64137355",
              "name": "Downvote Metadata",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "culture",
                    "downvote"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e162af2e-4df5-4bf9-bbce-11360646df04",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "aaf71814-dadc-46eb-9629-80b99e69d078"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "22d5953b-e722-464c-bc55-f8c5ae760649",
          "length": 34,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "705125f3-13ba-43c3-b9e1-68ad5265af1f",
          "scriptId": "ebbc7c9c-6591-47f2-bf75-35ea73ceddad",
          "execution": "89025957-551f-4687-afc4-f5d732e4ea57"
        }
      },
      {
        "error": {
          "errno": -61,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3001,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:3001",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:3001\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1637:16)",
          "checksum": "f958207822d918da82c40a9f858a19c2",
          "id": "e539a88d-62eb-4f16-9e54-6e811eed63a6",
          "timestamp": 1758627604485,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1637,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "4da9a310-ab75-4f60-8221-f14a2addeb4d",
          "name": "Create Metadata",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3001",
              "path": [
                "v1",
                "metadata"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "3e5e9b2f-451e-4843-8bf6-39abc4c85fe1",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:3001",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"_id\": \"test_metadata_item\",\n  \"name\": \"Test Metadata\",\n  \"type\": \"g\",\n  \"data\": {\n    \"description\": \"Test metadata item\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "faceea60-f1cf-47e1-81de-c6bf8ee09a57",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200, 201, or 401\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 401]);",
                  "});",
                  "if (pm.response.code !== 401) {",
                  "    pm.test(\"Response contains created metadata with correct structure\", function () {",
                  "        var jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.not.be.empty;",
                  "        pm.expect(jsonData).to.be.an(\"object\");",
                  "        if (jsonData._id) {",
                  "            pm.globals.set(\"metadataId\", jsonData._id);",
                  "        }",
                  "    });",
                  "}"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "06e0468c-7c41-4ac8-879b-da1888408801",
          "length": 34,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "452570e0-267d-49e8-8cd7-57511c42b30e"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200, 201, or 401",
          "message": "expected undefined to be one of [ 200, 201, 401 ]",
          "stack": "AssertionError: expected undefined to be one of [ 200, 201, 401 ]\n   at Object.eval sandbox-script.js:1:10)",
          "checksum": "99db824b51e3039317f637fbc12a9564",
          "id": "e0cf6358-3bca-434c-8301-0d948dadaf77",
          "timestamp": 1758627604488,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 10,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "4da9a310-ab75-4f60-8221-f14a2addeb4d",
          "name": "Create Metadata",
          "request": {
            "url": {
              "path": [
                "v1",
                "metadata"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"_id\": \"test_metadata_item\",\n  \"name\": \"Test Metadata\",\n  \"type\": \"g\",\n  \"data\": {\n    \"description\": \"Test metadata item\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "faceea60-f1cf-47e1-81de-c6bf8ee09a57",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200, 201, or 401\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 401]);",
                  "});",
                  "if (pm.response.code !== 401) {",
                  "    pm.test(\"Response contains created metadata with correct structure\", function () {",
                  "        var jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.not.be.empty;",
                  "        pm.expect(jsonData).to.be.an(\"object\");",
                  "        if (jsonData._id) {",
                  "            pm.globals.set(\"metadataId\", jsonData._id);",
                  "        }",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "6d206237-5ebb-4437-ab68-725cd1bfba26"
              }
            }
          ]
        },
        "parent": {
          "id": "ad65dd3f-3640-4d73-bc99-466d11c37fd3",
          "name": "Metadata (Most Used - 96k requests)",
          "item": [
            {
              "id": "9be15e7b-1c5d-49a2-8a6c-453d061e41de",
              "name": "Get Metadata List",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    ""
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2815f8f7-635e-48fb-85c4-e72a4cd405c6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response time is acceptable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                      "});",
                      "pm.test(\"Response contains metadata array with valid structure\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an(\"array\");",
                      "    pm.expect(jsonData.length).to.be.greaterThan(0);",
                      "    if (jsonData.length > 0) {",
                      "        pm.expect(jsonData[0]).to.be.an(\"object\");",
                      "        pm.expect(Object.keys(jsonData[0]).length).to.be.greaterThan(0);",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "36bede28-eb02-45f8-bf3f-d0c242e6cd71"
                  }
                }
              ]
            },
            {
              "id": "2425e7fe-0331-4a42-afdd-1747cf41ee82",
              "name": "Get Metadata with Filters",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "type",
                      "value": "g"
                    },
                    {
                      "key": "f",
                      "value": "provinces,ruler,culture,religion,capital,province,religionGeneral"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9312b2a6-a432-4151-a45a-af1e2bab9882",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response contains filtered metadata\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.not.be.empty;",
                      "});"
                    ],
                    "_lastExecutionId": "dbebd260-6d41-467d-802d-cc1a88c85b0f"
                  }
                }
              ]
            },
            {
              "id": "0da3c9d7-8ab8-4e8f-8a22-4ec5cf656f36",
              "name": "Get Metadata with Type and End Parameters",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "type",
                      "value": "e"
                    },
                    {
                      "key": "end",
                      "value": "3000"
                    },
                    {
                      "key": "subtype",
                      "value": "ew"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2835733b-4850-4c4c-bc5c-114a7ffebc60",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "137efec3-c340-4d2f-b647-7f002a9d0254"
                  }
                }
              ]
            },
            {
              "id": "540a15b3-0066-48cf-9ab7-8a6571d8187c",
              "name": "Get Specific Metadata by ID",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "religion"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6513dc32-25f7-484f-96d3-95b99a871490",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response contains metadata object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('object');",
                      "});"
                    ],
                    "_lastExecutionId": "002002ca-3094-458c-a9df-0777869d69b6"
                  }
                }
              ]
            },
            {
              "id": "365897b7-f566-43ab-9802-495d8914a562",
              "name": "Get Linked Metadata",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "links",
                    "getLinked"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "source",
                      "value": "1:e_Falklands_War"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ebbc7c9c-6591-47f2-bf75-35ea73ceddad",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response contains map and media objects\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('map');",
                      "    pm.expect(jsonData).to.have.property('media');",
                      "});"
                    ],
                    "_lastExecutionId": "89025957-551f-4687-afc4-f5d732e4ea57"
                  }
                }
              ]
            },
            {
              "id": "4da9a310-ab75-4f60-8221-f14a2addeb4d",
              "name": "Create Metadata",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"_id\": \"test_metadata_item\",\n  \"name\": \"Test Metadata\",\n  \"type\": \"g\",\n  \"data\": {\n    \"description\": \"Test metadata item\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "faceea60-f1cf-47e1-81de-c6bf8ee09a57",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200, 201, or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 401]);",
                      "});",
                      "if (pm.response.code !== 401) {",
                      "    pm.test(\"Response contains created metadata with correct structure\", function () {",
                      "        var jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.not.be.empty;",
                      "        pm.expect(jsonData).to.be.an(\"object\");",
                      "        if (jsonData._id) {",
                      "            pm.globals.set(\"metadataId\", jsonData._id);",
                      "        }",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "6d206237-5ebb-4437-ab68-725cd1bfba26"
                  }
                }
              ]
            },
            {
              "id": "a3fc1106-762d-41ce-a296-4570ca3915e5",
              "name": "Update Metadata",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "test_metadata_item"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Updated Test Metadata\",\n  \"data\": {\n    \"description\": \"Updated test metadata item\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5cec13c3-ca3c-40a8-bdcd-231b1c59f3aa",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});",
                      "if (pm.response.code !== 401) {",
                      "    pm.test(\"Response contains updated metadata\", function () {",
                      "        var jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.not.be.empty;",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "f30a2852-9567-48f8-9045-91eed896cc18"
                  }
                }
              ]
            },
            {
              "id": "3094b267-8851-4216-99da-c5830af9591e",
              "name": "Update Single Metadata Field",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "culture",
                    "single"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\"subEntityId\": \"test_field\", \"nextBody\": [\"\", \"RGB(255,0,0)\"]}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "91d3c187-bd0f-4293-8c00-decc6c1ad3d7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});",
                      "if (pm.response.code === 200) {",
                      "    pm.test(\"Metadata single field updated successfully\", function () {",
                      "        pm.expect(pm.response.text()).to.include(\"successfully updated\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "ea74781f-17bb-4073-a81e-7d4d85ef25cc"
                  }
                }
              ]
            },
            {
              "id": "e7f1b6e1-a64b-423f-b19e-6b6efbae9df3",
              "name": "Add Metadata Link",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "culture",
                    "addLink"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\"linkedItemType1\": \"metadata\", \"linkedItemType2\": \"metadata\", \"linkedItemKey1\": \"culture\", \"linkedItemKey2\": \"religion\"}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "47af10bc-c5c1-46ed-bad3-c27e58de9732",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});",
                      "if (pm.response.code === 200) {",
                      "    pm.test(\"Metadata link added successfully\", function () {",
                      "        pm.expect(pm.response.text()).to.include(\"successfully updated\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "e8924c3a-1e3f-47fc-b88e-b4bc41cf0fb8"
                  }
                }
              ]
            },
            {
              "id": "1c834bd9-b48c-40ab-b335-c3b27c11f40a",
              "name": "Remove Metadata Link",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "culture",
                    "removeLink"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\"linkedItemType1\": \"metadata\", \"linkedItemType2\": \"metadata\", \"linkedItemKey1\": \"culture\", \"linkedItemKey2\": \"religion\"}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "92cfafca-1c13-4438-8d2d-5dc1777a5fc0",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});",
                      "if (pm.response.code === 200) {",
                      "    pm.test(\"Metadata link removed successfully\", function () {",
                      "        pm.expect(pm.response.text()).to.include(\"successfully updated\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "47ced928-c379-4558-9261-c1de9978839e"
                  }
                }
              ]
            },
            {
              "id": "16473151-4e10-4361-b850-56eb769e8375",
              "name": "Delete Metadata",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "test_metadata_item"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "31b55cb0-276c-40d7-a549-8b18d0f5f383",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});"
                    ],
                    "_lastExecutionId": "f79ad42a-755b-4290-81c3-3415440c60ec"
                  }
                }
              ]
            },
            {
              "id": "42b0e9d4-c595-4a53-931a-9d432fbbec55",
              "name": "Upvote Metadata",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "culture",
                    "upvote"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7e8d02a9-e558-48f8-a3b5-cad8afbdb5ad",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "279722b7-d397-40f9-a184-0223966fb78e"
                  }
                }
              ]
            },
            {
              "id": "0dd50556-f6cc-47db-a7c4-fbcd64137355",
              "name": "Downvote Metadata",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "culture",
                    "downvote"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e162af2e-4df5-4bf9-bbce-11360646df04",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "aaf71814-dadc-46eb-9629-80b99e69d078"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "06e0468c-7c41-4ac8-879b-da1888408801",
          "length": 34,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "452570e0-267d-49e8-8cd7-57511c42b30e",
          "scriptId": "faceea60-f1cf-47e1-81de-c6bf8ee09a57",
          "execution": "6d206237-5ebb-4437-ab68-725cd1bfba26"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Response contains created metadata with correct structure",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:10)",
          "checksum": "14a7e83ec01a508e83131ac4a1b931dd",
          "id": "171ea2a3-0226-477f-982b-07a74357a446",
          "timestamp": 1758627604488,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 10,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "4da9a310-ab75-4f60-8221-f14a2addeb4d",
          "name": "Create Metadata",
          "request": {
            "url": {
              "path": [
                "v1",
                "metadata"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"_id\": \"test_metadata_item\",\n  \"name\": \"Test Metadata\",\n  \"type\": \"g\",\n  \"data\": {\n    \"description\": \"Test metadata item\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "faceea60-f1cf-47e1-81de-c6bf8ee09a57",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200, 201, or 401\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 401]);",
                  "});",
                  "if (pm.response.code !== 401) {",
                  "    pm.test(\"Response contains created metadata with correct structure\", function () {",
                  "        var jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.not.be.empty;",
                  "        pm.expect(jsonData).to.be.an(\"object\");",
                  "        if (jsonData._id) {",
                  "            pm.globals.set(\"metadataId\", jsonData._id);",
                  "        }",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "6d206237-5ebb-4437-ab68-725cd1bfba26"
              }
            }
          ]
        },
        "parent": {
          "id": "ad65dd3f-3640-4d73-bc99-466d11c37fd3",
          "name": "Metadata (Most Used - 96k requests)",
          "item": [
            {
              "id": "9be15e7b-1c5d-49a2-8a6c-453d061e41de",
              "name": "Get Metadata List",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    ""
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2815f8f7-635e-48fb-85c4-e72a4cd405c6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response time is acceptable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                      "});",
                      "pm.test(\"Response contains metadata array with valid structure\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an(\"array\");",
                      "    pm.expect(jsonData.length).to.be.greaterThan(0);",
                      "    if (jsonData.length > 0) {",
                      "        pm.expect(jsonData[0]).to.be.an(\"object\");",
                      "        pm.expect(Object.keys(jsonData[0]).length).to.be.greaterThan(0);",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "36bede28-eb02-45f8-bf3f-d0c242e6cd71"
                  }
                }
              ]
            },
            {
              "id": "2425e7fe-0331-4a42-afdd-1747cf41ee82",
              "name": "Get Metadata with Filters",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "type",
                      "value": "g"
                    },
                    {
                      "key": "f",
                      "value": "provinces,ruler,culture,religion,capital,province,religionGeneral"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9312b2a6-a432-4151-a45a-af1e2bab9882",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response contains filtered metadata\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.not.be.empty;",
                      "});"
                    ],
                    "_lastExecutionId": "dbebd260-6d41-467d-802d-cc1a88c85b0f"
                  }
                }
              ]
            },
            {
              "id": "0da3c9d7-8ab8-4e8f-8a22-4ec5cf656f36",
              "name": "Get Metadata with Type and End Parameters",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "type",
                      "value": "e"
                    },
                    {
                      "key": "end",
                      "value": "3000"
                    },
                    {
                      "key": "subtype",
                      "value": "ew"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2835733b-4850-4c4c-bc5c-114a7ffebc60",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "137efec3-c340-4d2f-b647-7f002a9d0254"
                  }
                }
              ]
            },
            {
              "id": "540a15b3-0066-48cf-9ab7-8a6571d8187c",
              "name": "Get Specific Metadata by ID",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "religion"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6513dc32-25f7-484f-96d3-95b99a871490",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response contains metadata object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('object');",
                      "});"
                    ],
                    "_lastExecutionId": "002002ca-3094-458c-a9df-0777869d69b6"
                  }
                }
              ]
            },
            {
              "id": "365897b7-f566-43ab-9802-495d8914a562",
              "name": "Get Linked Metadata",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "links",
                    "getLinked"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "source",
                      "value": "1:e_Falklands_War"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ebbc7c9c-6591-47f2-bf75-35ea73ceddad",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response contains map and media objects\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('map');",
                      "    pm.expect(jsonData).to.have.property('media');",
                      "});"
                    ],
                    "_lastExecutionId": "89025957-551f-4687-afc4-f5d732e4ea57"
                  }
                }
              ]
            },
            {
              "id": "4da9a310-ab75-4f60-8221-f14a2addeb4d",
              "name": "Create Metadata",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"_id\": \"test_metadata_item\",\n  \"name\": \"Test Metadata\",\n  \"type\": \"g\",\n  \"data\": {\n    \"description\": \"Test metadata item\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "faceea60-f1cf-47e1-81de-c6bf8ee09a57",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200, 201, or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 401]);",
                      "});",
                      "if (pm.response.code !== 401) {",
                      "    pm.test(\"Response contains created metadata with correct structure\", function () {",
                      "        var jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.not.be.empty;",
                      "        pm.expect(jsonData).to.be.an(\"object\");",
                      "        if (jsonData._id) {",
                      "            pm.globals.set(\"metadataId\", jsonData._id);",
                      "        }",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "6d206237-5ebb-4437-ab68-725cd1bfba26"
                  }
                }
              ]
            },
            {
              "id": "a3fc1106-762d-41ce-a296-4570ca3915e5",
              "name": "Update Metadata",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "test_metadata_item"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Updated Test Metadata\",\n  \"data\": {\n    \"description\": \"Updated test metadata item\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5cec13c3-ca3c-40a8-bdcd-231b1c59f3aa",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});",
                      "if (pm.response.code !== 401) {",
                      "    pm.test(\"Response contains updated metadata\", function () {",
                      "        var jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.not.be.empty;",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "f30a2852-9567-48f8-9045-91eed896cc18"
                  }
                }
              ]
            },
            {
              "id": "3094b267-8851-4216-99da-c5830af9591e",
              "name": "Update Single Metadata Field",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "culture",
                    "single"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\"subEntityId\": \"test_field\", \"nextBody\": [\"\", \"RGB(255,0,0)\"]}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "91d3c187-bd0f-4293-8c00-decc6c1ad3d7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});",
                      "if (pm.response.code === 200) {",
                      "    pm.test(\"Metadata single field updated successfully\", function () {",
                      "        pm.expect(pm.response.text()).to.include(\"successfully updated\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "ea74781f-17bb-4073-a81e-7d4d85ef25cc"
                  }
                }
              ]
            },
            {
              "id": "e7f1b6e1-a64b-423f-b19e-6b6efbae9df3",
              "name": "Add Metadata Link",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "culture",
                    "addLink"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\"linkedItemType1\": \"metadata\", \"linkedItemType2\": \"metadata\", \"linkedItemKey1\": \"culture\", \"linkedItemKey2\": \"religion\"}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "47af10bc-c5c1-46ed-bad3-c27e58de9732",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});",
                      "if (pm.response.code === 200) {",
                      "    pm.test(\"Metadata link added successfully\", function () {",
                      "        pm.expect(pm.response.text()).to.include(\"successfully updated\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "e8924c3a-1e3f-47fc-b88e-b4bc41cf0fb8"
                  }
                }
              ]
            },
            {
              "id": "1c834bd9-b48c-40ab-b335-c3b27c11f40a",
              "name": "Remove Metadata Link",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "culture",
                    "removeLink"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\"linkedItemType1\": \"metadata\", \"linkedItemType2\": \"metadata\", \"linkedItemKey1\": \"culture\", \"linkedItemKey2\": \"religion\"}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "92cfafca-1c13-4438-8d2d-5dc1777a5fc0",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});",
                      "if (pm.response.code === 200) {",
                      "    pm.test(\"Metadata link removed successfully\", function () {",
                      "        pm.expect(pm.response.text()).to.include(\"successfully updated\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "47ced928-c379-4558-9261-c1de9978839e"
                  }
                }
              ]
            },
            {
              "id": "16473151-4e10-4361-b850-56eb769e8375",
              "name": "Delete Metadata",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "test_metadata_item"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "31b55cb0-276c-40d7-a549-8b18d0f5f383",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});"
                    ],
                    "_lastExecutionId": "f79ad42a-755b-4290-81c3-3415440c60ec"
                  }
                }
              ]
            },
            {
              "id": "42b0e9d4-c595-4a53-931a-9d432fbbec55",
              "name": "Upvote Metadata",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "culture",
                    "upvote"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7e8d02a9-e558-48f8-a3b5-cad8afbdb5ad",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "279722b7-d397-40f9-a184-0223966fb78e"
                  }
                }
              ]
            },
            {
              "id": "0dd50556-f6cc-47db-a7c4-fbcd64137355",
              "name": "Downvote Metadata",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "culture",
                    "downvote"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e162af2e-4df5-4bf9-bbce-11360646df04",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "aaf71814-dadc-46eb-9629-80b99e69d078"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "06e0468c-7c41-4ac8-879b-da1888408801",
          "length": 34,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "452570e0-267d-49e8-8cd7-57511c42b30e",
          "scriptId": "faceea60-f1cf-47e1-81de-c6bf8ee09a57",
          "execution": "6d206237-5ebb-4437-ab68-725cd1bfba26"
        }
      },
      {
        "error": {
          "errno": -61,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3001,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:3001",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:3001\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1637:16)",
          "checksum": "f958207822d918da82c40a9f858a19c2",
          "id": "c9e448cd-ee7f-484b-ba33-8391d30c3250",
          "timestamp": 1758627604496,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1637,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "a3fc1106-762d-41ce-a296-4570ca3915e5",
          "name": "Update Metadata",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3001",
              "path": [
                "v1",
                "metadata",
                "test_metadata_item"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "9c3b7e1b-e2be-4e17-b2df-69eceba94837",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:3001",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Updated Test Metadata\",\n  \"data\": {\n    \"description\": \"Updated test metadata item\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5cec13c3-ca3c-40a8-bdcd-231b1c59f3aa",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200 or 401\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                  "});",
                  "if (pm.response.code !== 401) {",
                  "    pm.test(\"Response contains updated metadata\", function () {",
                  "        var jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.not.be.empty;",
                  "    });",
                  "}"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "42f3f978-9502-4b43-9978-08c24ef55827",
          "length": 34,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "c29ad64c-18d3-4bd6-a1af-a63caaa7bd3f"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200 or 401",
          "message": "expected undefined to be one of [ 200, 401 ]",
          "stack": "AssertionError: expected undefined to be one of [ 200, 401 ]\n   at Object.eval sandbox-script.js:1:11)",
          "checksum": "f819a62b4088e2a2303bf9d7a1259c3c",
          "id": "d6f7dd53-65da-40f2-b268-2d01fa37f60c",
          "timestamp": 1758627604499,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 11,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "a3fc1106-762d-41ce-a296-4570ca3915e5",
          "name": "Update Metadata",
          "request": {
            "url": {
              "path": [
                "v1",
                "metadata",
                "test_metadata_item"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Updated Test Metadata\",\n  \"data\": {\n    \"description\": \"Updated test metadata item\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5cec13c3-ca3c-40a8-bdcd-231b1c59f3aa",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200 or 401\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                  "});",
                  "if (pm.response.code !== 401) {",
                  "    pm.test(\"Response contains updated metadata\", function () {",
                  "        var jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.not.be.empty;",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "f30a2852-9567-48f8-9045-91eed896cc18"
              }
            }
          ]
        },
        "parent": {
          "id": "ad65dd3f-3640-4d73-bc99-466d11c37fd3",
          "name": "Metadata (Most Used - 96k requests)",
          "item": [
            {
              "id": "9be15e7b-1c5d-49a2-8a6c-453d061e41de",
              "name": "Get Metadata List",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    ""
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2815f8f7-635e-48fb-85c4-e72a4cd405c6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response time is acceptable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                      "});",
                      "pm.test(\"Response contains metadata array with valid structure\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an(\"array\");",
                      "    pm.expect(jsonData.length).to.be.greaterThan(0);",
                      "    if (jsonData.length > 0) {",
                      "        pm.expect(jsonData[0]).to.be.an(\"object\");",
                      "        pm.expect(Object.keys(jsonData[0]).length).to.be.greaterThan(0);",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "36bede28-eb02-45f8-bf3f-d0c242e6cd71"
                  }
                }
              ]
            },
            {
              "id": "2425e7fe-0331-4a42-afdd-1747cf41ee82",
              "name": "Get Metadata with Filters",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "type",
                      "value": "g"
                    },
                    {
                      "key": "f",
                      "value": "provinces,ruler,culture,religion,capital,province,religionGeneral"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9312b2a6-a432-4151-a45a-af1e2bab9882",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response contains filtered metadata\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.not.be.empty;",
                      "});"
                    ],
                    "_lastExecutionId": "dbebd260-6d41-467d-802d-cc1a88c85b0f"
                  }
                }
              ]
            },
            {
              "id": "0da3c9d7-8ab8-4e8f-8a22-4ec5cf656f36",
              "name": "Get Metadata with Type and End Parameters",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "type",
                      "value": "e"
                    },
                    {
                      "key": "end",
                      "value": "3000"
                    },
                    {
                      "key": "subtype",
                      "value": "ew"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2835733b-4850-4c4c-bc5c-114a7ffebc60",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "137efec3-c340-4d2f-b647-7f002a9d0254"
                  }
                }
              ]
            },
            {
              "id": "540a15b3-0066-48cf-9ab7-8a6571d8187c",
              "name": "Get Specific Metadata by ID",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "religion"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6513dc32-25f7-484f-96d3-95b99a871490",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response contains metadata object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('object');",
                      "});"
                    ],
                    "_lastExecutionId": "002002ca-3094-458c-a9df-0777869d69b6"
                  }
                }
              ]
            },
            {
              "id": "365897b7-f566-43ab-9802-495d8914a562",
              "name": "Get Linked Metadata",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "links",
                    "getLinked"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "source",
                      "value": "1:e_Falklands_War"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ebbc7c9c-6591-47f2-bf75-35ea73ceddad",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response contains map and media objects\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('map');",
                      "    pm.expect(jsonData).to.have.property('media');",
                      "});"
                    ],
                    "_lastExecutionId": "89025957-551f-4687-afc4-f5d732e4ea57"
                  }
                }
              ]
            },
            {
              "id": "4da9a310-ab75-4f60-8221-f14a2addeb4d",
              "name": "Create Metadata",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"_id\": \"test_metadata_item\",\n  \"name\": \"Test Metadata\",\n  \"type\": \"g\",\n  \"data\": {\n    \"description\": \"Test metadata item\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "faceea60-f1cf-47e1-81de-c6bf8ee09a57",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200, 201, or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 401]);",
                      "});",
                      "if (pm.response.code !== 401) {",
                      "    pm.test(\"Response contains created metadata with correct structure\", function () {",
                      "        var jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.not.be.empty;",
                      "        pm.expect(jsonData).to.be.an(\"object\");",
                      "        if (jsonData._id) {",
                      "            pm.globals.set(\"metadataId\", jsonData._id);",
                      "        }",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "6d206237-5ebb-4437-ab68-725cd1bfba26"
                  }
                }
              ]
            },
            {
              "id": "a3fc1106-762d-41ce-a296-4570ca3915e5",
              "name": "Update Metadata",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "test_metadata_item"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Updated Test Metadata\",\n  \"data\": {\n    \"description\": \"Updated test metadata item\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5cec13c3-ca3c-40a8-bdcd-231b1c59f3aa",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});",
                      "if (pm.response.code !== 401) {",
                      "    pm.test(\"Response contains updated metadata\", function () {",
                      "        var jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.not.be.empty;",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "f30a2852-9567-48f8-9045-91eed896cc18"
                  }
                }
              ]
            },
            {
              "id": "3094b267-8851-4216-99da-c5830af9591e",
              "name": "Update Single Metadata Field",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "culture",
                    "single"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\"subEntityId\": \"test_field\", \"nextBody\": [\"\", \"RGB(255,0,0)\"]}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "91d3c187-bd0f-4293-8c00-decc6c1ad3d7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});",
                      "if (pm.response.code === 200) {",
                      "    pm.test(\"Metadata single field updated successfully\", function () {",
                      "        pm.expect(pm.response.text()).to.include(\"successfully updated\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "ea74781f-17bb-4073-a81e-7d4d85ef25cc"
                  }
                }
              ]
            },
            {
              "id": "e7f1b6e1-a64b-423f-b19e-6b6efbae9df3",
              "name": "Add Metadata Link",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "culture",
                    "addLink"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\"linkedItemType1\": \"metadata\", \"linkedItemType2\": \"metadata\", \"linkedItemKey1\": \"culture\", \"linkedItemKey2\": \"religion\"}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "47af10bc-c5c1-46ed-bad3-c27e58de9732",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});",
                      "if (pm.response.code === 200) {",
                      "    pm.test(\"Metadata link added successfully\", function () {",
                      "        pm.expect(pm.response.text()).to.include(\"successfully updated\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "e8924c3a-1e3f-47fc-b88e-b4bc41cf0fb8"
                  }
                }
              ]
            },
            {
              "id": "1c834bd9-b48c-40ab-b335-c3b27c11f40a",
              "name": "Remove Metadata Link",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "culture",
                    "removeLink"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\"linkedItemType1\": \"metadata\", \"linkedItemType2\": \"metadata\", \"linkedItemKey1\": \"culture\", \"linkedItemKey2\": \"religion\"}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "92cfafca-1c13-4438-8d2d-5dc1777a5fc0",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});",
                      "if (pm.response.code === 200) {",
                      "    pm.test(\"Metadata link removed successfully\", function () {",
                      "        pm.expect(pm.response.text()).to.include(\"successfully updated\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "47ced928-c379-4558-9261-c1de9978839e"
                  }
                }
              ]
            },
            {
              "id": "16473151-4e10-4361-b850-56eb769e8375",
              "name": "Delete Metadata",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "test_metadata_item"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "31b55cb0-276c-40d7-a549-8b18d0f5f383",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});"
                    ],
                    "_lastExecutionId": "f79ad42a-755b-4290-81c3-3415440c60ec"
                  }
                }
              ]
            },
            {
              "id": "42b0e9d4-c595-4a53-931a-9d432fbbec55",
              "name": "Upvote Metadata",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "culture",
                    "upvote"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7e8d02a9-e558-48f8-a3b5-cad8afbdb5ad",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "279722b7-d397-40f9-a184-0223966fb78e"
                  }
                }
              ]
            },
            {
              "id": "0dd50556-f6cc-47db-a7c4-fbcd64137355",
              "name": "Downvote Metadata",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "culture",
                    "downvote"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e162af2e-4df5-4bf9-bbce-11360646df04",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "aaf71814-dadc-46eb-9629-80b99e69d078"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "42f3f978-9502-4b43-9978-08c24ef55827",
          "length": 34,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "c29ad64c-18d3-4bd6-a1af-a63caaa7bd3f",
          "scriptId": "5cec13c3-ca3c-40a8-bdcd-231b1c59f3aa",
          "execution": "f30a2852-9567-48f8-9045-91eed896cc18"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Response contains updated metadata",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:11)",
          "checksum": "83dd9bd5956c644be645d2d3bf17b9b0",
          "id": "9f0b42f0-cd31-4b59-9f8f-21b7789f914a",
          "timestamp": 1758627604500,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 11,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "a3fc1106-762d-41ce-a296-4570ca3915e5",
          "name": "Update Metadata",
          "request": {
            "url": {
              "path": [
                "v1",
                "metadata",
                "test_metadata_item"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Updated Test Metadata\",\n  \"data\": {\n    \"description\": \"Updated test metadata item\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "5cec13c3-ca3c-40a8-bdcd-231b1c59f3aa",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200 or 401\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                  "});",
                  "if (pm.response.code !== 401) {",
                  "    pm.test(\"Response contains updated metadata\", function () {",
                  "        var jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.not.be.empty;",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "f30a2852-9567-48f8-9045-91eed896cc18"
              }
            }
          ]
        },
        "parent": {
          "id": "ad65dd3f-3640-4d73-bc99-466d11c37fd3",
          "name": "Metadata (Most Used - 96k requests)",
          "item": [
            {
              "id": "9be15e7b-1c5d-49a2-8a6c-453d061e41de",
              "name": "Get Metadata List",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    ""
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2815f8f7-635e-48fb-85c4-e72a4cd405c6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response time is acceptable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                      "});",
                      "pm.test(\"Response contains metadata array with valid structure\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an(\"array\");",
                      "    pm.expect(jsonData.length).to.be.greaterThan(0);",
                      "    if (jsonData.length > 0) {",
                      "        pm.expect(jsonData[0]).to.be.an(\"object\");",
                      "        pm.expect(Object.keys(jsonData[0]).length).to.be.greaterThan(0);",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "36bede28-eb02-45f8-bf3f-d0c242e6cd71"
                  }
                }
              ]
            },
            {
              "id": "2425e7fe-0331-4a42-afdd-1747cf41ee82",
              "name": "Get Metadata with Filters",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "type",
                      "value": "g"
                    },
                    {
                      "key": "f",
                      "value": "provinces,ruler,culture,religion,capital,province,religionGeneral"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9312b2a6-a432-4151-a45a-af1e2bab9882",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response contains filtered metadata\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.not.be.empty;",
                      "});"
                    ],
                    "_lastExecutionId": "dbebd260-6d41-467d-802d-cc1a88c85b0f"
                  }
                }
              ]
            },
            {
              "id": "0da3c9d7-8ab8-4e8f-8a22-4ec5cf656f36",
              "name": "Get Metadata with Type and End Parameters",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "type",
                      "value": "e"
                    },
                    {
                      "key": "end",
                      "value": "3000"
                    },
                    {
                      "key": "subtype",
                      "value": "ew"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2835733b-4850-4c4c-bc5c-114a7ffebc60",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "137efec3-c340-4d2f-b647-7f002a9d0254"
                  }
                }
              ]
            },
            {
              "id": "540a15b3-0066-48cf-9ab7-8a6571d8187c",
              "name": "Get Specific Metadata by ID",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "religion"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6513dc32-25f7-484f-96d3-95b99a871490",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response contains metadata object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('object');",
                      "});"
                    ],
                    "_lastExecutionId": "002002ca-3094-458c-a9df-0777869d69b6"
                  }
                }
              ]
            },
            {
              "id": "365897b7-f566-43ab-9802-495d8914a562",
              "name": "Get Linked Metadata",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "links",
                    "getLinked"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "source",
                      "value": "1:e_Falklands_War"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ebbc7c9c-6591-47f2-bf75-35ea73ceddad",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response contains map and media objects\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('map');",
                      "    pm.expect(jsonData).to.have.property('media');",
                      "});"
                    ],
                    "_lastExecutionId": "89025957-551f-4687-afc4-f5d732e4ea57"
                  }
                }
              ]
            },
            {
              "id": "4da9a310-ab75-4f60-8221-f14a2addeb4d",
              "name": "Create Metadata",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"_id\": \"test_metadata_item\",\n  \"name\": \"Test Metadata\",\n  \"type\": \"g\",\n  \"data\": {\n    \"description\": \"Test metadata item\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "faceea60-f1cf-47e1-81de-c6bf8ee09a57",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200, 201, or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 401]);",
                      "});",
                      "if (pm.response.code !== 401) {",
                      "    pm.test(\"Response contains created metadata with correct structure\", function () {",
                      "        var jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.not.be.empty;",
                      "        pm.expect(jsonData).to.be.an(\"object\");",
                      "        if (jsonData._id) {",
                      "            pm.globals.set(\"metadataId\", jsonData._id);",
                      "        }",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "6d206237-5ebb-4437-ab68-725cd1bfba26"
                  }
                }
              ]
            },
            {
              "id": "a3fc1106-762d-41ce-a296-4570ca3915e5",
              "name": "Update Metadata",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "test_metadata_item"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Updated Test Metadata\",\n  \"data\": {\n    \"description\": \"Updated test metadata item\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5cec13c3-ca3c-40a8-bdcd-231b1c59f3aa",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});",
                      "if (pm.response.code !== 401) {",
                      "    pm.test(\"Response contains updated metadata\", function () {",
                      "        var jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.not.be.empty;",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "f30a2852-9567-48f8-9045-91eed896cc18"
                  }
                }
              ]
            },
            {
              "id": "3094b267-8851-4216-99da-c5830af9591e",
              "name": "Update Single Metadata Field",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "culture",
                    "single"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\"subEntityId\": \"test_field\", \"nextBody\": [\"\", \"RGB(255,0,0)\"]}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "91d3c187-bd0f-4293-8c00-decc6c1ad3d7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});",
                      "if (pm.response.code === 200) {",
                      "    pm.test(\"Metadata single field updated successfully\", function () {",
                      "        pm.expect(pm.response.text()).to.include(\"successfully updated\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "ea74781f-17bb-4073-a81e-7d4d85ef25cc"
                  }
                }
              ]
            },
            {
              "id": "e7f1b6e1-a64b-423f-b19e-6b6efbae9df3",
              "name": "Add Metadata Link",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "culture",
                    "addLink"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\"linkedItemType1\": \"metadata\", \"linkedItemType2\": \"metadata\", \"linkedItemKey1\": \"culture\", \"linkedItemKey2\": \"religion\"}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "47af10bc-c5c1-46ed-bad3-c27e58de9732",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});",
                      "if (pm.response.code === 200) {",
                      "    pm.test(\"Metadata link added successfully\", function () {",
                      "        pm.expect(pm.response.text()).to.include(\"successfully updated\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "e8924c3a-1e3f-47fc-b88e-b4bc41cf0fb8"
                  }
                }
              ]
            },
            {
              "id": "1c834bd9-b48c-40ab-b335-c3b27c11f40a",
              "name": "Remove Metadata Link",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "culture",
                    "removeLink"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\"linkedItemType1\": \"metadata\", \"linkedItemType2\": \"metadata\", \"linkedItemKey1\": \"culture\", \"linkedItemKey2\": \"religion\"}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "92cfafca-1c13-4438-8d2d-5dc1777a5fc0",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});",
                      "if (pm.response.code === 200) {",
                      "    pm.test(\"Metadata link removed successfully\", function () {",
                      "        pm.expect(pm.response.text()).to.include(\"successfully updated\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "47ced928-c379-4558-9261-c1de9978839e"
                  }
                }
              ]
            },
            {
              "id": "16473151-4e10-4361-b850-56eb769e8375",
              "name": "Delete Metadata",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "test_metadata_item"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "31b55cb0-276c-40d7-a549-8b18d0f5f383",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});"
                    ],
                    "_lastExecutionId": "f79ad42a-755b-4290-81c3-3415440c60ec"
                  }
                }
              ]
            },
            {
              "id": "42b0e9d4-c595-4a53-931a-9d432fbbec55",
              "name": "Upvote Metadata",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "culture",
                    "upvote"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7e8d02a9-e558-48f8-a3b5-cad8afbdb5ad",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "279722b7-d397-40f9-a184-0223966fb78e"
                  }
                }
              ]
            },
            {
              "id": "0dd50556-f6cc-47db-a7c4-fbcd64137355",
              "name": "Downvote Metadata",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "culture",
                    "downvote"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e162af2e-4df5-4bf9-bbce-11360646df04",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "aaf71814-dadc-46eb-9629-80b99e69d078"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "42f3f978-9502-4b43-9978-08c24ef55827",
          "length": 34,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "c29ad64c-18d3-4bd6-a1af-a63caaa7bd3f",
          "scriptId": "5cec13c3-ca3c-40a8-bdcd-231b1c59f3aa",
          "execution": "f30a2852-9567-48f8-9045-91eed896cc18"
        }
      },
      {
        "error": {
          "errno": -61,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3001,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:3001",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:3001\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1637:16)",
          "checksum": "f958207822d918da82c40a9f858a19c2",
          "id": "6dc589d8-5e70-474d-ae57-8f48e4ae8c97",
          "timestamp": 1758627604508,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1637,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "3094b267-8851-4216-99da-c5830af9591e",
          "name": "Update Single Metadata Field",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3001",
              "path": [
                "v1",
                "metadata",
                "culture",
                "single"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "88d36603-ca95-435a-9b85-ae8472b2db95",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:3001",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\"subEntityId\": \"test_field\", \"nextBody\": [\"\", \"RGB(255,0,0)\"]}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "91d3c187-bd0f-4293-8c00-decc6c1ad3d7",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200 or 401\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                  "});",
                  "if (pm.response.code === 200) {",
                  "    pm.test(\"Metadata single field updated successfully\", function () {",
                  "        pm.expect(pm.response.text()).to.include(\"successfully updated\");",
                  "    });",
                  "}"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "e441853a-1a6a-4520-8263-bb32723ca784",
          "length": 34,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "b3251a42-5987-4b48-947b-3183409c0569"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200 or 401",
          "message": "expected undefined to be one of [ 200, 401 ]",
          "stack": "AssertionError: expected undefined to be one of [ 200, 401 ]\n   at Object.eval sandbox-script.js:1:12)",
          "checksum": "9eabb36fb681650641b4bb84a3753142",
          "id": "f1df4163-6573-401f-b71d-a8872a8c90fe",
          "timestamp": 1758627604510,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 12,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "3094b267-8851-4216-99da-c5830af9591e",
          "name": "Update Single Metadata Field",
          "request": {
            "url": {
              "path": [
                "v1",
                "metadata",
                "culture",
                "single"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\"subEntityId\": \"test_field\", \"nextBody\": [\"\", \"RGB(255,0,0)\"]}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "91d3c187-bd0f-4293-8c00-decc6c1ad3d7",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200 or 401\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                  "});",
                  "if (pm.response.code === 200) {",
                  "    pm.test(\"Metadata single field updated successfully\", function () {",
                  "        pm.expect(pm.response.text()).to.include(\"successfully updated\");",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "ea74781f-17bb-4073-a81e-7d4d85ef25cc"
              }
            }
          ]
        },
        "parent": {
          "id": "ad65dd3f-3640-4d73-bc99-466d11c37fd3",
          "name": "Metadata (Most Used - 96k requests)",
          "item": [
            {
              "id": "9be15e7b-1c5d-49a2-8a6c-453d061e41de",
              "name": "Get Metadata List",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    ""
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2815f8f7-635e-48fb-85c4-e72a4cd405c6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response time is acceptable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                      "});",
                      "pm.test(\"Response contains metadata array with valid structure\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an(\"array\");",
                      "    pm.expect(jsonData.length).to.be.greaterThan(0);",
                      "    if (jsonData.length > 0) {",
                      "        pm.expect(jsonData[0]).to.be.an(\"object\");",
                      "        pm.expect(Object.keys(jsonData[0]).length).to.be.greaterThan(0);",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "36bede28-eb02-45f8-bf3f-d0c242e6cd71"
                  }
                }
              ]
            },
            {
              "id": "2425e7fe-0331-4a42-afdd-1747cf41ee82",
              "name": "Get Metadata with Filters",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "type",
                      "value": "g"
                    },
                    {
                      "key": "f",
                      "value": "provinces,ruler,culture,religion,capital,province,religionGeneral"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9312b2a6-a432-4151-a45a-af1e2bab9882",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response contains filtered metadata\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.not.be.empty;",
                      "});"
                    ],
                    "_lastExecutionId": "dbebd260-6d41-467d-802d-cc1a88c85b0f"
                  }
                }
              ]
            },
            {
              "id": "0da3c9d7-8ab8-4e8f-8a22-4ec5cf656f36",
              "name": "Get Metadata with Type and End Parameters",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "type",
                      "value": "e"
                    },
                    {
                      "key": "end",
                      "value": "3000"
                    },
                    {
                      "key": "subtype",
                      "value": "ew"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2835733b-4850-4c4c-bc5c-114a7ffebc60",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "137efec3-c340-4d2f-b647-7f002a9d0254"
                  }
                }
              ]
            },
            {
              "id": "540a15b3-0066-48cf-9ab7-8a6571d8187c",
              "name": "Get Specific Metadata by ID",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "religion"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6513dc32-25f7-484f-96d3-95b99a871490",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response contains metadata object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('object');",
                      "});"
                    ],
                    "_lastExecutionId": "002002ca-3094-458c-a9df-0777869d69b6"
                  }
                }
              ]
            },
            {
              "id": "365897b7-f566-43ab-9802-495d8914a562",
              "name": "Get Linked Metadata",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "links",
                    "getLinked"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "source",
                      "value": "1:e_Falklands_War"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ebbc7c9c-6591-47f2-bf75-35ea73ceddad",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response contains map and media objects\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('map');",
                      "    pm.expect(jsonData).to.have.property('media');",
                      "});"
                    ],
                    "_lastExecutionId": "89025957-551f-4687-afc4-f5d732e4ea57"
                  }
                }
              ]
            },
            {
              "id": "4da9a310-ab75-4f60-8221-f14a2addeb4d",
              "name": "Create Metadata",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"_id\": \"test_metadata_item\",\n  \"name\": \"Test Metadata\",\n  \"type\": \"g\",\n  \"data\": {\n    \"description\": \"Test metadata item\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "faceea60-f1cf-47e1-81de-c6bf8ee09a57",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200, 201, or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 401]);",
                      "});",
                      "if (pm.response.code !== 401) {",
                      "    pm.test(\"Response contains created metadata with correct structure\", function () {",
                      "        var jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.not.be.empty;",
                      "        pm.expect(jsonData).to.be.an(\"object\");",
                      "        if (jsonData._id) {",
                      "            pm.globals.set(\"metadataId\", jsonData._id);",
                      "        }",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "6d206237-5ebb-4437-ab68-725cd1bfba26"
                  }
                }
              ]
            },
            {
              "id": "a3fc1106-762d-41ce-a296-4570ca3915e5",
              "name": "Update Metadata",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "test_metadata_item"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Updated Test Metadata\",\n  \"data\": {\n    \"description\": \"Updated test metadata item\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5cec13c3-ca3c-40a8-bdcd-231b1c59f3aa",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});",
                      "if (pm.response.code !== 401) {",
                      "    pm.test(\"Response contains updated metadata\", function () {",
                      "        var jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.not.be.empty;",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "f30a2852-9567-48f8-9045-91eed896cc18"
                  }
                }
              ]
            },
            {
              "id": "3094b267-8851-4216-99da-c5830af9591e",
              "name": "Update Single Metadata Field",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "culture",
                    "single"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\"subEntityId\": \"test_field\", \"nextBody\": [\"\", \"RGB(255,0,0)\"]}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "91d3c187-bd0f-4293-8c00-decc6c1ad3d7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});",
                      "if (pm.response.code === 200) {",
                      "    pm.test(\"Metadata single field updated successfully\", function () {",
                      "        pm.expect(pm.response.text()).to.include(\"successfully updated\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "ea74781f-17bb-4073-a81e-7d4d85ef25cc"
                  }
                }
              ]
            },
            {
              "id": "e7f1b6e1-a64b-423f-b19e-6b6efbae9df3",
              "name": "Add Metadata Link",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "culture",
                    "addLink"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\"linkedItemType1\": \"metadata\", \"linkedItemType2\": \"metadata\", \"linkedItemKey1\": \"culture\", \"linkedItemKey2\": \"religion\"}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "47af10bc-c5c1-46ed-bad3-c27e58de9732",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});",
                      "if (pm.response.code === 200) {",
                      "    pm.test(\"Metadata link added successfully\", function () {",
                      "        pm.expect(pm.response.text()).to.include(\"successfully updated\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "e8924c3a-1e3f-47fc-b88e-b4bc41cf0fb8"
                  }
                }
              ]
            },
            {
              "id": "1c834bd9-b48c-40ab-b335-c3b27c11f40a",
              "name": "Remove Metadata Link",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "culture",
                    "removeLink"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\"linkedItemType1\": \"metadata\", \"linkedItemType2\": \"metadata\", \"linkedItemKey1\": \"culture\", \"linkedItemKey2\": \"religion\"}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "92cfafca-1c13-4438-8d2d-5dc1777a5fc0",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});",
                      "if (pm.response.code === 200) {",
                      "    pm.test(\"Metadata link removed successfully\", function () {",
                      "        pm.expect(pm.response.text()).to.include(\"successfully updated\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "47ced928-c379-4558-9261-c1de9978839e"
                  }
                }
              ]
            },
            {
              "id": "16473151-4e10-4361-b850-56eb769e8375",
              "name": "Delete Metadata",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "test_metadata_item"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "31b55cb0-276c-40d7-a549-8b18d0f5f383",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});"
                    ],
                    "_lastExecutionId": "f79ad42a-755b-4290-81c3-3415440c60ec"
                  }
                }
              ]
            },
            {
              "id": "42b0e9d4-c595-4a53-931a-9d432fbbec55",
              "name": "Upvote Metadata",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "culture",
                    "upvote"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7e8d02a9-e558-48f8-a3b5-cad8afbdb5ad",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "279722b7-d397-40f9-a184-0223966fb78e"
                  }
                }
              ]
            },
            {
              "id": "0dd50556-f6cc-47db-a7c4-fbcd64137355",
              "name": "Downvote Metadata",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "culture",
                    "downvote"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e162af2e-4df5-4bf9-bbce-11360646df04",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "aaf71814-dadc-46eb-9629-80b99e69d078"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "e441853a-1a6a-4520-8263-bb32723ca784",
          "length": 34,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "b3251a42-5987-4b48-947b-3183409c0569",
          "scriptId": "91d3c187-bd0f-4293-8c00-decc6c1ad3d7",
          "execution": "ea74781f-17bb-4073-a81e-7d4d85ef25cc"
        }
      },
      {
        "error": {
          "errno": -61,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3001,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:3001",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:3001\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1637:16)",
          "checksum": "f958207822d918da82c40a9f858a19c2",
          "id": "bdd25709-882c-4fba-a467-047022a28840",
          "timestamp": 1758627604518,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1637,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "e7f1b6e1-a64b-423f-b19e-6b6efbae9df3",
          "name": "Add Metadata Link",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3001",
              "path": [
                "v1",
                "metadata",
                "culture",
                "addLink"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "3dbd2c4c-aa66-4346-a60e-0a5783d839a8",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:3001",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\"linkedItemType1\": \"metadata\", \"linkedItemType2\": \"metadata\", \"linkedItemKey1\": \"culture\", \"linkedItemKey2\": \"religion\"}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "47af10bc-c5c1-46ed-bad3-c27e58de9732",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200 or 401\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                  "});",
                  "if (pm.response.code === 200) {",
                  "    pm.test(\"Metadata link added successfully\", function () {",
                  "        pm.expect(pm.response.text()).to.include(\"successfully updated\");",
                  "    });",
                  "}"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "8a015fca-830f-4fb2-b576-dc440ccd2c57",
          "length": 34,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "9042eb7a-5f7e-4884-baa0-70dc9dc1cc50"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200 or 401",
          "message": "expected undefined to be one of [ 200, 401 ]",
          "stack": "AssertionError: expected undefined to be one of [ 200, 401 ]\n   at Object.eval sandbox-script.js:1:13)",
          "checksum": "680eacb6cf47020d060350660f263b01",
          "id": "439cc7d0-f770-4636-b8ce-d04f16ab1208",
          "timestamp": 1758627604520,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 13,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "e7f1b6e1-a64b-423f-b19e-6b6efbae9df3",
          "name": "Add Metadata Link",
          "request": {
            "url": {
              "path": [
                "v1",
                "metadata",
                "culture",
                "addLink"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\"linkedItemType1\": \"metadata\", \"linkedItemType2\": \"metadata\", \"linkedItemKey1\": \"culture\", \"linkedItemKey2\": \"religion\"}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "47af10bc-c5c1-46ed-bad3-c27e58de9732",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200 or 401\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                  "});",
                  "if (pm.response.code === 200) {",
                  "    pm.test(\"Metadata link added successfully\", function () {",
                  "        pm.expect(pm.response.text()).to.include(\"successfully updated\");",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "e8924c3a-1e3f-47fc-b88e-b4bc41cf0fb8"
              }
            }
          ]
        },
        "parent": {
          "id": "ad65dd3f-3640-4d73-bc99-466d11c37fd3",
          "name": "Metadata (Most Used - 96k requests)",
          "item": [
            {
              "id": "9be15e7b-1c5d-49a2-8a6c-453d061e41de",
              "name": "Get Metadata List",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    ""
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2815f8f7-635e-48fb-85c4-e72a4cd405c6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response time is acceptable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                      "});",
                      "pm.test(\"Response contains metadata array with valid structure\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an(\"array\");",
                      "    pm.expect(jsonData.length).to.be.greaterThan(0);",
                      "    if (jsonData.length > 0) {",
                      "        pm.expect(jsonData[0]).to.be.an(\"object\");",
                      "        pm.expect(Object.keys(jsonData[0]).length).to.be.greaterThan(0);",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "36bede28-eb02-45f8-bf3f-d0c242e6cd71"
                  }
                }
              ]
            },
            {
              "id": "2425e7fe-0331-4a42-afdd-1747cf41ee82",
              "name": "Get Metadata with Filters",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "type",
                      "value": "g"
                    },
                    {
                      "key": "f",
                      "value": "provinces,ruler,culture,religion,capital,province,religionGeneral"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9312b2a6-a432-4151-a45a-af1e2bab9882",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response contains filtered metadata\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.not.be.empty;",
                      "});"
                    ],
                    "_lastExecutionId": "dbebd260-6d41-467d-802d-cc1a88c85b0f"
                  }
                }
              ]
            },
            {
              "id": "0da3c9d7-8ab8-4e8f-8a22-4ec5cf656f36",
              "name": "Get Metadata with Type and End Parameters",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "type",
                      "value": "e"
                    },
                    {
                      "key": "end",
                      "value": "3000"
                    },
                    {
                      "key": "subtype",
                      "value": "ew"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2835733b-4850-4c4c-bc5c-114a7ffebc60",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "137efec3-c340-4d2f-b647-7f002a9d0254"
                  }
                }
              ]
            },
            {
              "id": "540a15b3-0066-48cf-9ab7-8a6571d8187c",
              "name": "Get Specific Metadata by ID",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "religion"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6513dc32-25f7-484f-96d3-95b99a871490",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response contains metadata object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('object');",
                      "});"
                    ],
                    "_lastExecutionId": "002002ca-3094-458c-a9df-0777869d69b6"
                  }
                }
              ]
            },
            {
              "id": "365897b7-f566-43ab-9802-495d8914a562",
              "name": "Get Linked Metadata",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "links",
                    "getLinked"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "source",
                      "value": "1:e_Falklands_War"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ebbc7c9c-6591-47f2-bf75-35ea73ceddad",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response contains map and media objects\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('map');",
                      "    pm.expect(jsonData).to.have.property('media');",
                      "});"
                    ],
                    "_lastExecutionId": "89025957-551f-4687-afc4-f5d732e4ea57"
                  }
                }
              ]
            },
            {
              "id": "4da9a310-ab75-4f60-8221-f14a2addeb4d",
              "name": "Create Metadata",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"_id\": \"test_metadata_item\",\n  \"name\": \"Test Metadata\",\n  \"type\": \"g\",\n  \"data\": {\n    \"description\": \"Test metadata item\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "faceea60-f1cf-47e1-81de-c6bf8ee09a57",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200, 201, or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 401]);",
                      "});",
                      "if (pm.response.code !== 401) {",
                      "    pm.test(\"Response contains created metadata with correct structure\", function () {",
                      "        var jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.not.be.empty;",
                      "        pm.expect(jsonData).to.be.an(\"object\");",
                      "        if (jsonData._id) {",
                      "            pm.globals.set(\"metadataId\", jsonData._id);",
                      "        }",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "6d206237-5ebb-4437-ab68-725cd1bfba26"
                  }
                }
              ]
            },
            {
              "id": "a3fc1106-762d-41ce-a296-4570ca3915e5",
              "name": "Update Metadata",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "test_metadata_item"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Updated Test Metadata\",\n  \"data\": {\n    \"description\": \"Updated test metadata item\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5cec13c3-ca3c-40a8-bdcd-231b1c59f3aa",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});",
                      "if (pm.response.code !== 401) {",
                      "    pm.test(\"Response contains updated metadata\", function () {",
                      "        var jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.not.be.empty;",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "f30a2852-9567-48f8-9045-91eed896cc18"
                  }
                }
              ]
            },
            {
              "id": "3094b267-8851-4216-99da-c5830af9591e",
              "name": "Update Single Metadata Field",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "culture",
                    "single"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\"subEntityId\": \"test_field\", \"nextBody\": [\"\", \"RGB(255,0,0)\"]}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "91d3c187-bd0f-4293-8c00-decc6c1ad3d7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});",
                      "if (pm.response.code === 200) {",
                      "    pm.test(\"Metadata single field updated successfully\", function () {",
                      "        pm.expect(pm.response.text()).to.include(\"successfully updated\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "ea74781f-17bb-4073-a81e-7d4d85ef25cc"
                  }
                }
              ]
            },
            {
              "id": "e7f1b6e1-a64b-423f-b19e-6b6efbae9df3",
              "name": "Add Metadata Link",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "culture",
                    "addLink"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\"linkedItemType1\": \"metadata\", \"linkedItemType2\": \"metadata\", \"linkedItemKey1\": \"culture\", \"linkedItemKey2\": \"religion\"}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "47af10bc-c5c1-46ed-bad3-c27e58de9732",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});",
                      "if (pm.response.code === 200) {",
                      "    pm.test(\"Metadata link added successfully\", function () {",
                      "        pm.expect(pm.response.text()).to.include(\"successfully updated\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "e8924c3a-1e3f-47fc-b88e-b4bc41cf0fb8"
                  }
                }
              ]
            },
            {
              "id": "1c834bd9-b48c-40ab-b335-c3b27c11f40a",
              "name": "Remove Metadata Link",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "culture",
                    "removeLink"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\"linkedItemType1\": \"metadata\", \"linkedItemType2\": \"metadata\", \"linkedItemKey1\": \"culture\", \"linkedItemKey2\": \"religion\"}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "92cfafca-1c13-4438-8d2d-5dc1777a5fc0",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});",
                      "if (pm.response.code === 200) {",
                      "    pm.test(\"Metadata link removed successfully\", function () {",
                      "        pm.expect(pm.response.text()).to.include(\"successfully updated\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "47ced928-c379-4558-9261-c1de9978839e"
                  }
                }
              ]
            },
            {
              "id": "16473151-4e10-4361-b850-56eb769e8375",
              "name": "Delete Metadata",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "test_metadata_item"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "31b55cb0-276c-40d7-a549-8b18d0f5f383",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});"
                    ],
                    "_lastExecutionId": "f79ad42a-755b-4290-81c3-3415440c60ec"
                  }
                }
              ]
            },
            {
              "id": "42b0e9d4-c595-4a53-931a-9d432fbbec55",
              "name": "Upvote Metadata",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "culture",
                    "upvote"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7e8d02a9-e558-48f8-a3b5-cad8afbdb5ad",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "279722b7-d397-40f9-a184-0223966fb78e"
                  }
                }
              ]
            },
            {
              "id": "0dd50556-f6cc-47db-a7c4-fbcd64137355",
              "name": "Downvote Metadata",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "culture",
                    "downvote"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e162af2e-4df5-4bf9-bbce-11360646df04",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "aaf71814-dadc-46eb-9629-80b99e69d078"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "8a015fca-830f-4fb2-b576-dc440ccd2c57",
          "length": 34,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "9042eb7a-5f7e-4884-baa0-70dc9dc1cc50",
          "scriptId": "47af10bc-c5c1-46ed-bad3-c27e58de9732",
          "execution": "e8924c3a-1e3f-47fc-b88e-b4bc41cf0fb8"
        }
      },
      {
        "error": {
          "errno": -61,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3001,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:3001",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:3001\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1637:16)",
          "checksum": "f958207822d918da82c40a9f858a19c2",
          "id": "c9b054c8-d107-4e87-b71b-df2bf9c50b21",
          "timestamp": 1758627604528,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1637,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "1c834bd9-b48c-40ab-b335-c3b27c11f40a",
          "name": "Remove Metadata Link",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3001",
              "path": [
                "v1",
                "metadata",
                "culture",
                "removeLink"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "953abd48-9b1a-44dd-a16d-f384826f083b",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:3001",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\"linkedItemType1\": \"metadata\", \"linkedItemType2\": \"metadata\", \"linkedItemKey1\": \"culture\", \"linkedItemKey2\": \"religion\"}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "92cfafca-1c13-4438-8d2d-5dc1777a5fc0",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200 or 401\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                  "});",
                  "if (pm.response.code === 200) {",
                  "    pm.test(\"Metadata link removed successfully\", function () {",
                  "        pm.expect(pm.response.text()).to.include(\"successfully updated\");",
                  "    });",
                  "}"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "cab896d4-f7f1-463e-b61c-5b817e54bf0c",
          "length": 34,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "5cd04471-6782-4e8a-82b0-fee6b6b03544"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200 or 401",
          "message": "expected undefined to be one of [ 200, 401 ]",
          "stack": "AssertionError: expected undefined to be one of [ 200, 401 ]\n   at Object.eval sandbox-script.js:1:14)",
          "checksum": "215125fb0c59902d7998c82548330410",
          "id": "2e002e6e-34c9-4900-a5f9-d87a5ce5ec11",
          "timestamp": 1758627604531,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 14,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "1c834bd9-b48c-40ab-b335-c3b27c11f40a",
          "name": "Remove Metadata Link",
          "request": {
            "url": {
              "path": [
                "v1",
                "metadata",
                "culture",
                "removeLink"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\"linkedItemType1\": \"metadata\", \"linkedItemType2\": \"metadata\", \"linkedItemKey1\": \"culture\", \"linkedItemKey2\": \"religion\"}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "92cfafca-1c13-4438-8d2d-5dc1777a5fc0",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200 or 401\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                  "});",
                  "if (pm.response.code === 200) {",
                  "    pm.test(\"Metadata link removed successfully\", function () {",
                  "        pm.expect(pm.response.text()).to.include(\"successfully updated\");",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "47ced928-c379-4558-9261-c1de9978839e"
              }
            }
          ]
        },
        "parent": {
          "id": "ad65dd3f-3640-4d73-bc99-466d11c37fd3",
          "name": "Metadata (Most Used - 96k requests)",
          "item": [
            {
              "id": "9be15e7b-1c5d-49a2-8a6c-453d061e41de",
              "name": "Get Metadata List",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    ""
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2815f8f7-635e-48fb-85c4-e72a4cd405c6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response time is acceptable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                      "});",
                      "pm.test(\"Response contains metadata array with valid structure\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an(\"array\");",
                      "    pm.expect(jsonData.length).to.be.greaterThan(0);",
                      "    if (jsonData.length > 0) {",
                      "        pm.expect(jsonData[0]).to.be.an(\"object\");",
                      "        pm.expect(Object.keys(jsonData[0]).length).to.be.greaterThan(0);",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "36bede28-eb02-45f8-bf3f-d0c242e6cd71"
                  }
                }
              ]
            },
            {
              "id": "2425e7fe-0331-4a42-afdd-1747cf41ee82",
              "name": "Get Metadata with Filters",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "type",
                      "value": "g"
                    },
                    {
                      "key": "f",
                      "value": "provinces,ruler,culture,religion,capital,province,religionGeneral"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9312b2a6-a432-4151-a45a-af1e2bab9882",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response contains filtered metadata\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.not.be.empty;",
                      "});"
                    ],
                    "_lastExecutionId": "dbebd260-6d41-467d-802d-cc1a88c85b0f"
                  }
                }
              ]
            },
            {
              "id": "0da3c9d7-8ab8-4e8f-8a22-4ec5cf656f36",
              "name": "Get Metadata with Type and End Parameters",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "type",
                      "value": "e"
                    },
                    {
                      "key": "end",
                      "value": "3000"
                    },
                    {
                      "key": "subtype",
                      "value": "ew"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2835733b-4850-4c4c-bc5c-114a7ffebc60",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "137efec3-c340-4d2f-b647-7f002a9d0254"
                  }
                }
              ]
            },
            {
              "id": "540a15b3-0066-48cf-9ab7-8a6571d8187c",
              "name": "Get Specific Metadata by ID",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "religion"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6513dc32-25f7-484f-96d3-95b99a871490",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response contains metadata object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('object');",
                      "});"
                    ],
                    "_lastExecutionId": "002002ca-3094-458c-a9df-0777869d69b6"
                  }
                }
              ]
            },
            {
              "id": "365897b7-f566-43ab-9802-495d8914a562",
              "name": "Get Linked Metadata",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "links",
                    "getLinked"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "source",
                      "value": "1:e_Falklands_War"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ebbc7c9c-6591-47f2-bf75-35ea73ceddad",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response contains map and media objects\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('map');",
                      "    pm.expect(jsonData).to.have.property('media');",
                      "});"
                    ],
                    "_lastExecutionId": "89025957-551f-4687-afc4-f5d732e4ea57"
                  }
                }
              ]
            },
            {
              "id": "4da9a310-ab75-4f60-8221-f14a2addeb4d",
              "name": "Create Metadata",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"_id\": \"test_metadata_item\",\n  \"name\": \"Test Metadata\",\n  \"type\": \"g\",\n  \"data\": {\n    \"description\": \"Test metadata item\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "faceea60-f1cf-47e1-81de-c6bf8ee09a57",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200, 201, or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 401]);",
                      "});",
                      "if (pm.response.code !== 401) {",
                      "    pm.test(\"Response contains created metadata with correct structure\", function () {",
                      "        var jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.not.be.empty;",
                      "        pm.expect(jsonData).to.be.an(\"object\");",
                      "        if (jsonData._id) {",
                      "            pm.globals.set(\"metadataId\", jsonData._id);",
                      "        }",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "6d206237-5ebb-4437-ab68-725cd1bfba26"
                  }
                }
              ]
            },
            {
              "id": "a3fc1106-762d-41ce-a296-4570ca3915e5",
              "name": "Update Metadata",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "test_metadata_item"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Updated Test Metadata\",\n  \"data\": {\n    \"description\": \"Updated test metadata item\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5cec13c3-ca3c-40a8-bdcd-231b1c59f3aa",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});",
                      "if (pm.response.code !== 401) {",
                      "    pm.test(\"Response contains updated metadata\", function () {",
                      "        var jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.not.be.empty;",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "f30a2852-9567-48f8-9045-91eed896cc18"
                  }
                }
              ]
            },
            {
              "id": "3094b267-8851-4216-99da-c5830af9591e",
              "name": "Update Single Metadata Field",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "culture",
                    "single"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\"subEntityId\": \"test_field\", \"nextBody\": [\"\", \"RGB(255,0,0)\"]}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "91d3c187-bd0f-4293-8c00-decc6c1ad3d7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});",
                      "if (pm.response.code === 200) {",
                      "    pm.test(\"Metadata single field updated successfully\", function () {",
                      "        pm.expect(pm.response.text()).to.include(\"successfully updated\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "ea74781f-17bb-4073-a81e-7d4d85ef25cc"
                  }
                }
              ]
            },
            {
              "id": "e7f1b6e1-a64b-423f-b19e-6b6efbae9df3",
              "name": "Add Metadata Link",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "culture",
                    "addLink"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\"linkedItemType1\": \"metadata\", \"linkedItemType2\": \"metadata\", \"linkedItemKey1\": \"culture\", \"linkedItemKey2\": \"religion\"}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "47af10bc-c5c1-46ed-bad3-c27e58de9732",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});",
                      "if (pm.response.code === 200) {",
                      "    pm.test(\"Metadata link added successfully\", function () {",
                      "        pm.expect(pm.response.text()).to.include(\"successfully updated\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "e8924c3a-1e3f-47fc-b88e-b4bc41cf0fb8"
                  }
                }
              ]
            },
            {
              "id": "1c834bd9-b48c-40ab-b335-c3b27c11f40a",
              "name": "Remove Metadata Link",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "culture",
                    "removeLink"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\"linkedItemType1\": \"metadata\", \"linkedItemType2\": \"metadata\", \"linkedItemKey1\": \"culture\", \"linkedItemKey2\": \"religion\"}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "92cfafca-1c13-4438-8d2d-5dc1777a5fc0",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});",
                      "if (pm.response.code === 200) {",
                      "    pm.test(\"Metadata link removed successfully\", function () {",
                      "        pm.expect(pm.response.text()).to.include(\"successfully updated\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "47ced928-c379-4558-9261-c1de9978839e"
                  }
                }
              ]
            },
            {
              "id": "16473151-4e10-4361-b850-56eb769e8375",
              "name": "Delete Metadata",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "test_metadata_item"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "31b55cb0-276c-40d7-a549-8b18d0f5f383",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});"
                    ],
                    "_lastExecutionId": "f79ad42a-755b-4290-81c3-3415440c60ec"
                  }
                }
              ]
            },
            {
              "id": "42b0e9d4-c595-4a53-931a-9d432fbbec55",
              "name": "Upvote Metadata",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "culture",
                    "upvote"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7e8d02a9-e558-48f8-a3b5-cad8afbdb5ad",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "279722b7-d397-40f9-a184-0223966fb78e"
                  }
                }
              ]
            },
            {
              "id": "0dd50556-f6cc-47db-a7c4-fbcd64137355",
              "name": "Downvote Metadata",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "culture",
                    "downvote"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e162af2e-4df5-4bf9-bbce-11360646df04",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "aaf71814-dadc-46eb-9629-80b99e69d078"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "cab896d4-f7f1-463e-b61c-5b817e54bf0c",
          "length": 34,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "5cd04471-6782-4e8a-82b0-fee6b6b03544",
          "scriptId": "92cfafca-1c13-4438-8d2d-5dc1777a5fc0",
          "execution": "47ced928-c379-4558-9261-c1de9978839e"
        }
      },
      {
        "error": {
          "errno": -61,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3001,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:3001",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:3001\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1637:16)",
          "checksum": "f958207822d918da82c40a9f858a19c2",
          "id": "bdfe36cf-b26d-4988-906d-6bb44e96ce21",
          "timestamp": 1758627604540,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1637,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "16473151-4e10-4361-b850-56eb769e8375",
          "name": "Delete Metadata",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3001",
              "path": [
                "v1",
                "metadata",
                "test_metadata_item"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "d5b8c6c9-cc94-4e6c-bf6a-fd338d901f01",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:3001",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "31b55cb0-276c-40d7-a549-8b18d0f5f383",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200 or 401\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "584df994-528c-4cbc-a70a-cc9fd24cf2c6",
          "length": 34,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "d4cb7fa9-7d6a-4f9e-8ae7-cfef4733efae"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200 or 401",
          "message": "expected undefined to be one of [ 200, 401 ]",
          "stack": "AssertionError: expected undefined to be one of [ 200, 401 ]\n   at Object.eval sandbox-script.js:1:15)",
          "checksum": "71eba06e4f8fa088179c3898dd4d4e15",
          "id": "7b3f402a-c2f0-4ced-ba1b-734548a4c977",
          "timestamp": 1758627604543,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 15,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "16473151-4e10-4361-b850-56eb769e8375",
          "name": "Delete Metadata",
          "request": {
            "url": {
              "path": [
                "v1",
                "metadata",
                "test_metadata_item"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "31b55cb0-276c-40d7-a549-8b18d0f5f383",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200 or 401\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                  "});"
                ],
                "_lastExecutionId": "f79ad42a-755b-4290-81c3-3415440c60ec"
              }
            }
          ]
        },
        "parent": {
          "id": "ad65dd3f-3640-4d73-bc99-466d11c37fd3",
          "name": "Metadata (Most Used - 96k requests)",
          "item": [
            {
              "id": "9be15e7b-1c5d-49a2-8a6c-453d061e41de",
              "name": "Get Metadata List",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    ""
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2815f8f7-635e-48fb-85c4-e72a4cd405c6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response time is acceptable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                      "});",
                      "pm.test(\"Response contains metadata array with valid structure\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an(\"array\");",
                      "    pm.expect(jsonData.length).to.be.greaterThan(0);",
                      "    if (jsonData.length > 0) {",
                      "        pm.expect(jsonData[0]).to.be.an(\"object\");",
                      "        pm.expect(Object.keys(jsonData[0]).length).to.be.greaterThan(0);",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "36bede28-eb02-45f8-bf3f-d0c242e6cd71"
                  }
                }
              ]
            },
            {
              "id": "2425e7fe-0331-4a42-afdd-1747cf41ee82",
              "name": "Get Metadata with Filters",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "type",
                      "value": "g"
                    },
                    {
                      "key": "f",
                      "value": "provinces,ruler,culture,religion,capital,province,religionGeneral"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9312b2a6-a432-4151-a45a-af1e2bab9882",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response contains filtered metadata\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.not.be.empty;",
                      "});"
                    ],
                    "_lastExecutionId": "dbebd260-6d41-467d-802d-cc1a88c85b0f"
                  }
                }
              ]
            },
            {
              "id": "0da3c9d7-8ab8-4e8f-8a22-4ec5cf656f36",
              "name": "Get Metadata with Type and End Parameters",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "type",
                      "value": "e"
                    },
                    {
                      "key": "end",
                      "value": "3000"
                    },
                    {
                      "key": "subtype",
                      "value": "ew"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2835733b-4850-4c4c-bc5c-114a7ffebc60",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "137efec3-c340-4d2f-b647-7f002a9d0254"
                  }
                }
              ]
            },
            {
              "id": "540a15b3-0066-48cf-9ab7-8a6571d8187c",
              "name": "Get Specific Metadata by ID",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "religion"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6513dc32-25f7-484f-96d3-95b99a871490",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response contains metadata object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('object');",
                      "});"
                    ],
                    "_lastExecutionId": "002002ca-3094-458c-a9df-0777869d69b6"
                  }
                }
              ]
            },
            {
              "id": "365897b7-f566-43ab-9802-495d8914a562",
              "name": "Get Linked Metadata",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "links",
                    "getLinked"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "source",
                      "value": "1:e_Falklands_War"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ebbc7c9c-6591-47f2-bf75-35ea73ceddad",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response contains map and media objects\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('map');",
                      "    pm.expect(jsonData).to.have.property('media');",
                      "});"
                    ],
                    "_lastExecutionId": "89025957-551f-4687-afc4-f5d732e4ea57"
                  }
                }
              ]
            },
            {
              "id": "4da9a310-ab75-4f60-8221-f14a2addeb4d",
              "name": "Create Metadata",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"_id\": \"test_metadata_item\",\n  \"name\": \"Test Metadata\",\n  \"type\": \"g\",\n  \"data\": {\n    \"description\": \"Test metadata item\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "faceea60-f1cf-47e1-81de-c6bf8ee09a57",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200, 201, or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 401]);",
                      "});",
                      "if (pm.response.code !== 401) {",
                      "    pm.test(\"Response contains created metadata with correct structure\", function () {",
                      "        var jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.not.be.empty;",
                      "        pm.expect(jsonData).to.be.an(\"object\");",
                      "        if (jsonData._id) {",
                      "            pm.globals.set(\"metadataId\", jsonData._id);",
                      "        }",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "6d206237-5ebb-4437-ab68-725cd1bfba26"
                  }
                }
              ]
            },
            {
              "id": "a3fc1106-762d-41ce-a296-4570ca3915e5",
              "name": "Update Metadata",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "test_metadata_item"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Updated Test Metadata\",\n  \"data\": {\n    \"description\": \"Updated test metadata item\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5cec13c3-ca3c-40a8-bdcd-231b1c59f3aa",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});",
                      "if (pm.response.code !== 401) {",
                      "    pm.test(\"Response contains updated metadata\", function () {",
                      "        var jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.not.be.empty;",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "f30a2852-9567-48f8-9045-91eed896cc18"
                  }
                }
              ]
            },
            {
              "id": "3094b267-8851-4216-99da-c5830af9591e",
              "name": "Update Single Metadata Field",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "culture",
                    "single"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\"subEntityId\": \"test_field\", \"nextBody\": [\"\", \"RGB(255,0,0)\"]}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "91d3c187-bd0f-4293-8c00-decc6c1ad3d7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});",
                      "if (pm.response.code === 200) {",
                      "    pm.test(\"Metadata single field updated successfully\", function () {",
                      "        pm.expect(pm.response.text()).to.include(\"successfully updated\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "ea74781f-17bb-4073-a81e-7d4d85ef25cc"
                  }
                }
              ]
            },
            {
              "id": "e7f1b6e1-a64b-423f-b19e-6b6efbae9df3",
              "name": "Add Metadata Link",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "culture",
                    "addLink"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\"linkedItemType1\": \"metadata\", \"linkedItemType2\": \"metadata\", \"linkedItemKey1\": \"culture\", \"linkedItemKey2\": \"religion\"}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "47af10bc-c5c1-46ed-bad3-c27e58de9732",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});",
                      "if (pm.response.code === 200) {",
                      "    pm.test(\"Metadata link added successfully\", function () {",
                      "        pm.expect(pm.response.text()).to.include(\"successfully updated\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "e8924c3a-1e3f-47fc-b88e-b4bc41cf0fb8"
                  }
                }
              ]
            },
            {
              "id": "1c834bd9-b48c-40ab-b335-c3b27c11f40a",
              "name": "Remove Metadata Link",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "culture",
                    "removeLink"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\"linkedItemType1\": \"metadata\", \"linkedItemType2\": \"metadata\", \"linkedItemKey1\": \"culture\", \"linkedItemKey2\": \"religion\"}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "92cfafca-1c13-4438-8d2d-5dc1777a5fc0",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});",
                      "if (pm.response.code === 200) {",
                      "    pm.test(\"Metadata link removed successfully\", function () {",
                      "        pm.expect(pm.response.text()).to.include(\"successfully updated\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "47ced928-c379-4558-9261-c1de9978839e"
                  }
                }
              ]
            },
            {
              "id": "16473151-4e10-4361-b850-56eb769e8375",
              "name": "Delete Metadata",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "test_metadata_item"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "31b55cb0-276c-40d7-a549-8b18d0f5f383",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});"
                    ],
                    "_lastExecutionId": "f79ad42a-755b-4290-81c3-3415440c60ec"
                  }
                }
              ]
            },
            {
              "id": "42b0e9d4-c595-4a53-931a-9d432fbbec55",
              "name": "Upvote Metadata",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "culture",
                    "upvote"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7e8d02a9-e558-48f8-a3b5-cad8afbdb5ad",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "279722b7-d397-40f9-a184-0223966fb78e"
                  }
                }
              ]
            },
            {
              "id": "0dd50556-f6cc-47db-a7c4-fbcd64137355",
              "name": "Downvote Metadata",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "culture",
                    "downvote"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e162af2e-4df5-4bf9-bbce-11360646df04",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "aaf71814-dadc-46eb-9629-80b99e69d078"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "584df994-528c-4cbc-a70a-cc9fd24cf2c6",
          "length": 34,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "d4cb7fa9-7d6a-4f9e-8ae7-cfef4733efae",
          "scriptId": "31b55cb0-276c-40d7-a549-8b18d0f5f383",
          "execution": "f79ad42a-755b-4290-81c3-3415440c60ec"
        }
      },
      {
        "error": {
          "errno": -61,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3001,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:3001",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:3001\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1637:16)",
          "checksum": "f958207822d918da82c40a9f858a19c2",
          "id": "d7db5bc1-f536-4090-a9d5-d82057c9a7d2",
          "timestamp": 1758627604550,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1637,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "42b0e9d4-c595-4a53-931a-9d432fbbec55",
          "name": "Upvote Metadata",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3001",
              "path": [
                "v1",
                "metadata",
                "culture",
                "upvote"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "63872bbe-7e47-4ce3-8fb5-32b976fd0bd0",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:3001",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "PUT"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7e8d02a9-e558-48f8-a3b5-cad8afbdb5ad",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "aee54e8a-926b-49f1-b9cb-0a1335d036b7",
          "length": 34,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "6ea19ddb-d8b1-4eb1-b4f9-166c947ff5e0"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:16)",
          "checksum": "78f15cdcb0025728a6e8a85594916efa",
          "id": "f36ba639-4fb4-4a4d-8df1-33a2c26b91ac",
          "timestamp": 1758627604551,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "42b0e9d4-c595-4a53-931a-9d432fbbec55",
          "name": "Upvote Metadata",
          "request": {
            "url": {
              "path": [
                "v1",
                "metadata",
                "culture",
                "upvote"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "method": "PUT"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "7e8d02a9-e558-48f8-a3b5-cad8afbdb5ad",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "_lastExecutionId": "279722b7-d397-40f9-a184-0223966fb78e"
              }
            }
          ]
        },
        "parent": {
          "id": "ad65dd3f-3640-4d73-bc99-466d11c37fd3",
          "name": "Metadata (Most Used - 96k requests)",
          "item": [
            {
              "id": "9be15e7b-1c5d-49a2-8a6c-453d061e41de",
              "name": "Get Metadata List",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    ""
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2815f8f7-635e-48fb-85c4-e72a4cd405c6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response time is acceptable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                      "});",
                      "pm.test(\"Response contains metadata array with valid structure\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an(\"array\");",
                      "    pm.expect(jsonData.length).to.be.greaterThan(0);",
                      "    if (jsonData.length > 0) {",
                      "        pm.expect(jsonData[0]).to.be.an(\"object\");",
                      "        pm.expect(Object.keys(jsonData[0]).length).to.be.greaterThan(0);",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "36bede28-eb02-45f8-bf3f-d0c242e6cd71"
                  }
                }
              ]
            },
            {
              "id": "2425e7fe-0331-4a42-afdd-1747cf41ee82",
              "name": "Get Metadata with Filters",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "type",
                      "value": "g"
                    },
                    {
                      "key": "f",
                      "value": "provinces,ruler,culture,religion,capital,province,religionGeneral"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9312b2a6-a432-4151-a45a-af1e2bab9882",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response contains filtered metadata\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.not.be.empty;",
                      "});"
                    ],
                    "_lastExecutionId": "dbebd260-6d41-467d-802d-cc1a88c85b0f"
                  }
                }
              ]
            },
            {
              "id": "0da3c9d7-8ab8-4e8f-8a22-4ec5cf656f36",
              "name": "Get Metadata with Type and End Parameters",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "type",
                      "value": "e"
                    },
                    {
                      "key": "end",
                      "value": "3000"
                    },
                    {
                      "key": "subtype",
                      "value": "ew"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2835733b-4850-4c4c-bc5c-114a7ffebc60",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "137efec3-c340-4d2f-b647-7f002a9d0254"
                  }
                }
              ]
            },
            {
              "id": "540a15b3-0066-48cf-9ab7-8a6571d8187c",
              "name": "Get Specific Metadata by ID",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "religion"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6513dc32-25f7-484f-96d3-95b99a871490",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response contains metadata object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('object');",
                      "});"
                    ],
                    "_lastExecutionId": "002002ca-3094-458c-a9df-0777869d69b6"
                  }
                }
              ]
            },
            {
              "id": "365897b7-f566-43ab-9802-495d8914a562",
              "name": "Get Linked Metadata",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "links",
                    "getLinked"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "source",
                      "value": "1:e_Falklands_War"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ebbc7c9c-6591-47f2-bf75-35ea73ceddad",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response contains map and media objects\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('map');",
                      "    pm.expect(jsonData).to.have.property('media');",
                      "});"
                    ],
                    "_lastExecutionId": "89025957-551f-4687-afc4-f5d732e4ea57"
                  }
                }
              ]
            },
            {
              "id": "4da9a310-ab75-4f60-8221-f14a2addeb4d",
              "name": "Create Metadata",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"_id\": \"test_metadata_item\",\n  \"name\": \"Test Metadata\",\n  \"type\": \"g\",\n  \"data\": {\n    \"description\": \"Test metadata item\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "faceea60-f1cf-47e1-81de-c6bf8ee09a57",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200, 201, or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 401]);",
                      "});",
                      "if (pm.response.code !== 401) {",
                      "    pm.test(\"Response contains created metadata with correct structure\", function () {",
                      "        var jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.not.be.empty;",
                      "        pm.expect(jsonData).to.be.an(\"object\");",
                      "        if (jsonData._id) {",
                      "            pm.globals.set(\"metadataId\", jsonData._id);",
                      "        }",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "6d206237-5ebb-4437-ab68-725cd1bfba26"
                  }
                }
              ]
            },
            {
              "id": "a3fc1106-762d-41ce-a296-4570ca3915e5",
              "name": "Update Metadata",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "test_metadata_item"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Updated Test Metadata\",\n  \"data\": {\n    \"description\": \"Updated test metadata item\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5cec13c3-ca3c-40a8-bdcd-231b1c59f3aa",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});",
                      "if (pm.response.code !== 401) {",
                      "    pm.test(\"Response contains updated metadata\", function () {",
                      "        var jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.not.be.empty;",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "f30a2852-9567-48f8-9045-91eed896cc18"
                  }
                }
              ]
            },
            {
              "id": "3094b267-8851-4216-99da-c5830af9591e",
              "name": "Update Single Metadata Field",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "culture",
                    "single"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\"subEntityId\": \"test_field\", \"nextBody\": [\"\", \"RGB(255,0,0)\"]}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "91d3c187-bd0f-4293-8c00-decc6c1ad3d7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});",
                      "if (pm.response.code === 200) {",
                      "    pm.test(\"Metadata single field updated successfully\", function () {",
                      "        pm.expect(pm.response.text()).to.include(\"successfully updated\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "ea74781f-17bb-4073-a81e-7d4d85ef25cc"
                  }
                }
              ]
            },
            {
              "id": "e7f1b6e1-a64b-423f-b19e-6b6efbae9df3",
              "name": "Add Metadata Link",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "culture",
                    "addLink"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\"linkedItemType1\": \"metadata\", \"linkedItemType2\": \"metadata\", \"linkedItemKey1\": \"culture\", \"linkedItemKey2\": \"religion\"}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "47af10bc-c5c1-46ed-bad3-c27e58de9732",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});",
                      "if (pm.response.code === 200) {",
                      "    pm.test(\"Metadata link added successfully\", function () {",
                      "        pm.expect(pm.response.text()).to.include(\"successfully updated\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "e8924c3a-1e3f-47fc-b88e-b4bc41cf0fb8"
                  }
                }
              ]
            },
            {
              "id": "1c834bd9-b48c-40ab-b335-c3b27c11f40a",
              "name": "Remove Metadata Link",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "culture",
                    "removeLink"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\"linkedItemType1\": \"metadata\", \"linkedItemType2\": \"metadata\", \"linkedItemKey1\": \"culture\", \"linkedItemKey2\": \"religion\"}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "92cfafca-1c13-4438-8d2d-5dc1777a5fc0",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});",
                      "if (pm.response.code === 200) {",
                      "    pm.test(\"Metadata link removed successfully\", function () {",
                      "        pm.expect(pm.response.text()).to.include(\"successfully updated\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "47ced928-c379-4558-9261-c1de9978839e"
                  }
                }
              ]
            },
            {
              "id": "16473151-4e10-4361-b850-56eb769e8375",
              "name": "Delete Metadata",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "test_metadata_item"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "31b55cb0-276c-40d7-a549-8b18d0f5f383",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});"
                    ],
                    "_lastExecutionId": "f79ad42a-755b-4290-81c3-3415440c60ec"
                  }
                }
              ]
            },
            {
              "id": "42b0e9d4-c595-4a53-931a-9d432fbbec55",
              "name": "Upvote Metadata",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "culture",
                    "upvote"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7e8d02a9-e558-48f8-a3b5-cad8afbdb5ad",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "279722b7-d397-40f9-a184-0223966fb78e"
                  }
                }
              ]
            },
            {
              "id": "0dd50556-f6cc-47db-a7c4-fbcd64137355",
              "name": "Downvote Metadata",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "culture",
                    "downvote"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e162af2e-4df5-4bf9-bbce-11360646df04",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "aaf71814-dadc-46eb-9629-80b99e69d078"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "aee54e8a-926b-49f1-b9cb-0a1335d036b7",
          "length": 34,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "6ea19ddb-d8b1-4eb1-b4f9-166c947ff5e0",
          "scriptId": "7e8d02a9-e558-48f8-a3b5-cad8afbdb5ad",
          "execution": "279722b7-d397-40f9-a184-0223966fb78e"
        }
      },
      {
        "error": {
          "errno": -61,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3001,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:3001",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:3001\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1637:16)",
          "checksum": "f958207822d918da82c40a9f858a19c2",
          "id": "27044009-d377-41f1-938b-7f0de63c90e7",
          "timestamp": 1758627604560,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1637,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "0dd50556-f6cc-47db-a7c4-fbcd64137355",
          "name": "Downvote Metadata",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3001",
              "path": [
                "v1",
                "metadata",
                "culture",
                "downvote"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "8fef445b-e3c8-4832-8b2d-105ed40993e4",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:3001",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "PUT"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e162af2e-4df5-4bf9-bbce-11360646df04",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "303402e1-fa2f-4a12-9fe2-ce6aa9e36b8b",
          "length": 34,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "c7e9109e-5d5f-4317-8567-de4fa931d5f9"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:17)",
          "checksum": "56f9bc1601f1a2a3ad9a4d9011bedfd8",
          "id": "786b2ea4-a416-4e38-a9cf-e05c58872d52",
          "timestamp": 1758627604562,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 17,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "0dd50556-f6cc-47db-a7c4-fbcd64137355",
          "name": "Downvote Metadata",
          "request": {
            "url": {
              "path": [
                "v1",
                "metadata",
                "culture",
                "downvote"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "method": "PUT"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e162af2e-4df5-4bf9-bbce-11360646df04",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "_lastExecutionId": "aaf71814-dadc-46eb-9629-80b99e69d078"
              }
            }
          ]
        },
        "parent": {
          "id": "ad65dd3f-3640-4d73-bc99-466d11c37fd3",
          "name": "Metadata (Most Used - 96k requests)",
          "item": [
            {
              "id": "9be15e7b-1c5d-49a2-8a6c-453d061e41de",
              "name": "Get Metadata List",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    ""
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2815f8f7-635e-48fb-85c4-e72a4cd405c6",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response time is acceptable\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(2000);",
                      "});",
                      "pm.test(\"Response contains metadata array with valid structure\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an(\"array\");",
                      "    pm.expect(jsonData.length).to.be.greaterThan(0);",
                      "    if (jsonData.length > 0) {",
                      "        pm.expect(jsonData[0]).to.be.an(\"object\");",
                      "        pm.expect(Object.keys(jsonData[0]).length).to.be.greaterThan(0);",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "36bede28-eb02-45f8-bf3f-d0c242e6cd71"
                  }
                }
              ]
            },
            {
              "id": "2425e7fe-0331-4a42-afdd-1747cf41ee82",
              "name": "Get Metadata with Filters",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "type",
                      "value": "g"
                    },
                    {
                      "key": "f",
                      "value": "provinces,ruler,culture,religion,capital,province,religionGeneral"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "9312b2a6-a432-4151-a45a-af1e2bab9882",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response contains filtered metadata\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.not.be.empty;",
                      "});"
                    ],
                    "_lastExecutionId": "dbebd260-6d41-467d-802d-cc1a88c85b0f"
                  }
                }
              ]
            },
            {
              "id": "0da3c9d7-8ab8-4e8f-8a22-4ec5cf656f36",
              "name": "Get Metadata with Type and End Parameters",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "type",
                      "value": "e"
                    },
                    {
                      "key": "end",
                      "value": "3000"
                    },
                    {
                      "key": "subtype",
                      "value": "ew"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "2835733b-4850-4c4c-bc5c-114a7ffebc60",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "137efec3-c340-4d2f-b647-7f002a9d0254"
                  }
                }
              ]
            },
            {
              "id": "540a15b3-0066-48cf-9ab7-8a6571d8187c",
              "name": "Get Specific Metadata by ID",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "religion"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6513dc32-25f7-484f-96d3-95b99a871490",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response contains metadata object\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('object');",
                      "});"
                    ],
                    "_lastExecutionId": "002002ca-3094-458c-a9df-0777869d69b6"
                  }
                }
              ]
            },
            {
              "id": "365897b7-f566-43ab-9802-495d8914a562",
              "name": "Get Linked Metadata",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "links",
                    "getLinked"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "source",
                      "value": "1:e_Falklands_War"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ebbc7c9c-6591-47f2-bf75-35ea73ceddad",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response contains map and media objects\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('map');",
                      "    pm.expect(jsonData).to.have.property('media');",
                      "});"
                    ],
                    "_lastExecutionId": "89025957-551f-4687-afc4-f5d732e4ea57"
                  }
                }
              ]
            },
            {
              "id": "4da9a310-ab75-4f60-8221-f14a2addeb4d",
              "name": "Create Metadata",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"_id\": \"test_metadata_item\",\n  \"name\": \"Test Metadata\",\n  \"type\": \"g\",\n  \"data\": {\n    \"description\": \"Test metadata item\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "faceea60-f1cf-47e1-81de-c6bf8ee09a57",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200, 201, or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 401]);",
                      "});",
                      "if (pm.response.code !== 401) {",
                      "    pm.test(\"Response contains created metadata with correct structure\", function () {",
                      "        var jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.not.be.empty;",
                      "        pm.expect(jsonData).to.be.an(\"object\");",
                      "        if (jsonData._id) {",
                      "            pm.globals.set(\"metadataId\", jsonData._id);",
                      "        }",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "6d206237-5ebb-4437-ab68-725cd1bfba26"
                  }
                }
              ]
            },
            {
              "id": "a3fc1106-762d-41ce-a296-4570ca3915e5",
              "name": "Update Metadata",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "test_metadata_item"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Updated Test Metadata\",\n  \"data\": {\n    \"description\": \"Updated test metadata item\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "5cec13c3-ca3c-40a8-bdcd-231b1c59f3aa",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});",
                      "if (pm.response.code !== 401) {",
                      "    pm.test(\"Response contains updated metadata\", function () {",
                      "        var jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.not.be.empty;",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "f30a2852-9567-48f8-9045-91eed896cc18"
                  }
                }
              ]
            },
            {
              "id": "3094b267-8851-4216-99da-c5830af9591e",
              "name": "Update Single Metadata Field",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "culture",
                    "single"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\"subEntityId\": \"test_field\", \"nextBody\": [\"\", \"RGB(255,0,0)\"]}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "91d3c187-bd0f-4293-8c00-decc6c1ad3d7",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});",
                      "if (pm.response.code === 200) {",
                      "    pm.test(\"Metadata single field updated successfully\", function () {",
                      "        pm.expect(pm.response.text()).to.include(\"successfully updated\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "ea74781f-17bb-4073-a81e-7d4d85ef25cc"
                  }
                }
              ]
            },
            {
              "id": "e7f1b6e1-a64b-423f-b19e-6b6efbae9df3",
              "name": "Add Metadata Link",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "culture",
                    "addLink"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\"linkedItemType1\": \"metadata\", \"linkedItemType2\": \"metadata\", \"linkedItemKey1\": \"culture\", \"linkedItemKey2\": \"religion\"}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "47af10bc-c5c1-46ed-bad3-c27e58de9732",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});",
                      "if (pm.response.code === 200) {",
                      "    pm.test(\"Metadata link added successfully\", function () {",
                      "        pm.expect(pm.response.text()).to.include(\"successfully updated\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "e8924c3a-1e3f-47fc-b88e-b4bc41cf0fb8"
                  }
                }
              ]
            },
            {
              "id": "1c834bd9-b48c-40ab-b335-c3b27c11f40a",
              "name": "Remove Metadata Link",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "culture",
                    "removeLink"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\"linkedItemType1\": \"metadata\", \"linkedItemType2\": \"metadata\", \"linkedItemKey1\": \"culture\", \"linkedItemKey2\": \"religion\"}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "92cfafca-1c13-4438-8d2d-5dc1777a5fc0",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});",
                      "if (pm.response.code === 200) {",
                      "    pm.test(\"Metadata link removed successfully\", function () {",
                      "        pm.expect(pm.response.text()).to.include(\"successfully updated\");",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "47ced928-c379-4558-9261-c1de9978839e"
                  }
                }
              ]
            },
            {
              "id": "16473151-4e10-4361-b850-56eb769e8375",
              "name": "Delete Metadata",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "test_metadata_item"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "31b55cb0-276c-40d7-a549-8b18d0f5f383",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});"
                    ],
                    "_lastExecutionId": "f79ad42a-755b-4290-81c3-3415440c60ec"
                  }
                }
              ]
            },
            {
              "id": "42b0e9d4-c595-4a53-931a-9d432fbbec55",
              "name": "Upvote Metadata",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "culture",
                    "upvote"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "7e8d02a9-e558-48f8-a3b5-cad8afbdb5ad",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "279722b7-d397-40f9-a184-0223966fb78e"
                  }
                }
              ]
            },
            {
              "id": "0dd50556-f6cc-47db-a7c4-fbcd64137355",
              "name": "Downvote Metadata",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "metadata",
                    "culture",
                    "downvote"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e162af2e-4df5-4bf9-bbce-11360646df04",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "aaf71814-dadc-46eb-9629-80b99e69d078"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "303402e1-fa2f-4a12-9fe2-ce6aa9e36b8b",
          "length": 34,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "c7e9109e-5d5f-4317-8567-de4fa931d5f9",
          "scriptId": "e162af2e-4df5-4bf9-bbce-11360646df04",
          "execution": "aaf71814-dadc-46eb-9629-80b99e69d078"
        }
      },
      {
        "error": {
          "errno": -61,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3001,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:3001",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:3001\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1637:16)",
          "checksum": "f958207822d918da82c40a9f858a19c2",
          "id": "d22c8d5e-b0dc-4320-bca1-8ef67583403a",
          "timestamp": 1758627604570,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1637,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "dfff1a6f-69ea-400e-b5cd-c1960322f443",
          "name": "Get Single Marker",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3001",
              "path": [
                "v1",
                "markers",
                ""
              ],
              "host": [
                "localhost"
              ],
              "query": [
                {
                  "key": "count",
                  "value": "1"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "16b7f798-f70f-4dbc-a67c-d44d440d73b6",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:3001",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "95d1a2fb-f815-4579-9e8b-9ce59ed14b6d",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Response contains marker data\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "9f5ef2cc-0309-4ed3-a08e-15fcf1eaf3af",
          "length": 34,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "fab3f77f-42bc-43b2-adcb-4a288269c42c"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:18)",
          "checksum": "7fa3e03ae8bb74cdfa3985bf0bc654de",
          "id": "efa208b5-42b5-4b23-bdda-57298fb72c96",
          "timestamp": 1758627604573,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 18,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "dfff1a6f-69ea-400e-b5cd-c1960322f443",
          "name": "Get Single Marker",
          "request": {
            "url": {
              "path": [
                "v1",
                "markers",
                ""
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "count",
                  "value": "1"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "95d1a2fb-f815-4579-9e8b-9ce59ed14b6d",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Response contains marker data\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});"
                ],
                "_lastExecutionId": "5989902e-ef84-4a0e-af75-22088a515bd5"
              }
            }
          ]
        },
        "parent": {
          "id": "fcdf765d-0019-4744-8ca2-fe21a58b0ca6",
          "name": "Markers (2nd Most Used - 33k requests)",
          "item": [
            {
              "id": "dfff1a6f-69ea-400e-b5cd-c1960322f443",
              "name": "Get Single Marker",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "markers",
                    ""
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "count",
                      "value": "1"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "95d1a2fb-f815-4579-9e8b-9ce59ed14b6d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response contains marker data\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "5989902e-ef84-4a0e-af75-22088a515bd5"
                  }
                }
              ]
            },
            {
              "id": "6c8c604a-c3d2-46e0-9f4f-034e24405740",
              "name": "Get Markers with Types and Count",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "markers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "types",
                      "value": "a,ar,at,b,c,ca,cp,e,m,op,p,r,s,si"
                    },
                    {
                      "key": "year",
                      "value": "714"
                    },
                    {
                      "key": "count",
                      "value": "3000"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "15ebf48d-fd1c-4590-bdbb-7e3cdac21ce5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response time is acceptable for large dataset\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});",
                      "pm.test(\"Response contains markers with valid structure\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an(\"array\");",
                      "    pm.expect(jsonData.length).to.be.greaterThan(0);",
                      "    if (jsonData.length > 0) {",
                      "        pm.expect(jsonData[0]).to.have.property(\"_id\");",
                      "        pm.expect(jsonData[0]).to.have.property(\"name\");",
                      "        pm.expect(jsonData[0]).to.have.property(\"coo\");",
                      "        if (jsonData[0].coo && jsonData[0].coo.length === 2) {",
                      "            pm.expect(jsonData[0].coo[0]).to.be.within(-90, 90);",
                      "            pm.expect(jsonData[0].coo[1]).to.be.within(-180, 180);",
                      "        }",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "62d6a0ec-bbf9-4d82-a5fa-9fbe8b54d179"
                  }
                }
              ]
            },
            {
              "id": "99a2b0e6-ac55-4337-8ab9-dc9f858c5c79",
              "name": "Get Limited Markers",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "markers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "types",
                      "value": "a,ar,at,b,c,ca,cp,e,m,op,p,r,s,si"
                    },
                    {
                      "key": "year",
                      "value": "1945"
                    },
                    {
                      "key": "count",
                      "value": "100"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "04d34445-0ac5-449d-ad3a-5f2b1fcb097b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response contains exactly 100 or fewer markers\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "    pm.expect(jsonData.length).to.be.at.most(100);",
                      "});"
                    ],
                    "_lastExecutionId": "ebf70d3e-e029-4c89-956b-900b4cf6fade"
                  }
                }
              ]
            },
            {
              "id": "f3bc2747-6b59-40fc-896e-c38ff29965f1",
              "name": "Create Marker",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "markers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"_id\": \"test_marker\",\n  \"name\": \"Test Marker\",\n  \"type\": \"c\",\n  \"coo\": [0, 0],\n  \"year\": 2000,\n  \"data\": {\n    \"description\": \"Test marker\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6cbef540-3351-4458-b028-ef7557dabdb9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200, 201, or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 401]);",
                      "});",
                      "if (pm.response.code !== 401) {",
                      "    pm.test(\"Response contains created marker\", function () {",
                      "        var jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.not.be.empty;",
                      "        if (jsonData._id) {",
                      "            pm.globals.set(\"markerId\", jsonData._id);",
                      "        }",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "976105fc-c369-4cea-86f5-cd90f59de04d"
                  }
                }
              ]
            },
            {
              "id": "35f9cafd-aa14-4fda-8f62-1d976e065dbe",
              "name": "Update Marker",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "markers",
                    "test_marker"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Updated Test Marker\",\n  \"data\": {\n    \"description\": \"Updated test marker\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6cfae020-c6f6-44f2-9de8-fe649c1cc726",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});",
                      "if (pm.response.code !== 401) {",
                      "    pm.test(\"Response contains updated marker\", function () {",
                      "        var jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.not.be.empty;",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "ee62865f-ddbd-4d81-9377-69548df3241f"
                  }
                }
              ]
            },
            {
              "id": "6279e449-b739-4516-958b-8fd400b8aa25",
              "name": "Delete Marker",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "markers",
                    "test_marker"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a8162679-5fbc-495d-a134-7722481a087c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});"
                    ],
                    "_lastExecutionId": "30b557f1-9058-4431-bcde-d0434a642d97"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "9f5ef2cc-0309-4ed3-a08e-15fcf1eaf3af",
          "length": 34,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "fab3f77f-42bc-43b2-adcb-4a288269c42c",
          "scriptId": "95d1a2fb-f815-4579-9e8b-9ce59ed14b6d",
          "execution": "5989902e-ef84-4a0e-af75-22088a515bd5"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Response contains marker data",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:18)",
          "checksum": "f1482fd5e99d9d9e2da5f065c5f12a74",
          "id": "afcf7540-4ba3-44fb-9cf5-a84e3a07acdd",
          "timestamp": 1758627604574,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 18,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "dfff1a6f-69ea-400e-b5cd-c1960322f443",
          "name": "Get Single Marker",
          "request": {
            "url": {
              "path": [
                "v1",
                "markers",
                ""
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "count",
                  "value": "1"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "95d1a2fb-f815-4579-9e8b-9ce59ed14b6d",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Response contains marker data\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});"
                ],
                "_lastExecutionId": "5989902e-ef84-4a0e-af75-22088a515bd5"
              }
            }
          ]
        },
        "parent": {
          "id": "fcdf765d-0019-4744-8ca2-fe21a58b0ca6",
          "name": "Markers (2nd Most Used - 33k requests)",
          "item": [
            {
              "id": "dfff1a6f-69ea-400e-b5cd-c1960322f443",
              "name": "Get Single Marker",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "markers",
                    ""
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "count",
                      "value": "1"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "95d1a2fb-f815-4579-9e8b-9ce59ed14b6d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response contains marker data\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "5989902e-ef84-4a0e-af75-22088a515bd5"
                  }
                }
              ]
            },
            {
              "id": "6c8c604a-c3d2-46e0-9f4f-034e24405740",
              "name": "Get Markers with Types and Count",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "markers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "types",
                      "value": "a,ar,at,b,c,ca,cp,e,m,op,p,r,s,si"
                    },
                    {
                      "key": "year",
                      "value": "714"
                    },
                    {
                      "key": "count",
                      "value": "3000"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "15ebf48d-fd1c-4590-bdbb-7e3cdac21ce5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response time is acceptable for large dataset\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});",
                      "pm.test(\"Response contains markers with valid structure\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an(\"array\");",
                      "    pm.expect(jsonData.length).to.be.greaterThan(0);",
                      "    if (jsonData.length > 0) {",
                      "        pm.expect(jsonData[0]).to.have.property(\"_id\");",
                      "        pm.expect(jsonData[0]).to.have.property(\"name\");",
                      "        pm.expect(jsonData[0]).to.have.property(\"coo\");",
                      "        if (jsonData[0].coo && jsonData[0].coo.length === 2) {",
                      "            pm.expect(jsonData[0].coo[0]).to.be.within(-90, 90);",
                      "            pm.expect(jsonData[0].coo[1]).to.be.within(-180, 180);",
                      "        }",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "62d6a0ec-bbf9-4d82-a5fa-9fbe8b54d179"
                  }
                }
              ]
            },
            {
              "id": "99a2b0e6-ac55-4337-8ab9-dc9f858c5c79",
              "name": "Get Limited Markers",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "markers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "types",
                      "value": "a,ar,at,b,c,ca,cp,e,m,op,p,r,s,si"
                    },
                    {
                      "key": "year",
                      "value": "1945"
                    },
                    {
                      "key": "count",
                      "value": "100"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "04d34445-0ac5-449d-ad3a-5f2b1fcb097b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response contains exactly 100 or fewer markers\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "    pm.expect(jsonData.length).to.be.at.most(100);",
                      "});"
                    ],
                    "_lastExecutionId": "ebf70d3e-e029-4c89-956b-900b4cf6fade"
                  }
                }
              ]
            },
            {
              "id": "f3bc2747-6b59-40fc-896e-c38ff29965f1",
              "name": "Create Marker",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "markers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"_id\": \"test_marker\",\n  \"name\": \"Test Marker\",\n  \"type\": \"c\",\n  \"coo\": [0, 0],\n  \"year\": 2000,\n  \"data\": {\n    \"description\": \"Test marker\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6cbef540-3351-4458-b028-ef7557dabdb9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200, 201, or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 401]);",
                      "});",
                      "if (pm.response.code !== 401) {",
                      "    pm.test(\"Response contains created marker\", function () {",
                      "        var jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.not.be.empty;",
                      "        if (jsonData._id) {",
                      "            pm.globals.set(\"markerId\", jsonData._id);",
                      "        }",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "976105fc-c369-4cea-86f5-cd90f59de04d"
                  }
                }
              ]
            },
            {
              "id": "35f9cafd-aa14-4fda-8f62-1d976e065dbe",
              "name": "Update Marker",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "markers",
                    "test_marker"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Updated Test Marker\",\n  \"data\": {\n    \"description\": \"Updated test marker\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6cfae020-c6f6-44f2-9de8-fe649c1cc726",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});",
                      "if (pm.response.code !== 401) {",
                      "    pm.test(\"Response contains updated marker\", function () {",
                      "        var jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.not.be.empty;",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "ee62865f-ddbd-4d81-9377-69548df3241f"
                  }
                }
              ]
            },
            {
              "id": "6279e449-b739-4516-958b-8fd400b8aa25",
              "name": "Delete Marker",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "markers",
                    "test_marker"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a8162679-5fbc-495d-a134-7722481a087c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});"
                    ],
                    "_lastExecutionId": "30b557f1-9058-4431-bcde-d0434a642d97"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "9f5ef2cc-0309-4ed3-a08e-15fcf1eaf3af",
          "length": 34,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "fab3f77f-42bc-43b2-adcb-4a288269c42c",
          "scriptId": "95d1a2fb-f815-4579-9e8b-9ce59ed14b6d",
          "execution": "5989902e-ef84-4a0e-af75-22088a515bd5"
        }
      },
      {
        "error": {
          "errno": -61,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3001,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:3001",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:3001\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1637:16)",
          "checksum": "f958207822d918da82c40a9f858a19c2",
          "id": "897c20d2-2beb-4191-a161-69ab410f9c5d",
          "timestamp": 1758627604582,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1637,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "6c8c604a-c3d2-46e0-9f4f-034e24405740",
          "name": "Get Markers with Types and Count",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3001",
              "path": [
                "v1",
                "markers"
              ],
              "host": [
                "localhost"
              ],
              "query": [
                {
                  "key": "types",
                  "value": "a,ar,at,b,c,ca,cp,e,m,op,p,r,s,si"
                },
                {
                  "key": "year",
                  "value": "714"
                },
                {
                  "key": "count",
                  "value": "3000"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "9122fdda-3bd2-4ea4-908e-d4f4037f45f6",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:3001",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "15ebf48d-fd1c-4590-bdbb-7e3cdac21ce5",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Response time is acceptable for large dataset\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                  "});",
                  "pm.test(\"Response contains markers with valid structure\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an(\"array\");",
                  "    pm.expect(jsonData.length).to.be.greaterThan(0);",
                  "    if (jsonData.length > 0) {",
                  "        pm.expect(jsonData[0]).to.have.property(\"_id\");",
                  "        pm.expect(jsonData[0]).to.have.property(\"name\");",
                  "        pm.expect(jsonData[0]).to.have.property(\"coo\");",
                  "        if (jsonData[0].coo && jsonData[0].coo.length === 2) {",
                  "            pm.expect(jsonData[0].coo[0]).to.be.within(-90, 90);",
                  "            pm.expect(jsonData[0].coo[1]).to.be.within(-180, 180);",
                  "        }",
                  "    }",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "63b3b6e3-4014-4e6e-8467-b8e81191c03a",
          "length": 34,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "9e583e05-273f-4516-b18d-4063b117c9ed"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:19)",
          "checksum": "b7be62f02c653571cfa5a697c44c496c",
          "id": "d20c2ce7-1b28-479c-924c-c5d1b8d5164e",
          "timestamp": 1758627604585,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 19,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "6c8c604a-c3d2-46e0-9f4f-034e24405740",
          "name": "Get Markers with Types and Count",
          "request": {
            "url": {
              "path": [
                "v1",
                "markers"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "types",
                  "value": "a,ar,at,b,c,ca,cp,e,m,op,p,r,s,si"
                },
                {
                  "key": "year",
                  "value": "714"
                },
                {
                  "key": "count",
                  "value": "3000"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "15ebf48d-fd1c-4590-bdbb-7e3cdac21ce5",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Response time is acceptable for large dataset\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                  "});",
                  "pm.test(\"Response contains markers with valid structure\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an(\"array\");",
                  "    pm.expect(jsonData.length).to.be.greaterThan(0);",
                  "    if (jsonData.length > 0) {",
                  "        pm.expect(jsonData[0]).to.have.property(\"_id\");",
                  "        pm.expect(jsonData[0]).to.have.property(\"name\");",
                  "        pm.expect(jsonData[0]).to.have.property(\"coo\");",
                  "        if (jsonData[0].coo && jsonData[0].coo.length === 2) {",
                  "            pm.expect(jsonData[0].coo[0]).to.be.within(-90, 90);",
                  "            pm.expect(jsonData[0].coo[1]).to.be.within(-180, 180);",
                  "        }",
                  "    }",
                  "});"
                ],
                "_lastExecutionId": "62d6a0ec-bbf9-4d82-a5fa-9fbe8b54d179"
              }
            }
          ]
        },
        "parent": {
          "id": "fcdf765d-0019-4744-8ca2-fe21a58b0ca6",
          "name": "Markers (2nd Most Used - 33k requests)",
          "item": [
            {
              "id": "dfff1a6f-69ea-400e-b5cd-c1960322f443",
              "name": "Get Single Marker",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "markers",
                    ""
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "count",
                      "value": "1"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "95d1a2fb-f815-4579-9e8b-9ce59ed14b6d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response contains marker data\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "5989902e-ef84-4a0e-af75-22088a515bd5"
                  }
                }
              ]
            },
            {
              "id": "6c8c604a-c3d2-46e0-9f4f-034e24405740",
              "name": "Get Markers with Types and Count",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "markers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "types",
                      "value": "a,ar,at,b,c,ca,cp,e,m,op,p,r,s,si"
                    },
                    {
                      "key": "year",
                      "value": "714"
                    },
                    {
                      "key": "count",
                      "value": "3000"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "15ebf48d-fd1c-4590-bdbb-7e3cdac21ce5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response time is acceptable for large dataset\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});",
                      "pm.test(\"Response contains markers with valid structure\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an(\"array\");",
                      "    pm.expect(jsonData.length).to.be.greaterThan(0);",
                      "    if (jsonData.length > 0) {",
                      "        pm.expect(jsonData[0]).to.have.property(\"_id\");",
                      "        pm.expect(jsonData[0]).to.have.property(\"name\");",
                      "        pm.expect(jsonData[0]).to.have.property(\"coo\");",
                      "        if (jsonData[0].coo && jsonData[0].coo.length === 2) {",
                      "            pm.expect(jsonData[0].coo[0]).to.be.within(-90, 90);",
                      "            pm.expect(jsonData[0].coo[1]).to.be.within(-180, 180);",
                      "        }",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "62d6a0ec-bbf9-4d82-a5fa-9fbe8b54d179"
                  }
                }
              ]
            },
            {
              "id": "99a2b0e6-ac55-4337-8ab9-dc9f858c5c79",
              "name": "Get Limited Markers",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "markers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "types",
                      "value": "a,ar,at,b,c,ca,cp,e,m,op,p,r,s,si"
                    },
                    {
                      "key": "year",
                      "value": "1945"
                    },
                    {
                      "key": "count",
                      "value": "100"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "04d34445-0ac5-449d-ad3a-5f2b1fcb097b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response contains exactly 100 or fewer markers\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "    pm.expect(jsonData.length).to.be.at.most(100);",
                      "});"
                    ],
                    "_lastExecutionId": "ebf70d3e-e029-4c89-956b-900b4cf6fade"
                  }
                }
              ]
            },
            {
              "id": "f3bc2747-6b59-40fc-896e-c38ff29965f1",
              "name": "Create Marker",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "markers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"_id\": \"test_marker\",\n  \"name\": \"Test Marker\",\n  \"type\": \"c\",\n  \"coo\": [0, 0],\n  \"year\": 2000,\n  \"data\": {\n    \"description\": \"Test marker\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6cbef540-3351-4458-b028-ef7557dabdb9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200, 201, or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 401]);",
                      "});",
                      "if (pm.response.code !== 401) {",
                      "    pm.test(\"Response contains created marker\", function () {",
                      "        var jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.not.be.empty;",
                      "        if (jsonData._id) {",
                      "            pm.globals.set(\"markerId\", jsonData._id);",
                      "        }",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "976105fc-c369-4cea-86f5-cd90f59de04d"
                  }
                }
              ]
            },
            {
              "id": "35f9cafd-aa14-4fda-8f62-1d976e065dbe",
              "name": "Update Marker",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "markers",
                    "test_marker"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Updated Test Marker\",\n  \"data\": {\n    \"description\": \"Updated test marker\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6cfae020-c6f6-44f2-9de8-fe649c1cc726",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});",
                      "if (pm.response.code !== 401) {",
                      "    pm.test(\"Response contains updated marker\", function () {",
                      "        var jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.not.be.empty;",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "ee62865f-ddbd-4d81-9377-69548df3241f"
                  }
                }
              ]
            },
            {
              "id": "6279e449-b739-4516-958b-8fd400b8aa25",
              "name": "Delete Marker",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "markers",
                    "test_marker"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a8162679-5fbc-495d-a134-7722481a087c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});"
                    ],
                    "_lastExecutionId": "30b557f1-9058-4431-bcde-d0434a642d97"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "63b3b6e3-4014-4e6e-8467-b8e81191c03a",
          "length": 34,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "9e583e05-273f-4516-b18d-4063b117c9ed",
          "scriptId": "15ebf48d-fd1c-4590-bdbb-7e3cdac21ce5",
          "execution": "62d6a0ec-bbf9-4d82-a5fa-9fbe8b54d179"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response time is acceptable for large dataset",
          "message": "expected undefined to be a number or a date",
          "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:2:19)",
          "checksum": "786c9072a6466d1a9821d31e9601d9fa",
          "id": "96200684-8941-453e-beaf-e02b719cdc4f",
          "timestamp": 1758627604585,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 19,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "6c8c604a-c3d2-46e0-9f4f-034e24405740",
          "name": "Get Markers with Types and Count",
          "request": {
            "url": {
              "path": [
                "v1",
                "markers"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "types",
                  "value": "a,ar,at,b,c,ca,cp,e,m,op,p,r,s,si"
                },
                {
                  "key": "year",
                  "value": "714"
                },
                {
                  "key": "count",
                  "value": "3000"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "15ebf48d-fd1c-4590-bdbb-7e3cdac21ce5",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Response time is acceptable for large dataset\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                  "});",
                  "pm.test(\"Response contains markers with valid structure\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an(\"array\");",
                  "    pm.expect(jsonData.length).to.be.greaterThan(0);",
                  "    if (jsonData.length > 0) {",
                  "        pm.expect(jsonData[0]).to.have.property(\"_id\");",
                  "        pm.expect(jsonData[0]).to.have.property(\"name\");",
                  "        pm.expect(jsonData[0]).to.have.property(\"coo\");",
                  "        if (jsonData[0].coo && jsonData[0].coo.length === 2) {",
                  "            pm.expect(jsonData[0].coo[0]).to.be.within(-90, 90);",
                  "            pm.expect(jsonData[0].coo[1]).to.be.within(-180, 180);",
                  "        }",
                  "    }",
                  "});"
                ],
                "_lastExecutionId": "62d6a0ec-bbf9-4d82-a5fa-9fbe8b54d179"
              }
            }
          ]
        },
        "parent": {
          "id": "fcdf765d-0019-4744-8ca2-fe21a58b0ca6",
          "name": "Markers (2nd Most Used - 33k requests)",
          "item": [
            {
              "id": "dfff1a6f-69ea-400e-b5cd-c1960322f443",
              "name": "Get Single Marker",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "markers",
                    ""
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "count",
                      "value": "1"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "95d1a2fb-f815-4579-9e8b-9ce59ed14b6d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response contains marker data\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "5989902e-ef84-4a0e-af75-22088a515bd5"
                  }
                }
              ]
            },
            {
              "id": "6c8c604a-c3d2-46e0-9f4f-034e24405740",
              "name": "Get Markers with Types and Count",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "markers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "types",
                      "value": "a,ar,at,b,c,ca,cp,e,m,op,p,r,s,si"
                    },
                    {
                      "key": "year",
                      "value": "714"
                    },
                    {
                      "key": "count",
                      "value": "3000"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "15ebf48d-fd1c-4590-bdbb-7e3cdac21ce5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response time is acceptable for large dataset\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});",
                      "pm.test(\"Response contains markers with valid structure\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an(\"array\");",
                      "    pm.expect(jsonData.length).to.be.greaterThan(0);",
                      "    if (jsonData.length > 0) {",
                      "        pm.expect(jsonData[0]).to.have.property(\"_id\");",
                      "        pm.expect(jsonData[0]).to.have.property(\"name\");",
                      "        pm.expect(jsonData[0]).to.have.property(\"coo\");",
                      "        if (jsonData[0].coo && jsonData[0].coo.length === 2) {",
                      "            pm.expect(jsonData[0].coo[0]).to.be.within(-90, 90);",
                      "            pm.expect(jsonData[0].coo[1]).to.be.within(-180, 180);",
                      "        }",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "62d6a0ec-bbf9-4d82-a5fa-9fbe8b54d179"
                  }
                }
              ]
            },
            {
              "id": "99a2b0e6-ac55-4337-8ab9-dc9f858c5c79",
              "name": "Get Limited Markers",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "markers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "types",
                      "value": "a,ar,at,b,c,ca,cp,e,m,op,p,r,s,si"
                    },
                    {
                      "key": "year",
                      "value": "1945"
                    },
                    {
                      "key": "count",
                      "value": "100"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "04d34445-0ac5-449d-ad3a-5f2b1fcb097b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response contains exactly 100 or fewer markers\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "    pm.expect(jsonData.length).to.be.at.most(100);",
                      "});"
                    ],
                    "_lastExecutionId": "ebf70d3e-e029-4c89-956b-900b4cf6fade"
                  }
                }
              ]
            },
            {
              "id": "f3bc2747-6b59-40fc-896e-c38ff29965f1",
              "name": "Create Marker",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "markers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"_id\": \"test_marker\",\n  \"name\": \"Test Marker\",\n  \"type\": \"c\",\n  \"coo\": [0, 0],\n  \"year\": 2000,\n  \"data\": {\n    \"description\": \"Test marker\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6cbef540-3351-4458-b028-ef7557dabdb9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200, 201, or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 401]);",
                      "});",
                      "if (pm.response.code !== 401) {",
                      "    pm.test(\"Response contains created marker\", function () {",
                      "        var jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.not.be.empty;",
                      "        if (jsonData._id) {",
                      "            pm.globals.set(\"markerId\", jsonData._id);",
                      "        }",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "976105fc-c369-4cea-86f5-cd90f59de04d"
                  }
                }
              ]
            },
            {
              "id": "35f9cafd-aa14-4fda-8f62-1d976e065dbe",
              "name": "Update Marker",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "markers",
                    "test_marker"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Updated Test Marker\",\n  \"data\": {\n    \"description\": \"Updated test marker\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6cfae020-c6f6-44f2-9de8-fe649c1cc726",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});",
                      "if (pm.response.code !== 401) {",
                      "    pm.test(\"Response contains updated marker\", function () {",
                      "        var jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.not.be.empty;",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "ee62865f-ddbd-4d81-9377-69548df3241f"
                  }
                }
              ]
            },
            {
              "id": "6279e449-b739-4516-958b-8fd400b8aa25",
              "name": "Delete Marker",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "markers",
                    "test_marker"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a8162679-5fbc-495d-a134-7722481a087c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});"
                    ],
                    "_lastExecutionId": "30b557f1-9058-4431-bcde-d0434a642d97"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "63b3b6e3-4014-4e6e-8467-b8e81191c03a",
          "length": 34,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "9e583e05-273f-4516-b18d-4063b117c9ed",
          "scriptId": "15ebf48d-fd1c-4590-bdbb-7e3cdac21ce5",
          "execution": "62d6a0ec-bbf9-4d82-a5fa-9fbe8b54d179"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 2,
          "test": "Response contains markers with valid structure",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:3:19)",
          "checksum": "16d0ae84b2c8135deeac775d79e11a21",
          "id": "e27e60d6-7237-433f-addb-5587e345bc5d",
          "timestamp": 1758627604585,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 19,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "6c8c604a-c3d2-46e0-9f4f-034e24405740",
          "name": "Get Markers with Types and Count",
          "request": {
            "url": {
              "path": [
                "v1",
                "markers"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "types",
                  "value": "a,ar,at,b,c,ca,cp,e,m,op,p,r,s,si"
                },
                {
                  "key": "year",
                  "value": "714"
                },
                {
                  "key": "count",
                  "value": "3000"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "15ebf48d-fd1c-4590-bdbb-7e3cdac21ce5",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Response time is acceptable for large dataset\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                  "});",
                  "pm.test(\"Response contains markers with valid structure\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an(\"array\");",
                  "    pm.expect(jsonData.length).to.be.greaterThan(0);",
                  "    if (jsonData.length > 0) {",
                  "        pm.expect(jsonData[0]).to.have.property(\"_id\");",
                  "        pm.expect(jsonData[0]).to.have.property(\"name\");",
                  "        pm.expect(jsonData[0]).to.have.property(\"coo\");",
                  "        if (jsonData[0].coo && jsonData[0].coo.length === 2) {",
                  "            pm.expect(jsonData[0].coo[0]).to.be.within(-90, 90);",
                  "            pm.expect(jsonData[0].coo[1]).to.be.within(-180, 180);",
                  "        }",
                  "    }",
                  "});"
                ],
                "_lastExecutionId": "62d6a0ec-bbf9-4d82-a5fa-9fbe8b54d179"
              }
            }
          ]
        },
        "parent": {
          "id": "fcdf765d-0019-4744-8ca2-fe21a58b0ca6",
          "name": "Markers (2nd Most Used - 33k requests)",
          "item": [
            {
              "id": "dfff1a6f-69ea-400e-b5cd-c1960322f443",
              "name": "Get Single Marker",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "markers",
                    ""
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "count",
                      "value": "1"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "95d1a2fb-f815-4579-9e8b-9ce59ed14b6d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response contains marker data\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "5989902e-ef84-4a0e-af75-22088a515bd5"
                  }
                }
              ]
            },
            {
              "id": "6c8c604a-c3d2-46e0-9f4f-034e24405740",
              "name": "Get Markers with Types and Count",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "markers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "types",
                      "value": "a,ar,at,b,c,ca,cp,e,m,op,p,r,s,si"
                    },
                    {
                      "key": "year",
                      "value": "714"
                    },
                    {
                      "key": "count",
                      "value": "3000"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "15ebf48d-fd1c-4590-bdbb-7e3cdac21ce5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response time is acceptable for large dataset\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});",
                      "pm.test(\"Response contains markers with valid structure\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an(\"array\");",
                      "    pm.expect(jsonData.length).to.be.greaterThan(0);",
                      "    if (jsonData.length > 0) {",
                      "        pm.expect(jsonData[0]).to.have.property(\"_id\");",
                      "        pm.expect(jsonData[0]).to.have.property(\"name\");",
                      "        pm.expect(jsonData[0]).to.have.property(\"coo\");",
                      "        if (jsonData[0].coo && jsonData[0].coo.length === 2) {",
                      "            pm.expect(jsonData[0].coo[0]).to.be.within(-90, 90);",
                      "            pm.expect(jsonData[0].coo[1]).to.be.within(-180, 180);",
                      "        }",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "62d6a0ec-bbf9-4d82-a5fa-9fbe8b54d179"
                  }
                }
              ]
            },
            {
              "id": "99a2b0e6-ac55-4337-8ab9-dc9f858c5c79",
              "name": "Get Limited Markers",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "markers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "types",
                      "value": "a,ar,at,b,c,ca,cp,e,m,op,p,r,s,si"
                    },
                    {
                      "key": "year",
                      "value": "1945"
                    },
                    {
                      "key": "count",
                      "value": "100"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "04d34445-0ac5-449d-ad3a-5f2b1fcb097b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response contains exactly 100 or fewer markers\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "    pm.expect(jsonData.length).to.be.at.most(100);",
                      "});"
                    ],
                    "_lastExecutionId": "ebf70d3e-e029-4c89-956b-900b4cf6fade"
                  }
                }
              ]
            },
            {
              "id": "f3bc2747-6b59-40fc-896e-c38ff29965f1",
              "name": "Create Marker",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "markers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"_id\": \"test_marker\",\n  \"name\": \"Test Marker\",\n  \"type\": \"c\",\n  \"coo\": [0, 0],\n  \"year\": 2000,\n  \"data\": {\n    \"description\": \"Test marker\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6cbef540-3351-4458-b028-ef7557dabdb9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200, 201, or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 401]);",
                      "});",
                      "if (pm.response.code !== 401) {",
                      "    pm.test(\"Response contains created marker\", function () {",
                      "        var jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.not.be.empty;",
                      "        if (jsonData._id) {",
                      "            pm.globals.set(\"markerId\", jsonData._id);",
                      "        }",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "976105fc-c369-4cea-86f5-cd90f59de04d"
                  }
                }
              ]
            },
            {
              "id": "35f9cafd-aa14-4fda-8f62-1d976e065dbe",
              "name": "Update Marker",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "markers",
                    "test_marker"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Updated Test Marker\",\n  \"data\": {\n    \"description\": \"Updated test marker\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6cfae020-c6f6-44f2-9de8-fe649c1cc726",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});",
                      "if (pm.response.code !== 401) {",
                      "    pm.test(\"Response contains updated marker\", function () {",
                      "        var jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.not.be.empty;",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "ee62865f-ddbd-4d81-9377-69548df3241f"
                  }
                }
              ]
            },
            {
              "id": "6279e449-b739-4516-958b-8fd400b8aa25",
              "name": "Delete Marker",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "markers",
                    "test_marker"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a8162679-5fbc-495d-a134-7722481a087c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});"
                    ],
                    "_lastExecutionId": "30b557f1-9058-4431-bcde-d0434a642d97"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "63b3b6e3-4014-4e6e-8467-b8e81191c03a",
          "length": 34,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "9e583e05-273f-4516-b18d-4063b117c9ed",
          "scriptId": "15ebf48d-fd1c-4590-bdbb-7e3cdac21ce5",
          "execution": "62d6a0ec-bbf9-4d82-a5fa-9fbe8b54d179"
        }
      },
      {
        "error": {
          "errno": -61,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3001,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:3001",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:3001\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1637:16)",
          "checksum": "f958207822d918da82c40a9f858a19c2",
          "id": "3ba3507e-acf3-4b85-9097-cf64c183e70d",
          "timestamp": 1758627604593,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1637,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "99a2b0e6-ac55-4337-8ab9-dc9f858c5c79",
          "name": "Get Limited Markers",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3001",
              "path": [
                "v1",
                "markers"
              ],
              "host": [
                "localhost"
              ],
              "query": [
                {
                  "key": "types",
                  "value": "a,ar,at,b,c,ca,cp,e,m,op,p,r,s,si"
                },
                {
                  "key": "year",
                  "value": "1945"
                },
                {
                  "key": "count",
                  "value": "100"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "75bf8290-883c-425a-97d8-649b92f9a66e",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:3001",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "04d34445-0ac5-449d-ad3a-5f2b1fcb097b",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Response contains exactly 100 or fewer markers\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "    pm.expect(jsonData.length).to.be.at.most(100);",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "d404035c-04b3-4627-9ec1-ee8f0a3a9c47",
          "length": 34,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "614b2783-5a4a-4f90-bbde-e5c364839ead"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:20)",
          "checksum": "c5eabc835ce8f48d8814804e0540d68f",
          "id": "64359fb4-a370-441f-ad93-443c1a435931",
          "timestamp": 1758627604596,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 20,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "99a2b0e6-ac55-4337-8ab9-dc9f858c5c79",
          "name": "Get Limited Markers",
          "request": {
            "url": {
              "path": [
                "v1",
                "markers"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "types",
                  "value": "a,ar,at,b,c,ca,cp,e,m,op,p,r,s,si"
                },
                {
                  "key": "year",
                  "value": "1945"
                },
                {
                  "key": "count",
                  "value": "100"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "04d34445-0ac5-449d-ad3a-5f2b1fcb097b",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Response contains exactly 100 or fewer markers\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "    pm.expect(jsonData.length).to.be.at.most(100);",
                  "});"
                ],
                "_lastExecutionId": "ebf70d3e-e029-4c89-956b-900b4cf6fade"
              }
            }
          ]
        },
        "parent": {
          "id": "fcdf765d-0019-4744-8ca2-fe21a58b0ca6",
          "name": "Markers (2nd Most Used - 33k requests)",
          "item": [
            {
              "id": "dfff1a6f-69ea-400e-b5cd-c1960322f443",
              "name": "Get Single Marker",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "markers",
                    ""
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "count",
                      "value": "1"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "95d1a2fb-f815-4579-9e8b-9ce59ed14b6d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response contains marker data\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "5989902e-ef84-4a0e-af75-22088a515bd5"
                  }
                }
              ]
            },
            {
              "id": "6c8c604a-c3d2-46e0-9f4f-034e24405740",
              "name": "Get Markers with Types and Count",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "markers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "types",
                      "value": "a,ar,at,b,c,ca,cp,e,m,op,p,r,s,si"
                    },
                    {
                      "key": "year",
                      "value": "714"
                    },
                    {
                      "key": "count",
                      "value": "3000"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "15ebf48d-fd1c-4590-bdbb-7e3cdac21ce5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response time is acceptable for large dataset\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});",
                      "pm.test(\"Response contains markers with valid structure\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an(\"array\");",
                      "    pm.expect(jsonData.length).to.be.greaterThan(0);",
                      "    if (jsonData.length > 0) {",
                      "        pm.expect(jsonData[0]).to.have.property(\"_id\");",
                      "        pm.expect(jsonData[0]).to.have.property(\"name\");",
                      "        pm.expect(jsonData[0]).to.have.property(\"coo\");",
                      "        if (jsonData[0].coo && jsonData[0].coo.length === 2) {",
                      "            pm.expect(jsonData[0].coo[0]).to.be.within(-90, 90);",
                      "            pm.expect(jsonData[0].coo[1]).to.be.within(-180, 180);",
                      "        }",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "62d6a0ec-bbf9-4d82-a5fa-9fbe8b54d179"
                  }
                }
              ]
            },
            {
              "id": "99a2b0e6-ac55-4337-8ab9-dc9f858c5c79",
              "name": "Get Limited Markers",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "markers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "types",
                      "value": "a,ar,at,b,c,ca,cp,e,m,op,p,r,s,si"
                    },
                    {
                      "key": "year",
                      "value": "1945"
                    },
                    {
                      "key": "count",
                      "value": "100"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "04d34445-0ac5-449d-ad3a-5f2b1fcb097b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response contains exactly 100 or fewer markers\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "    pm.expect(jsonData.length).to.be.at.most(100);",
                      "});"
                    ],
                    "_lastExecutionId": "ebf70d3e-e029-4c89-956b-900b4cf6fade"
                  }
                }
              ]
            },
            {
              "id": "f3bc2747-6b59-40fc-896e-c38ff29965f1",
              "name": "Create Marker",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "markers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"_id\": \"test_marker\",\n  \"name\": \"Test Marker\",\n  \"type\": \"c\",\n  \"coo\": [0, 0],\n  \"year\": 2000,\n  \"data\": {\n    \"description\": \"Test marker\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6cbef540-3351-4458-b028-ef7557dabdb9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200, 201, or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 401]);",
                      "});",
                      "if (pm.response.code !== 401) {",
                      "    pm.test(\"Response contains created marker\", function () {",
                      "        var jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.not.be.empty;",
                      "        if (jsonData._id) {",
                      "            pm.globals.set(\"markerId\", jsonData._id);",
                      "        }",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "976105fc-c369-4cea-86f5-cd90f59de04d"
                  }
                }
              ]
            },
            {
              "id": "35f9cafd-aa14-4fda-8f62-1d976e065dbe",
              "name": "Update Marker",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "markers",
                    "test_marker"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Updated Test Marker\",\n  \"data\": {\n    \"description\": \"Updated test marker\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6cfae020-c6f6-44f2-9de8-fe649c1cc726",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});",
                      "if (pm.response.code !== 401) {",
                      "    pm.test(\"Response contains updated marker\", function () {",
                      "        var jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.not.be.empty;",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "ee62865f-ddbd-4d81-9377-69548df3241f"
                  }
                }
              ]
            },
            {
              "id": "6279e449-b739-4516-958b-8fd400b8aa25",
              "name": "Delete Marker",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "markers",
                    "test_marker"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a8162679-5fbc-495d-a134-7722481a087c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});"
                    ],
                    "_lastExecutionId": "30b557f1-9058-4431-bcde-d0434a642d97"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "d404035c-04b3-4627-9ec1-ee8f0a3a9c47",
          "length": 34,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "614b2783-5a4a-4f90-bbde-e5c364839ead",
          "scriptId": "04d34445-0ac5-449d-ad3a-5f2b1fcb097b",
          "execution": "ebf70d3e-e029-4c89-956b-900b4cf6fade"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Response contains exactly 100 or fewer markers",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:20)",
          "checksum": "28f753f8309f24ed5acdb5cd6bfeb15f",
          "id": "c6d63988-32ae-4e0a-9d82-ea616a87e2c4",
          "timestamp": 1758627604596,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 20,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "99a2b0e6-ac55-4337-8ab9-dc9f858c5c79",
          "name": "Get Limited Markers",
          "request": {
            "url": {
              "path": [
                "v1",
                "markers"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "types",
                  "value": "a,ar,at,b,c,ca,cp,e,m,op,p,r,s,si"
                },
                {
                  "key": "year",
                  "value": "1945"
                },
                {
                  "key": "count",
                  "value": "100"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "04d34445-0ac5-449d-ad3a-5f2b1fcb097b",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Response contains exactly 100 or fewer markers\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "    pm.expect(jsonData.length).to.be.at.most(100);",
                  "});"
                ],
                "_lastExecutionId": "ebf70d3e-e029-4c89-956b-900b4cf6fade"
              }
            }
          ]
        },
        "parent": {
          "id": "fcdf765d-0019-4744-8ca2-fe21a58b0ca6",
          "name": "Markers (2nd Most Used - 33k requests)",
          "item": [
            {
              "id": "dfff1a6f-69ea-400e-b5cd-c1960322f443",
              "name": "Get Single Marker",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "markers",
                    ""
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "count",
                      "value": "1"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "95d1a2fb-f815-4579-9e8b-9ce59ed14b6d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response contains marker data\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "5989902e-ef84-4a0e-af75-22088a515bd5"
                  }
                }
              ]
            },
            {
              "id": "6c8c604a-c3d2-46e0-9f4f-034e24405740",
              "name": "Get Markers with Types and Count",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "markers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "types",
                      "value": "a,ar,at,b,c,ca,cp,e,m,op,p,r,s,si"
                    },
                    {
                      "key": "year",
                      "value": "714"
                    },
                    {
                      "key": "count",
                      "value": "3000"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "15ebf48d-fd1c-4590-bdbb-7e3cdac21ce5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response time is acceptable for large dataset\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});",
                      "pm.test(\"Response contains markers with valid structure\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an(\"array\");",
                      "    pm.expect(jsonData.length).to.be.greaterThan(0);",
                      "    if (jsonData.length > 0) {",
                      "        pm.expect(jsonData[0]).to.have.property(\"_id\");",
                      "        pm.expect(jsonData[0]).to.have.property(\"name\");",
                      "        pm.expect(jsonData[0]).to.have.property(\"coo\");",
                      "        if (jsonData[0].coo && jsonData[0].coo.length === 2) {",
                      "            pm.expect(jsonData[0].coo[0]).to.be.within(-90, 90);",
                      "            pm.expect(jsonData[0].coo[1]).to.be.within(-180, 180);",
                      "        }",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "62d6a0ec-bbf9-4d82-a5fa-9fbe8b54d179"
                  }
                }
              ]
            },
            {
              "id": "99a2b0e6-ac55-4337-8ab9-dc9f858c5c79",
              "name": "Get Limited Markers",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "markers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "types",
                      "value": "a,ar,at,b,c,ca,cp,e,m,op,p,r,s,si"
                    },
                    {
                      "key": "year",
                      "value": "1945"
                    },
                    {
                      "key": "count",
                      "value": "100"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "04d34445-0ac5-449d-ad3a-5f2b1fcb097b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response contains exactly 100 or fewer markers\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "    pm.expect(jsonData.length).to.be.at.most(100);",
                      "});"
                    ],
                    "_lastExecutionId": "ebf70d3e-e029-4c89-956b-900b4cf6fade"
                  }
                }
              ]
            },
            {
              "id": "f3bc2747-6b59-40fc-896e-c38ff29965f1",
              "name": "Create Marker",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "markers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"_id\": \"test_marker\",\n  \"name\": \"Test Marker\",\n  \"type\": \"c\",\n  \"coo\": [0, 0],\n  \"year\": 2000,\n  \"data\": {\n    \"description\": \"Test marker\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6cbef540-3351-4458-b028-ef7557dabdb9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200, 201, or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 401]);",
                      "});",
                      "if (pm.response.code !== 401) {",
                      "    pm.test(\"Response contains created marker\", function () {",
                      "        var jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.not.be.empty;",
                      "        if (jsonData._id) {",
                      "            pm.globals.set(\"markerId\", jsonData._id);",
                      "        }",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "976105fc-c369-4cea-86f5-cd90f59de04d"
                  }
                }
              ]
            },
            {
              "id": "35f9cafd-aa14-4fda-8f62-1d976e065dbe",
              "name": "Update Marker",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "markers",
                    "test_marker"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Updated Test Marker\",\n  \"data\": {\n    \"description\": \"Updated test marker\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6cfae020-c6f6-44f2-9de8-fe649c1cc726",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});",
                      "if (pm.response.code !== 401) {",
                      "    pm.test(\"Response contains updated marker\", function () {",
                      "        var jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.not.be.empty;",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "ee62865f-ddbd-4d81-9377-69548df3241f"
                  }
                }
              ]
            },
            {
              "id": "6279e449-b739-4516-958b-8fd400b8aa25",
              "name": "Delete Marker",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "markers",
                    "test_marker"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a8162679-5fbc-495d-a134-7722481a087c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});"
                    ],
                    "_lastExecutionId": "30b557f1-9058-4431-bcde-d0434a642d97"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "d404035c-04b3-4627-9ec1-ee8f0a3a9c47",
          "length": 34,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "614b2783-5a4a-4f90-bbde-e5c364839ead",
          "scriptId": "04d34445-0ac5-449d-ad3a-5f2b1fcb097b",
          "execution": "ebf70d3e-e029-4c89-956b-900b4cf6fade"
        }
      },
      {
        "error": {
          "errno": -61,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3001,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:3001",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:3001\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1637:16)",
          "checksum": "f958207822d918da82c40a9f858a19c2",
          "id": "89da073c-2860-4f82-9561-942486f5d056",
          "timestamp": 1758627604604,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1637,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "f3bc2747-6b59-40fc-896e-c38ff29965f1",
          "name": "Create Marker",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3001",
              "path": [
                "v1",
                "markers"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "abe3d6ff-e1f3-4335-bec7-3ba4f6aae3ef",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:3001",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"_id\": \"test_marker\",\n  \"name\": \"Test Marker\",\n  \"type\": \"c\",\n  \"coo\": [0, 0],\n  \"year\": 2000,\n  \"data\": {\n    \"description\": \"Test marker\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6cbef540-3351-4458-b028-ef7557dabdb9",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200, 201, or 401\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 401]);",
                  "});",
                  "if (pm.response.code !== 401) {",
                  "    pm.test(\"Response contains created marker\", function () {",
                  "        var jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.not.be.empty;",
                  "        if (jsonData._id) {",
                  "            pm.globals.set(\"markerId\", jsonData._id);",
                  "        }",
                  "    });",
                  "}"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "4c35bb1c-0b45-47c9-a4fb-84fe3ad76eee",
          "length": 34,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "88f864b0-a1d4-47bb-befb-9887af725b4a"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200, 201, or 401",
          "message": "expected undefined to be one of [ 200, 201, 401 ]",
          "stack": "AssertionError: expected undefined to be one of [ 200, 201, 401 ]\n   at Object.eval sandbox-script.js:1:21)",
          "checksum": "1a55bce692e58b910f7d9cea8eb71ef7",
          "id": "94adc946-3540-4695-a51e-45f1f049d783",
          "timestamp": 1758627604607,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 21,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "f3bc2747-6b59-40fc-896e-c38ff29965f1",
          "name": "Create Marker",
          "request": {
            "url": {
              "path": [
                "v1",
                "markers"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"_id\": \"test_marker\",\n  \"name\": \"Test Marker\",\n  \"type\": \"c\",\n  \"coo\": [0, 0],\n  \"year\": 2000,\n  \"data\": {\n    \"description\": \"Test marker\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6cbef540-3351-4458-b028-ef7557dabdb9",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200, 201, or 401\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 401]);",
                  "});",
                  "if (pm.response.code !== 401) {",
                  "    pm.test(\"Response contains created marker\", function () {",
                  "        var jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.not.be.empty;",
                  "        if (jsonData._id) {",
                  "            pm.globals.set(\"markerId\", jsonData._id);",
                  "        }",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "976105fc-c369-4cea-86f5-cd90f59de04d"
              }
            }
          ]
        },
        "parent": {
          "id": "fcdf765d-0019-4744-8ca2-fe21a58b0ca6",
          "name": "Markers (2nd Most Used - 33k requests)",
          "item": [
            {
              "id": "dfff1a6f-69ea-400e-b5cd-c1960322f443",
              "name": "Get Single Marker",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "markers",
                    ""
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "count",
                      "value": "1"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "95d1a2fb-f815-4579-9e8b-9ce59ed14b6d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response contains marker data\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "5989902e-ef84-4a0e-af75-22088a515bd5"
                  }
                }
              ]
            },
            {
              "id": "6c8c604a-c3d2-46e0-9f4f-034e24405740",
              "name": "Get Markers with Types and Count",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "markers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "types",
                      "value": "a,ar,at,b,c,ca,cp,e,m,op,p,r,s,si"
                    },
                    {
                      "key": "year",
                      "value": "714"
                    },
                    {
                      "key": "count",
                      "value": "3000"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "15ebf48d-fd1c-4590-bdbb-7e3cdac21ce5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response time is acceptable for large dataset\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});",
                      "pm.test(\"Response contains markers with valid structure\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an(\"array\");",
                      "    pm.expect(jsonData.length).to.be.greaterThan(0);",
                      "    if (jsonData.length > 0) {",
                      "        pm.expect(jsonData[0]).to.have.property(\"_id\");",
                      "        pm.expect(jsonData[0]).to.have.property(\"name\");",
                      "        pm.expect(jsonData[0]).to.have.property(\"coo\");",
                      "        if (jsonData[0].coo && jsonData[0].coo.length === 2) {",
                      "            pm.expect(jsonData[0].coo[0]).to.be.within(-90, 90);",
                      "            pm.expect(jsonData[0].coo[1]).to.be.within(-180, 180);",
                      "        }",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "62d6a0ec-bbf9-4d82-a5fa-9fbe8b54d179"
                  }
                }
              ]
            },
            {
              "id": "99a2b0e6-ac55-4337-8ab9-dc9f858c5c79",
              "name": "Get Limited Markers",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "markers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "types",
                      "value": "a,ar,at,b,c,ca,cp,e,m,op,p,r,s,si"
                    },
                    {
                      "key": "year",
                      "value": "1945"
                    },
                    {
                      "key": "count",
                      "value": "100"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "04d34445-0ac5-449d-ad3a-5f2b1fcb097b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response contains exactly 100 or fewer markers\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "    pm.expect(jsonData.length).to.be.at.most(100);",
                      "});"
                    ],
                    "_lastExecutionId": "ebf70d3e-e029-4c89-956b-900b4cf6fade"
                  }
                }
              ]
            },
            {
              "id": "f3bc2747-6b59-40fc-896e-c38ff29965f1",
              "name": "Create Marker",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "markers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"_id\": \"test_marker\",\n  \"name\": \"Test Marker\",\n  \"type\": \"c\",\n  \"coo\": [0, 0],\n  \"year\": 2000,\n  \"data\": {\n    \"description\": \"Test marker\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6cbef540-3351-4458-b028-ef7557dabdb9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200, 201, or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 401]);",
                      "});",
                      "if (pm.response.code !== 401) {",
                      "    pm.test(\"Response contains created marker\", function () {",
                      "        var jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.not.be.empty;",
                      "        if (jsonData._id) {",
                      "            pm.globals.set(\"markerId\", jsonData._id);",
                      "        }",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "976105fc-c369-4cea-86f5-cd90f59de04d"
                  }
                }
              ]
            },
            {
              "id": "35f9cafd-aa14-4fda-8f62-1d976e065dbe",
              "name": "Update Marker",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "markers",
                    "test_marker"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Updated Test Marker\",\n  \"data\": {\n    \"description\": \"Updated test marker\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6cfae020-c6f6-44f2-9de8-fe649c1cc726",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});",
                      "if (pm.response.code !== 401) {",
                      "    pm.test(\"Response contains updated marker\", function () {",
                      "        var jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.not.be.empty;",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "ee62865f-ddbd-4d81-9377-69548df3241f"
                  }
                }
              ]
            },
            {
              "id": "6279e449-b739-4516-958b-8fd400b8aa25",
              "name": "Delete Marker",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "markers",
                    "test_marker"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a8162679-5fbc-495d-a134-7722481a087c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});"
                    ],
                    "_lastExecutionId": "30b557f1-9058-4431-bcde-d0434a642d97"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "4c35bb1c-0b45-47c9-a4fb-84fe3ad76eee",
          "length": 34,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "88f864b0-a1d4-47bb-befb-9887af725b4a",
          "scriptId": "6cbef540-3351-4458-b028-ef7557dabdb9",
          "execution": "976105fc-c369-4cea-86f5-cd90f59de04d"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Response contains created marker",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:21)",
          "checksum": "dfa65df01e5f9c187f0fcefb2ccf9731",
          "id": "70e85014-2f1d-451c-96b1-bbf00c0942dc",
          "timestamp": 1758627604607,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 21,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "f3bc2747-6b59-40fc-896e-c38ff29965f1",
          "name": "Create Marker",
          "request": {
            "url": {
              "path": [
                "v1",
                "markers"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"_id\": \"test_marker\",\n  \"name\": \"Test Marker\",\n  \"type\": \"c\",\n  \"coo\": [0, 0],\n  \"year\": 2000,\n  \"data\": {\n    \"description\": \"Test marker\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6cbef540-3351-4458-b028-ef7557dabdb9",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200, 201, or 401\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 401]);",
                  "});",
                  "if (pm.response.code !== 401) {",
                  "    pm.test(\"Response contains created marker\", function () {",
                  "        var jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.not.be.empty;",
                  "        if (jsonData._id) {",
                  "            pm.globals.set(\"markerId\", jsonData._id);",
                  "        }",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "976105fc-c369-4cea-86f5-cd90f59de04d"
              }
            }
          ]
        },
        "parent": {
          "id": "fcdf765d-0019-4744-8ca2-fe21a58b0ca6",
          "name": "Markers (2nd Most Used - 33k requests)",
          "item": [
            {
              "id": "dfff1a6f-69ea-400e-b5cd-c1960322f443",
              "name": "Get Single Marker",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "markers",
                    ""
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "count",
                      "value": "1"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "95d1a2fb-f815-4579-9e8b-9ce59ed14b6d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response contains marker data\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "5989902e-ef84-4a0e-af75-22088a515bd5"
                  }
                }
              ]
            },
            {
              "id": "6c8c604a-c3d2-46e0-9f4f-034e24405740",
              "name": "Get Markers with Types and Count",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "markers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "types",
                      "value": "a,ar,at,b,c,ca,cp,e,m,op,p,r,s,si"
                    },
                    {
                      "key": "year",
                      "value": "714"
                    },
                    {
                      "key": "count",
                      "value": "3000"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "15ebf48d-fd1c-4590-bdbb-7e3cdac21ce5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response time is acceptable for large dataset\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});",
                      "pm.test(\"Response contains markers with valid structure\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an(\"array\");",
                      "    pm.expect(jsonData.length).to.be.greaterThan(0);",
                      "    if (jsonData.length > 0) {",
                      "        pm.expect(jsonData[0]).to.have.property(\"_id\");",
                      "        pm.expect(jsonData[0]).to.have.property(\"name\");",
                      "        pm.expect(jsonData[0]).to.have.property(\"coo\");",
                      "        if (jsonData[0].coo && jsonData[0].coo.length === 2) {",
                      "            pm.expect(jsonData[0].coo[0]).to.be.within(-90, 90);",
                      "            pm.expect(jsonData[0].coo[1]).to.be.within(-180, 180);",
                      "        }",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "62d6a0ec-bbf9-4d82-a5fa-9fbe8b54d179"
                  }
                }
              ]
            },
            {
              "id": "99a2b0e6-ac55-4337-8ab9-dc9f858c5c79",
              "name": "Get Limited Markers",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "markers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "types",
                      "value": "a,ar,at,b,c,ca,cp,e,m,op,p,r,s,si"
                    },
                    {
                      "key": "year",
                      "value": "1945"
                    },
                    {
                      "key": "count",
                      "value": "100"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "04d34445-0ac5-449d-ad3a-5f2b1fcb097b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response contains exactly 100 or fewer markers\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "    pm.expect(jsonData.length).to.be.at.most(100);",
                      "});"
                    ],
                    "_lastExecutionId": "ebf70d3e-e029-4c89-956b-900b4cf6fade"
                  }
                }
              ]
            },
            {
              "id": "f3bc2747-6b59-40fc-896e-c38ff29965f1",
              "name": "Create Marker",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "markers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"_id\": \"test_marker\",\n  \"name\": \"Test Marker\",\n  \"type\": \"c\",\n  \"coo\": [0, 0],\n  \"year\": 2000,\n  \"data\": {\n    \"description\": \"Test marker\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6cbef540-3351-4458-b028-ef7557dabdb9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200, 201, or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 401]);",
                      "});",
                      "if (pm.response.code !== 401) {",
                      "    pm.test(\"Response contains created marker\", function () {",
                      "        var jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.not.be.empty;",
                      "        if (jsonData._id) {",
                      "            pm.globals.set(\"markerId\", jsonData._id);",
                      "        }",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "976105fc-c369-4cea-86f5-cd90f59de04d"
                  }
                }
              ]
            },
            {
              "id": "35f9cafd-aa14-4fda-8f62-1d976e065dbe",
              "name": "Update Marker",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "markers",
                    "test_marker"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Updated Test Marker\",\n  \"data\": {\n    \"description\": \"Updated test marker\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6cfae020-c6f6-44f2-9de8-fe649c1cc726",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});",
                      "if (pm.response.code !== 401) {",
                      "    pm.test(\"Response contains updated marker\", function () {",
                      "        var jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.not.be.empty;",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "ee62865f-ddbd-4d81-9377-69548df3241f"
                  }
                }
              ]
            },
            {
              "id": "6279e449-b739-4516-958b-8fd400b8aa25",
              "name": "Delete Marker",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "markers",
                    "test_marker"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a8162679-5fbc-495d-a134-7722481a087c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});"
                    ],
                    "_lastExecutionId": "30b557f1-9058-4431-bcde-d0434a642d97"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "4c35bb1c-0b45-47c9-a4fb-84fe3ad76eee",
          "length": 34,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "88f864b0-a1d4-47bb-befb-9887af725b4a",
          "scriptId": "6cbef540-3351-4458-b028-ef7557dabdb9",
          "execution": "976105fc-c369-4cea-86f5-cd90f59de04d"
        }
      },
      {
        "error": {
          "errno": -61,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3001,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:3001",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:3001\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1637:16)",
          "checksum": "f958207822d918da82c40a9f858a19c2",
          "id": "8ee16dfb-802b-419d-82cd-fc5ad6b46007",
          "timestamp": 1758627604615,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1637,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "35f9cafd-aa14-4fda-8f62-1d976e065dbe",
          "name": "Update Marker",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3001",
              "path": [
                "v1",
                "markers",
                "test_marker"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "c1404b0d-3e23-4b2f-9c45-9e0921c88296",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:3001",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Updated Test Marker\",\n  \"data\": {\n    \"description\": \"Updated test marker\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6cfae020-c6f6-44f2-9de8-fe649c1cc726",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200 or 401\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                  "});",
                  "if (pm.response.code !== 401) {",
                  "    pm.test(\"Response contains updated marker\", function () {",
                  "        var jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.not.be.empty;",
                  "    });",
                  "}"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "71ba0a93-675d-4be7-8c4c-6e3ea637ba6c",
          "length": 34,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "1855714f-c6a9-4d6d-819b-3f0a006f94c5"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200 or 401",
          "message": "expected undefined to be one of [ 200, 401 ]",
          "stack": "AssertionError: expected undefined to be one of [ 200, 401 ]\n   at Object.eval sandbox-script.js:1:22)",
          "checksum": "61ab0140baa420e304ffa04a16530440",
          "id": "d5ded0de-3e0e-46e3-96d8-876906495a03",
          "timestamp": 1758627604618,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 22,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "35f9cafd-aa14-4fda-8f62-1d976e065dbe",
          "name": "Update Marker",
          "request": {
            "url": {
              "path": [
                "v1",
                "markers",
                "test_marker"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Updated Test Marker\",\n  \"data\": {\n    \"description\": \"Updated test marker\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6cfae020-c6f6-44f2-9de8-fe649c1cc726",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200 or 401\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                  "});",
                  "if (pm.response.code !== 401) {",
                  "    pm.test(\"Response contains updated marker\", function () {",
                  "        var jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.not.be.empty;",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "ee62865f-ddbd-4d81-9377-69548df3241f"
              }
            }
          ]
        },
        "parent": {
          "id": "fcdf765d-0019-4744-8ca2-fe21a58b0ca6",
          "name": "Markers (2nd Most Used - 33k requests)",
          "item": [
            {
              "id": "dfff1a6f-69ea-400e-b5cd-c1960322f443",
              "name": "Get Single Marker",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "markers",
                    ""
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "count",
                      "value": "1"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "95d1a2fb-f815-4579-9e8b-9ce59ed14b6d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response contains marker data\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "5989902e-ef84-4a0e-af75-22088a515bd5"
                  }
                }
              ]
            },
            {
              "id": "6c8c604a-c3d2-46e0-9f4f-034e24405740",
              "name": "Get Markers with Types and Count",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "markers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "types",
                      "value": "a,ar,at,b,c,ca,cp,e,m,op,p,r,s,si"
                    },
                    {
                      "key": "year",
                      "value": "714"
                    },
                    {
                      "key": "count",
                      "value": "3000"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "15ebf48d-fd1c-4590-bdbb-7e3cdac21ce5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response time is acceptable for large dataset\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});",
                      "pm.test(\"Response contains markers with valid structure\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an(\"array\");",
                      "    pm.expect(jsonData.length).to.be.greaterThan(0);",
                      "    if (jsonData.length > 0) {",
                      "        pm.expect(jsonData[0]).to.have.property(\"_id\");",
                      "        pm.expect(jsonData[0]).to.have.property(\"name\");",
                      "        pm.expect(jsonData[0]).to.have.property(\"coo\");",
                      "        if (jsonData[0].coo && jsonData[0].coo.length === 2) {",
                      "            pm.expect(jsonData[0].coo[0]).to.be.within(-90, 90);",
                      "            pm.expect(jsonData[0].coo[1]).to.be.within(-180, 180);",
                      "        }",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "62d6a0ec-bbf9-4d82-a5fa-9fbe8b54d179"
                  }
                }
              ]
            },
            {
              "id": "99a2b0e6-ac55-4337-8ab9-dc9f858c5c79",
              "name": "Get Limited Markers",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "markers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "types",
                      "value": "a,ar,at,b,c,ca,cp,e,m,op,p,r,s,si"
                    },
                    {
                      "key": "year",
                      "value": "1945"
                    },
                    {
                      "key": "count",
                      "value": "100"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "04d34445-0ac5-449d-ad3a-5f2b1fcb097b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response contains exactly 100 or fewer markers\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "    pm.expect(jsonData.length).to.be.at.most(100);",
                      "});"
                    ],
                    "_lastExecutionId": "ebf70d3e-e029-4c89-956b-900b4cf6fade"
                  }
                }
              ]
            },
            {
              "id": "f3bc2747-6b59-40fc-896e-c38ff29965f1",
              "name": "Create Marker",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "markers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"_id\": \"test_marker\",\n  \"name\": \"Test Marker\",\n  \"type\": \"c\",\n  \"coo\": [0, 0],\n  \"year\": 2000,\n  \"data\": {\n    \"description\": \"Test marker\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6cbef540-3351-4458-b028-ef7557dabdb9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200, 201, or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 401]);",
                      "});",
                      "if (pm.response.code !== 401) {",
                      "    pm.test(\"Response contains created marker\", function () {",
                      "        var jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.not.be.empty;",
                      "        if (jsonData._id) {",
                      "            pm.globals.set(\"markerId\", jsonData._id);",
                      "        }",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "976105fc-c369-4cea-86f5-cd90f59de04d"
                  }
                }
              ]
            },
            {
              "id": "35f9cafd-aa14-4fda-8f62-1d976e065dbe",
              "name": "Update Marker",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "markers",
                    "test_marker"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Updated Test Marker\",\n  \"data\": {\n    \"description\": \"Updated test marker\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6cfae020-c6f6-44f2-9de8-fe649c1cc726",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});",
                      "if (pm.response.code !== 401) {",
                      "    pm.test(\"Response contains updated marker\", function () {",
                      "        var jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.not.be.empty;",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "ee62865f-ddbd-4d81-9377-69548df3241f"
                  }
                }
              ]
            },
            {
              "id": "6279e449-b739-4516-958b-8fd400b8aa25",
              "name": "Delete Marker",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "markers",
                    "test_marker"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a8162679-5fbc-495d-a134-7722481a087c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});"
                    ],
                    "_lastExecutionId": "30b557f1-9058-4431-bcde-d0434a642d97"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "71ba0a93-675d-4be7-8c4c-6e3ea637ba6c",
          "length": 34,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "1855714f-c6a9-4d6d-819b-3f0a006f94c5",
          "scriptId": "6cfae020-c6f6-44f2-9de8-fe649c1cc726",
          "execution": "ee62865f-ddbd-4d81-9377-69548df3241f"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Response contains updated marker",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:22)",
          "checksum": "165d58d21243ba01759328e794643aa4",
          "id": "a4f5c9c8-9c83-47a8-b838-b54eecedbd2c",
          "timestamp": 1758627604618,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 22,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "35f9cafd-aa14-4fda-8f62-1d976e065dbe",
          "name": "Update Marker",
          "request": {
            "url": {
              "path": [
                "v1",
                "markers",
                "test_marker"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Updated Test Marker\",\n  \"data\": {\n    \"description\": \"Updated test marker\"\n  }\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "6cfae020-c6f6-44f2-9de8-fe649c1cc726",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200 or 401\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                  "});",
                  "if (pm.response.code !== 401) {",
                  "    pm.test(\"Response contains updated marker\", function () {",
                  "        var jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.not.be.empty;",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "ee62865f-ddbd-4d81-9377-69548df3241f"
              }
            }
          ]
        },
        "parent": {
          "id": "fcdf765d-0019-4744-8ca2-fe21a58b0ca6",
          "name": "Markers (2nd Most Used - 33k requests)",
          "item": [
            {
              "id": "dfff1a6f-69ea-400e-b5cd-c1960322f443",
              "name": "Get Single Marker",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "markers",
                    ""
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "count",
                      "value": "1"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "95d1a2fb-f815-4579-9e8b-9ce59ed14b6d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response contains marker data\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "5989902e-ef84-4a0e-af75-22088a515bd5"
                  }
                }
              ]
            },
            {
              "id": "6c8c604a-c3d2-46e0-9f4f-034e24405740",
              "name": "Get Markers with Types and Count",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "markers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "types",
                      "value": "a,ar,at,b,c,ca,cp,e,m,op,p,r,s,si"
                    },
                    {
                      "key": "year",
                      "value": "714"
                    },
                    {
                      "key": "count",
                      "value": "3000"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "15ebf48d-fd1c-4590-bdbb-7e3cdac21ce5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response time is acceptable for large dataset\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});",
                      "pm.test(\"Response contains markers with valid structure\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an(\"array\");",
                      "    pm.expect(jsonData.length).to.be.greaterThan(0);",
                      "    if (jsonData.length > 0) {",
                      "        pm.expect(jsonData[0]).to.have.property(\"_id\");",
                      "        pm.expect(jsonData[0]).to.have.property(\"name\");",
                      "        pm.expect(jsonData[0]).to.have.property(\"coo\");",
                      "        if (jsonData[0].coo && jsonData[0].coo.length === 2) {",
                      "            pm.expect(jsonData[0].coo[0]).to.be.within(-90, 90);",
                      "            pm.expect(jsonData[0].coo[1]).to.be.within(-180, 180);",
                      "        }",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "62d6a0ec-bbf9-4d82-a5fa-9fbe8b54d179"
                  }
                }
              ]
            },
            {
              "id": "99a2b0e6-ac55-4337-8ab9-dc9f858c5c79",
              "name": "Get Limited Markers",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "markers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "types",
                      "value": "a,ar,at,b,c,ca,cp,e,m,op,p,r,s,si"
                    },
                    {
                      "key": "year",
                      "value": "1945"
                    },
                    {
                      "key": "count",
                      "value": "100"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "04d34445-0ac5-449d-ad3a-5f2b1fcb097b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response contains exactly 100 or fewer markers\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "    pm.expect(jsonData.length).to.be.at.most(100);",
                      "});"
                    ],
                    "_lastExecutionId": "ebf70d3e-e029-4c89-956b-900b4cf6fade"
                  }
                }
              ]
            },
            {
              "id": "f3bc2747-6b59-40fc-896e-c38ff29965f1",
              "name": "Create Marker",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "markers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"_id\": \"test_marker\",\n  \"name\": \"Test Marker\",\n  \"type\": \"c\",\n  \"coo\": [0, 0],\n  \"year\": 2000,\n  \"data\": {\n    \"description\": \"Test marker\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6cbef540-3351-4458-b028-ef7557dabdb9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200, 201, or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 401]);",
                      "});",
                      "if (pm.response.code !== 401) {",
                      "    pm.test(\"Response contains created marker\", function () {",
                      "        var jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.not.be.empty;",
                      "        if (jsonData._id) {",
                      "            pm.globals.set(\"markerId\", jsonData._id);",
                      "        }",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "976105fc-c369-4cea-86f5-cd90f59de04d"
                  }
                }
              ]
            },
            {
              "id": "35f9cafd-aa14-4fda-8f62-1d976e065dbe",
              "name": "Update Marker",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "markers",
                    "test_marker"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Updated Test Marker\",\n  \"data\": {\n    \"description\": \"Updated test marker\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6cfae020-c6f6-44f2-9de8-fe649c1cc726",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});",
                      "if (pm.response.code !== 401) {",
                      "    pm.test(\"Response contains updated marker\", function () {",
                      "        var jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.not.be.empty;",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "ee62865f-ddbd-4d81-9377-69548df3241f"
                  }
                }
              ]
            },
            {
              "id": "6279e449-b739-4516-958b-8fd400b8aa25",
              "name": "Delete Marker",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "markers",
                    "test_marker"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a8162679-5fbc-495d-a134-7722481a087c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});"
                    ],
                    "_lastExecutionId": "30b557f1-9058-4431-bcde-d0434a642d97"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "71ba0a93-675d-4be7-8c4c-6e3ea637ba6c",
          "length": 34,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "1855714f-c6a9-4d6d-819b-3f0a006f94c5",
          "scriptId": "6cfae020-c6f6-44f2-9de8-fe649c1cc726",
          "execution": "ee62865f-ddbd-4d81-9377-69548df3241f"
        }
      },
      {
        "error": {
          "errno": -61,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3001,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:3001",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:3001\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1637:16)",
          "checksum": "f958207822d918da82c40a9f858a19c2",
          "id": "843e5672-5dd6-4d01-bdde-3b3ac8b429c8",
          "timestamp": 1758627604627,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1637,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "6279e449-b739-4516-958b-8fd400b8aa25",
          "name": "Delete Marker",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3001",
              "path": [
                "v1",
                "markers",
                "test_marker"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "68944098-b3bb-4844-8e60-919faa256783",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:3001",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a8162679-5fbc-495d-a134-7722481a087c",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200 or 401\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "dac08b4c-0de8-4dd6-9113-e2549ee4ed3e",
          "length": 34,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "959939bc-3fd9-4d19-84f1-b30a10e67824"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200 or 401",
          "message": "expected undefined to be one of [ 200, 401 ]",
          "stack": "AssertionError: expected undefined to be one of [ 200, 401 ]\n   at Object.eval sandbox-script.js:1:23)",
          "checksum": "25d534d2f589f58438d4bb74af97fd25",
          "id": "fdfdf492-7020-4bb6-bb09-6bdf1f44fa77",
          "timestamp": 1758627604629,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 23,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "6279e449-b739-4516-958b-8fd400b8aa25",
          "name": "Delete Marker",
          "request": {
            "url": {
              "path": [
                "v1",
                "markers",
                "test_marker"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a8162679-5fbc-495d-a134-7722481a087c",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200 or 401\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                  "});"
                ],
                "_lastExecutionId": "30b557f1-9058-4431-bcde-d0434a642d97"
              }
            }
          ]
        },
        "parent": {
          "id": "fcdf765d-0019-4744-8ca2-fe21a58b0ca6",
          "name": "Markers (2nd Most Used - 33k requests)",
          "item": [
            {
              "id": "dfff1a6f-69ea-400e-b5cd-c1960322f443",
              "name": "Get Single Marker",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "markers",
                    ""
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "count",
                      "value": "1"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "95d1a2fb-f815-4579-9e8b-9ce59ed14b6d",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response contains marker data\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "5989902e-ef84-4a0e-af75-22088a515bd5"
                  }
                }
              ]
            },
            {
              "id": "6c8c604a-c3d2-46e0-9f4f-034e24405740",
              "name": "Get Markers with Types and Count",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "markers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "types",
                      "value": "a,ar,at,b,c,ca,cp,e,m,op,p,r,s,si"
                    },
                    {
                      "key": "year",
                      "value": "714"
                    },
                    {
                      "key": "count",
                      "value": "3000"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "15ebf48d-fd1c-4590-bdbb-7e3cdac21ce5",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response time is acceptable for large dataset\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});",
                      "pm.test(\"Response contains markers with valid structure\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an(\"array\");",
                      "    pm.expect(jsonData.length).to.be.greaterThan(0);",
                      "    if (jsonData.length > 0) {",
                      "        pm.expect(jsonData[0]).to.have.property(\"_id\");",
                      "        pm.expect(jsonData[0]).to.have.property(\"name\");",
                      "        pm.expect(jsonData[0]).to.have.property(\"coo\");",
                      "        if (jsonData[0].coo && jsonData[0].coo.length === 2) {",
                      "            pm.expect(jsonData[0].coo[0]).to.be.within(-90, 90);",
                      "            pm.expect(jsonData[0].coo[1]).to.be.within(-180, 180);",
                      "        }",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "62d6a0ec-bbf9-4d82-a5fa-9fbe8b54d179"
                  }
                }
              ]
            },
            {
              "id": "99a2b0e6-ac55-4337-8ab9-dc9f858c5c79",
              "name": "Get Limited Markers",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "markers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "types",
                      "value": "a,ar,at,b,c,ca,cp,e,m,op,p,r,s,si"
                    },
                    {
                      "key": "year",
                      "value": "1945"
                    },
                    {
                      "key": "count",
                      "value": "100"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "04d34445-0ac5-449d-ad3a-5f2b1fcb097b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response contains exactly 100 or fewer markers\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "    pm.expect(jsonData.length).to.be.at.most(100);",
                      "});"
                    ],
                    "_lastExecutionId": "ebf70d3e-e029-4c89-956b-900b4cf6fade"
                  }
                }
              ]
            },
            {
              "id": "f3bc2747-6b59-40fc-896e-c38ff29965f1",
              "name": "Create Marker",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "markers"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"_id\": \"test_marker\",\n  \"name\": \"Test Marker\",\n  \"type\": \"c\",\n  \"coo\": [0, 0],\n  \"year\": 2000,\n  \"data\": {\n    \"description\": \"Test marker\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6cbef540-3351-4458-b028-ef7557dabdb9",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200, 201, or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 201, 401]);",
                      "});",
                      "if (pm.response.code !== 401) {",
                      "    pm.test(\"Response contains created marker\", function () {",
                      "        var jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.not.be.empty;",
                      "        if (jsonData._id) {",
                      "            pm.globals.set(\"markerId\", jsonData._id);",
                      "        }",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "976105fc-c369-4cea-86f5-cd90f59de04d"
                  }
                }
              ]
            },
            {
              "id": "35f9cafd-aa14-4fda-8f62-1d976e065dbe",
              "name": "Update Marker",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "markers",
                    "test_marker"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"name\": \"Updated Test Marker\",\n  \"data\": {\n    \"description\": \"Updated test marker\"\n  }\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "6cfae020-c6f6-44f2-9de8-fe649c1cc726",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});",
                      "if (pm.response.code !== 401) {",
                      "    pm.test(\"Response contains updated marker\", function () {",
                      "        var jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.not.be.empty;",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "ee62865f-ddbd-4d81-9377-69548df3241f"
                  }
                }
              ]
            },
            {
              "id": "6279e449-b739-4516-958b-8fd400b8aa25",
              "name": "Delete Marker",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "markers",
                    "test_marker"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a8162679-5fbc-495d-a134-7722481a087c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});"
                    ],
                    "_lastExecutionId": "30b557f1-9058-4431-bcde-d0434a642d97"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "dac08b4c-0de8-4dd6-9113-e2549ee4ed3e",
          "length": 34,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "959939bc-3fd9-4d19-84f1-b30a10e67824",
          "scriptId": "a8162679-5fbc-495d-a134-7722481a087c",
          "execution": "30b557f1-9058-4431-bcde-d0434a642d97"
        }
      },
      {
        "error": {
          "errno": -61,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3001,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:3001",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:3001\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1637:16)",
          "checksum": "f958207822d918da82c40a9f858a19c2",
          "id": "af5aad59-cddd-4e72-85f5-540bcf94f15a",
          "timestamp": 1758627604636,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1637,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "13a8ce98-7dbb-4236-95d6-c66992b9c07d",
          "name": "Get Areas List",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3001",
              "path": [
                "v1",
                "areas"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "cf2abefc-df6e-4fe9-86c0-c893bca2ae97",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:3001",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "122548d7-42f7-4b0e-8f53-9fc378d30040",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Response contains areas data\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "6e152873-ede1-4ce2-9791-98a9bdf4cbcb",
          "length": 34,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "a6584145-7fee-449f-9736-3685ca062145"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:24)",
          "checksum": "c06b10aae7d1e198bcf8490807b193f0",
          "id": "2fb2638f-5510-4c4d-af4e-fd41ff4b7cb0",
          "timestamp": 1758627604638,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 24,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "13a8ce98-7dbb-4236-95d6-c66992b9c07d",
          "name": "Get Areas List",
          "request": {
            "url": {
              "path": [
                "v1",
                "areas"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "122548d7-42f7-4b0e-8f53-9fc378d30040",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Response contains areas data\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});"
                ],
                "_lastExecutionId": "727484d4-8c7b-4702-b355-5af15306f3a3"
              }
            }
          ]
        },
        "parent": {
          "id": "e47d75e2-375b-4e03-b0c5-53956befd6ea",
          "name": "Areas (3rd Most Used - 4k+ requests)",
          "item": [
            {
              "id": "13a8ce98-7dbb-4236-95d6-c66992b9c07d",
              "name": "Get Areas List",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "areas"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "122548d7-42f7-4b0e-8f53-9fc378d30040",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response contains areas data\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "727484d4-8c7b-4702-b355-5af15306f3a3"
                  }
                }
              ]
            },
            {
              "id": "06981e0b-7744-4fd5-a112-c98bb1417abc",
              "name": "Get Area by Year (2000)",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "areas",
                    "2000"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b1a73ddc-8bf9-4555-b319-86353421d2f8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response time is acceptable for historical data\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});",
                      "pm.test(\"Response contains valid area data for year 2000\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an(\"object\");",
                      "    pm.expect(Object.keys(jsonData).length).to.be.greaterThan(0);",
                      "    var firstKey = Object.keys(jsonData)[0];",
                      "    if (firstKey && jsonData[firstKey]) {",
                      "        pm.expect(jsonData[firstKey]).to.satisfy(function(value) {",
                      "            return Array.isArray(value) || typeof value === \"object\";",
                      "        });",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "628202db-b651-4f35-98ce-33ace9a6862e"
                  }
                }
              ]
            },
            {
              "id": "b9c9de0d-6c15-413c-92ac-72cab9eaa47c",
              "name": "Get Area by Year (-2000)",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "areas",
                    "-2000"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "857fb6ae-6a45-44cc-91a1-adb6c6b7750b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "f13b0bc4-808f-4e90-922f-0fb87ff22a06"
                  }
                }
              ]
            },
            {
              "id": "a047c2d0-0775-4b4e-9123-bb91dc8a530f",
              "name": "Get Historical Areas (1947)",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "areas",
                    "1947"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d9f5972c-5fd2-4189-ab39-da1a6dd028aa",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "8b60bf27-3031-44e4-855c-19a9b77bb409"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "6e152873-ede1-4ce2-9791-98a9bdf4cbcb",
          "length": 34,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "a6584145-7fee-449f-9736-3685ca062145",
          "scriptId": "122548d7-42f7-4b0e-8f53-9fc378d30040",
          "execution": "727484d4-8c7b-4702-b355-5af15306f3a3"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Response contains areas data",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:24)",
          "checksum": "fa06b268b737dbd2a5254b188732ef41",
          "id": "bbb19498-e6f7-4077-8d71-8f5eb88cc3d1",
          "timestamp": 1758627604639,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 24,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "13a8ce98-7dbb-4236-95d6-c66992b9c07d",
          "name": "Get Areas List",
          "request": {
            "url": {
              "path": [
                "v1",
                "areas"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "122548d7-42f7-4b0e-8f53-9fc378d30040",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Response contains areas data\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});"
                ],
                "_lastExecutionId": "727484d4-8c7b-4702-b355-5af15306f3a3"
              }
            }
          ]
        },
        "parent": {
          "id": "e47d75e2-375b-4e03-b0c5-53956befd6ea",
          "name": "Areas (3rd Most Used - 4k+ requests)",
          "item": [
            {
              "id": "13a8ce98-7dbb-4236-95d6-c66992b9c07d",
              "name": "Get Areas List",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "areas"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "122548d7-42f7-4b0e-8f53-9fc378d30040",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response contains areas data\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "727484d4-8c7b-4702-b355-5af15306f3a3"
                  }
                }
              ]
            },
            {
              "id": "06981e0b-7744-4fd5-a112-c98bb1417abc",
              "name": "Get Area by Year (2000)",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "areas",
                    "2000"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b1a73ddc-8bf9-4555-b319-86353421d2f8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response time is acceptable for historical data\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});",
                      "pm.test(\"Response contains valid area data for year 2000\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an(\"object\");",
                      "    pm.expect(Object.keys(jsonData).length).to.be.greaterThan(0);",
                      "    var firstKey = Object.keys(jsonData)[0];",
                      "    if (firstKey && jsonData[firstKey]) {",
                      "        pm.expect(jsonData[firstKey]).to.satisfy(function(value) {",
                      "            return Array.isArray(value) || typeof value === \"object\";",
                      "        });",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "628202db-b651-4f35-98ce-33ace9a6862e"
                  }
                }
              ]
            },
            {
              "id": "b9c9de0d-6c15-413c-92ac-72cab9eaa47c",
              "name": "Get Area by Year (-2000)",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "areas",
                    "-2000"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "857fb6ae-6a45-44cc-91a1-adb6c6b7750b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "f13b0bc4-808f-4e90-922f-0fb87ff22a06"
                  }
                }
              ]
            },
            {
              "id": "a047c2d0-0775-4b4e-9123-bb91dc8a530f",
              "name": "Get Historical Areas (1947)",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "areas",
                    "1947"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d9f5972c-5fd2-4189-ab39-da1a6dd028aa",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "8b60bf27-3031-44e4-855c-19a9b77bb409"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "6e152873-ede1-4ce2-9791-98a9bdf4cbcb",
          "length": 34,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "a6584145-7fee-449f-9736-3685ca062145",
          "scriptId": "122548d7-42f7-4b0e-8f53-9fc378d30040",
          "execution": "727484d4-8c7b-4702-b355-5af15306f3a3"
        }
      },
      {
        "error": {
          "errno": -61,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3001,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:3001",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:3001\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1637:16)",
          "checksum": "f958207822d918da82c40a9f858a19c2",
          "id": "1db06251-fee6-40cd-ae7a-b6dbdddc283a",
          "timestamp": 1758627604646,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1637,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "06981e0b-7744-4fd5-a112-c98bb1417abc",
          "name": "Get Area by Year (2000)",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3001",
              "path": [
                "v1",
                "areas",
                "2000"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "e3ffee1f-aec2-4187-aa97-551c9746fdd7",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:3001",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b1a73ddc-8bf9-4555-b319-86353421d2f8",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Response time is acceptable for historical data\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                  "});",
                  "pm.test(\"Response contains valid area data for year 2000\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an(\"object\");",
                  "    pm.expect(Object.keys(jsonData).length).to.be.greaterThan(0);",
                  "    var firstKey = Object.keys(jsonData)[0];",
                  "    if (firstKey && jsonData[firstKey]) {",
                  "        pm.expect(jsonData[firstKey]).to.satisfy(function(value) {",
                  "            return Array.isArray(value) || typeof value === \"object\";",
                  "        });",
                  "    }",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "7811e2f0-220e-480f-9540-d6fabf80dfc3",
          "length": 34,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "dea7843f-5291-4354-b9dc-7c2e8ec8db88"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:25)",
          "checksum": "55ba102c94e0ccb57e685bf4b1feac76",
          "id": "f450d236-cc80-4817-89d2-dd04c83c1e34",
          "timestamp": 1758627604649,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 25,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "06981e0b-7744-4fd5-a112-c98bb1417abc",
          "name": "Get Area by Year (2000)",
          "request": {
            "url": {
              "path": [
                "v1",
                "areas",
                "2000"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b1a73ddc-8bf9-4555-b319-86353421d2f8",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Response time is acceptable for historical data\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                  "});",
                  "pm.test(\"Response contains valid area data for year 2000\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an(\"object\");",
                  "    pm.expect(Object.keys(jsonData).length).to.be.greaterThan(0);",
                  "    var firstKey = Object.keys(jsonData)[0];",
                  "    if (firstKey && jsonData[firstKey]) {",
                  "        pm.expect(jsonData[firstKey]).to.satisfy(function(value) {",
                  "            return Array.isArray(value) || typeof value === \"object\";",
                  "        });",
                  "    }",
                  "});"
                ],
                "_lastExecutionId": "628202db-b651-4f35-98ce-33ace9a6862e"
              }
            }
          ]
        },
        "parent": {
          "id": "e47d75e2-375b-4e03-b0c5-53956befd6ea",
          "name": "Areas (3rd Most Used - 4k+ requests)",
          "item": [
            {
              "id": "13a8ce98-7dbb-4236-95d6-c66992b9c07d",
              "name": "Get Areas List",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "areas"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "122548d7-42f7-4b0e-8f53-9fc378d30040",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response contains areas data\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "727484d4-8c7b-4702-b355-5af15306f3a3"
                  }
                }
              ]
            },
            {
              "id": "06981e0b-7744-4fd5-a112-c98bb1417abc",
              "name": "Get Area by Year (2000)",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "areas",
                    "2000"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b1a73ddc-8bf9-4555-b319-86353421d2f8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response time is acceptable for historical data\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});",
                      "pm.test(\"Response contains valid area data for year 2000\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an(\"object\");",
                      "    pm.expect(Object.keys(jsonData).length).to.be.greaterThan(0);",
                      "    var firstKey = Object.keys(jsonData)[0];",
                      "    if (firstKey && jsonData[firstKey]) {",
                      "        pm.expect(jsonData[firstKey]).to.satisfy(function(value) {",
                      "            return Array.isArray(value) || typeof value === \"object\";",
                      "        });",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "628202db-b651-4f35-98ce-33ace9a6862e"
                  }
                }
              ]
            },
            {
              "id": "b9c9de0d-6c15-413c-92ac-72cab9eaa47c",
              "name": "Get Area by Year (-2000)",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "areas",
                    "-2000"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "857fb6ae-6a45-44cc-91a1-adb6c6b7750b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "f13b0bc4-808f-4e90-922f-0fb87ff22a06"
                  }
                }
              ]
            },
            {
              "id": "a047c2d0-0775-4b4e-9123-bb91dc8a530f",
              "name": "Get Historical Areas (1947)",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "areas",
                    "1947"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d9f5972c-5fd2-4189-ab39-da1a6dd028aa",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "8b60bf27-3031-44e4-855c-19a9b77bb409"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "7811e2f0-220e-480f-9540-d6fabf80dfc3",
          "length": 34,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "dea7843f-5291-4354-b9dc-7c2e8ec8db88",
          "scriptId": "b1a73ddc-8bf9-4555-b319-86353421d2f8",
          "execution": "628202db-b651-4f35-98ce-33ace9a6862e"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response time is acceptable for historical data",
          "message": "expected undefined to be a number or a date",
          "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:2:25)",
          "checksum": "c574475c768c156bcceab14b4114ca4c",
          "id": "3abbeae8-deb6-4d58-bc57-3d0422f46771",
          "timestamp": 1758627604649,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 25,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "06981e0b-7744-4fd5-a112-c98bb1417abc",
          "name": "Get Area by Year (2000)",
          "request": {
            "url": {
              "path": [
                "v1",
                "areas",
                "2000"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b1a73ddc-8bf9-4555-b319-86353421d2f8",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Response time is acceptable for historical data\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                  "});",
                  "pm.test(\"Response contains valid area data for year 2000\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an(\"object\");",
                  "    pm.expect(Object.keys(jsonData).length).to.be.greaterThan(0);",
                  "    var firstKey = Object.keys(jsonData)[0];",
                  "    if (firstKey && jsonData[firstKey]) {",
                  "        pm.expect(jsonData[firstKey]).to.satisfy(function(value) {",
                  "            return Array.isArray(value) || typeof value === \"object\";",
                  "        });",
                  "    }",
                  "});"
                ],
                "_lastExecutionId": "628202db-b651-4f35-98ce-33ace9a6862e"
              }
            }
          ]
        },
        "parent": {
          "id": "e47d75e2-375b-4e03-b0c5-53956befd6ea",
          "name": "Areas (3rd Most Used - 4k+ requests)",
          "item": [
            {
              "id": "13a8ce98-7dbb-4236-95d6-c66992b9c07d",
              "name": "Get Areas List",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "areas"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "122548d7-42f7-4b0e-8f53-9fc378d30040",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response contains areas data\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "727484d4-8c7b-4702-b355-5af15306f3a3"
                  }
                }
              ]
            },
            {
              "id": "06981e0b-7744-4fd5-a112-c98bb1417abc",
              "name": "Get Area by Year (2000)",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "areas",
                    "2000"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b1a73ddc-8bf9-4555-b319-86353421d2f8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response time is acceptable for historical data\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});",
                      "pm.test(\"Response contains valid area data for year 2000\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an(\"object\");",
                      "    pm.expect(Object.keys(jsonData).length).to.be.greaterThan(0);",
                      "    var firstKey = Object.keys(jsonData)[0];",
                      "    if (firstKey && jsonData[firstKey]) {",
                      "        pm.expect(jsonData[firstKey]).to.satisfy(function(value) {",
                      "            return Array.isArray(value) || typeof value === \"object\";",
                      "        });",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "628202db-b651-4f35-98ce-33ace9a6862e"
                  }
                }
              ]
            },
            {
              "id": "b9c9de0d-6c15-413c-92ac-72cab9eaa47c",
              "name": "Get Area by Year (-2000)",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "areas",
                    "-2000"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "857fb6ae-6a45-44cc-91a1-adb6c6b7750b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "f13b0bc4-808f-4e90-922f-0fb87ff22a06"
                  }
                }
              ]
            },
            {
              "id": "a047c2d0-0775-4b4e-9123-bb91dc8a530f",
              "name": "Get Historical Areas (1947)",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "areas",
                    "1947"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d9f5972c-5fd2-4189-ab39-da1a6dd028aa",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "8b60bf27-3031-44e4-855c-19a9b77bb409"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "7811e2f0-220e-480f-9540-d6fabf80dfc3",
          "length": 34,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "dea7843f-5291-4354-b9dc-7c2e8ec8db88",
          "scriptId": "b1a73ddc-8bf9-4555-b319-86353421d2f8",
          "execution": "628202db-b651-4f35-98ce-33ace9a6862e"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 2,
          "test": "Response contains valid area data for year 2000",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:3:25)",
          "checksum": "f1fc301a383e72e9489cf7ed3c09ff0a",
          "id": "d9dbf8a5-5e1b-4756-a3af-eef9cdf34699",
          "timestamp": 1758627604649,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 25,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "06981e0b-7744-4fd5-a112-c98bb1417abc",
          "name": "Get Area by Year (2000)",
          "request": {
            "url": {
              "path": [
                "v1",
                "areas",
                "2000"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "b1a73ddc-8bf9-4555-b319-86353421d2f8",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Response time is acceptable for historical data\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                  "});",
                  "pm.test(\"Response contains valid area data for year 2000\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an(\"object\");",
                  "    pm.expect(Object.keys(jsonData).length).to.be.greaterThan(0);",
                  "    var firstKey = Object.keys(jsonData)[0];",
                  "    if (firstKey && jsonData[firstKey]) {",
                  "        pm.expect(jsonData[firstKey]).to.satisfy(function(value) {",
                  "            return Array.isArray(value) || typeof value === \"object\";",
                  "        });",
                  "    }",
                  "});"
                ],
                "_lastExecutionId": "628202db-b651-4f35-98ce-33ace9a6862e"
              }
            }
          ]
        },
        "parent": {
          "id": "e47d75e2-375b-4e03-b0c5-53956befd6ea",
          "name": "Areas (3rd Most Used - 4k+ requests)",
          "item": [
            {
              "id": "13a8ce98-7dbb-4236-95d6-c66992b9c07d",
              "name": "Get Areas List",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "areas"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "122548d7-42f7-4b0e-8f53-9fc378d30040",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response contains areas data\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "727484d4-8c7b-4702-b355-5af15306f3a3"
                  }
                }
              ]
            },
            {
              "id": "06981e0b-7744-4fd5-a112-c98bb1417abc",
              "name": "Get Area by Year (2000)",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "areas",
                    "2000"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b1a73ddc-8bf9-4555-b319-86353421d2f8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response time is acceptable for historical data\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});",
                      "pm.test(\"Response contains valid area data for year 2000\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an(\"object\");",
                      "    pm.expect(Object.keys(jsonData).length).to.be.greaterThan(0);",
                      "    var firstKey = Object.keys(jsonData)[0];",
                      "    if (firstKey && jsonData[firstKey]) {",
                      "        pm.expect(jsonData[firstKey]).to.satisfy(function(value) {",
                      "            return Array.isArray(value) || typeof value === \"object\";",
                      "        });",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "628202db-b651-4f35-98ce-33ace9a6862e"
                  }
                }
              ]
            },
            {
              "id": "b9c9de0d-6c15-413c-92ac-72cab9eaa47c",
              "name": "Get Area by Year (-2000)",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "areas",
                    "-2000"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "857fb6ae-6a45-44cc-91a1-adb6c6b7750b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "f13b0bc4-808f-4e90-922f-0fb87ff22a06"
                  }
                }
              ]
            },
            {
              "id": "a047c2d0-0775-4b4e-9123-bb91dc8a530f",
              "name": "Get Historical Areas (1947)",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "areas",
                    "1947"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d9f5972c-5fd2-4189-ab39-da1a6dd028aa",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "8b60bf27-3031-44e4-855c-19a9b77bb409"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "7811e2f0-220e-480f-9540-d6fabf80dfc3",
          "length": 34,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "dea7843f-5291-4354-b9dc-7c2e8ec8db88",
          "scriptId": "b1a73ddc-8bf9-4555-b319-86353421d2f8",
          "execution": "628202db-b651-4f35-98ce-33ace9a6862e"
        }
      },
      {
        "error": {
          "errno": -61,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3001,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:3001",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:3001\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1637:16)",
          "checksum": "f958207822d918da82c40a9f858a19c2",
          "id": "e09ec4fa-bb58-451a-8c89-9028618d2802",
          "timestamp": 1758627604657,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1637,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "b9c9de0d-6c15-413c-92ac-72cab9eaa47c",
          "name": "Get Area by Year (-2000)",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3001",
              "path": [
                "v1",
                "areas",
                "-2000"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "0c887bc1-7c3e-489a-8cd4-cc1663a68685",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:3001",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "857fb6ae-6a45-44cc-91a1-adb6c6b7750b",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "b73ecdf1-bdce-477f-9782-b38f94ac6dbe",
          "length": 34,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "d57de25f-65e9-42a4-b796-422ed3567b0b"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:26)",
          "checksum": "211bdb9652d5039b74d305514ec21c8d",
          "id": "6a94306b-6814-4eb9-831e-c89a87452958",
          "timestamp": 1758627604659,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 26,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "b9c9de0d-6c15-413c-92ac-72cab9eaa47c",
          "name": "Get Area by Year (-2000)",
          "request": {
            "url": {
              "path": [
                "v1",
                "areas",
                "-2000"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "857fb6ae-6a45-44cc-91a1-adb6c6b7750b",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "_lastExecutionId": "f13b0bc4-808f-4e90-922f-0fb87ff22a06"
              }
            }
          ]
        },
        "parent": {
          "id": "e47d75e2-375b-4e03-b0c5-53956befd6ea",
          "name": "Areas (3rd Most Used - 4k+ requests)",
          "item": [
            {
              "id": "13a8ce98-7dbb-4236-95d6-c66992b9c07d",
              "name": "Get Areas List",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "areas"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "122548d7-42f7-4b0e-8f53-9fc378d30040",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response contains areas data\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "727484d4-8c7b-4702-b355-5af15306f3a3"
                  }
                }
              ]
            },
            {
              "id": "06981e0b-7744-4fd5-a112-c98bb1417abc",
              "name": "Get Area by Year (2000)",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "areas",
                    "2000"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b1a73ddc-8bf9-4555-b319-86353421d2f8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response time is acceptable for historical data\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});",
                      "pm.test(\"Response contains valid area data for year 2000\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an(\"object\");",
                      "    pm.expect(Object.keys(jsonData).length).to.be.greaterThan(0);",
                      "    var firstKey = Object.keys(jsonData)[0];",
                      "    if (firstKey && jsonData[firstKey]) {",
                      "        pm.expect(jsonData[firstKey]).to.satisfy(function(value) {",
                      "            return Array.isArray(value) || typeof value === \"object\";",
                      "        });",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "628202db-b651-4f35-98ce-33ace9a6862e"
                  }
                }
              ]
            },
            {
              "id": "b9c9de0d-6c15-413c-92ac-72cab9eaa47c",
              "name": "Get Area by Year (-2000)",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "areas",
                    "-2000"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "857fb6ae-6a45-44cc-91a1-adb6c6b7750b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "f13b0bc4-808f-4e90-922f-0fb87ff22a06"
                  }
                }
              ]
            },
            {
              "id": "a047c2d0-0775-4b4e-9123-bb91dc8a530f",
              "name": "Get Historical Areas (1947)",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "areas",
                    "1947"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d9f5972c-5fd2-4189-ab39-da1a6dd028aa",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "8b60bf27-3031-44e4-855c-19a9b77bb409"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "b73ecdf1-bdce-477f-9782-b38f94ac6dbe",
          "length": 34,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "d57de25f-65e9-42a4-b796-422ed3567b0b",
          "scriptId": "857fb6ae-6a45-44cc-91a1-adb6c6b7750b",
          "execution": "f13b0bc4-808f-4e90-922f-0fb87ff22a06"
        }
      },
      {
        "error": {
          "errno": -61,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3001,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:3001",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:3001\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1637:16)",
          "checksum": "f958207822d918da82c40a9f858a19c2",
          "id": "aaf64f82-a1b5-4aaa-a136-6d2ec1a228f9",
          "timestamp": 1758627604667,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1637,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "a047c2d0-0775-4b4e-9123-bb91dc8a530f",
          "name": "Get Historical Areas (1947)",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3001",
              "path": [
                "v1",
                "areas",
                "1947"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "8f8ffa29-8314-4800-aa39-c49ee8f4164d",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:3001",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d9f5972c-5fd2-4189-ab39-da1a6dd028aa",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "a9dad484-dd3e-4091-86de-2d7b7bb3e599",
          "length": 34,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "a1cdbc27-e9af-4054-82c8-77fda82f9c45"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:27)",
          "checksum": "a5db5337487342bfb7842ff67baa3233",
          "id": "ef7a0538-0eae-481f-a45e-f0ab2a2895db",
          "timestamp": 1758627604670,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 27,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "a047c2d0-0775-4b4e-9123-bb91dc8a530f",
          "name": "Get Historical Areas (1947)",
          "request": {
            "url": {
              "path": [
                "v1",
                "areas",
                "1947"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "d9f5972c-5fd2-4189-ab39-da1a6dd028aa",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "_lastExecutionId": "8b60bf27-3031-44e4-855c-19a9b77bb409"
              }
            }
          ]
        },
        "parent": {
          "id": "e47d75e2-375b-4e03-b0c5-53956befd6ea",
          "name": "Areas (3rd Most Used - 4k+ requests)",
          "item": [
            {
              "id": "13a8ce98-7dbb-4236-95d6-c66992b9c07d",
              "name": "Get Areas List",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "areas"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "122548d7-42f7-4b0e-8f53-9fc378d30040",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response contains areas data\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "727484d4-8c7b-4702-b355-5af15306f3a3"
                  }
                }
              ]
            },
            {
              "id": "06981e0b-7744-4fd5-a112-c98bb1417abc",
              "name": "Get Area by Year (2000)",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "areas",
                    "2000"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "b1a73ddc-8bf9-4555-b319-86353421d2f8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response time is acceptable for historical data\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(3000);",
                      "});",
                      "pm.test(\"Response contains valid area data for year 2000\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an(\"object\");",
                      "    pm.expect(Object.keys(jsonData).length).to.be.greaterThan(0);",
                      "    var firstKey = Object.keys(jsonData)[0];",
                      "    if (firstKey && jsonData[firstKey]) {",
                      "        pm.expect(jsonData[firstKey]).to.satisfy(function(value) {",
                      "            return Array.isArray(value) || typeof value === \"object\";",
                      "        });",
                      "    }",
                      "});"
                    ],
                    "_lastExecutionId": "628202db-b651-4f35-98ce-33ace9a6862e"
                  }
                }
              ]
            },
            {
              "id": "b9c9de0d-6c15-413c-92ac-72cab9eaa47c",
              "name": "Get Area by Year (-2000)",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "areas",
                    "-2000"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "857fb6ae-6a45-44cc-91a1-adb6c6b7750b",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "f13b0bc4-808f-4e90-922f-0fb87ff22a06"
                  }
                }
              ]
            },
            {
              "id": "a047c2d0-0775-4b4e-9123-bb91dc8a530f",
              "name": "Get Historical Areas (1947)",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "areas",
                    "1947"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "d9f5972c-5fd2-4189-ab39-da1a6dd028aa",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});"
                    ],
                    "_lastExecutionId": "8b60bf27-3031-44e4-855c-19a9b77bb409"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "a9dad484-dd3e-4091-86de-2d7b7bb3e599",
          "length": 34,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "a1cdbc27-e9af-4054-82c8-77fda82f9c45",
          "scriptId": "d9f5972c-5fd2-4189-ab39-da1a6dd028aa",
          "execution": "8b60bf27-3031-44e4-855c-19a9b77bb409"
        }
      },
      {
        "error": {
          "errno": -61,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3001,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:3001",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:3001\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1637:16)",
          "checksum": "f958207822d918da82c40a9f858a19c2",
          "id": "b31c02f5-7d62-4829-9b39-26a3a75b72a7",
          "timestamp": 1758627604677,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1637,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "b1054e1d-00ec-4394-8599-3b9874d973bf",
          "name": "Get Forum Discussions",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3001",
              "path": [
                "v1",
                "board",
                "forum",
                "questions",
                "discussions"
              ],
              "host": [
                "localhost"
              ],
              "query": [
                {
                  "key": "sorting_method",
                  "value": "date"
                },
                {
                  "key": "q",
                  "value": "1:ae|ruler|KHI"
                },
                {
                  "key": "limit",
                  "value": "5"
                }
              ],
              "variable": []
            },
            "header": [
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "b3e54433-fd63-42d3-a437-f871e87f0727",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:3001",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ce1add36-eb1c-40fb-a85c-f48f2b142409",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Response contains discussions data\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "f9269dfd-d841-4559-89a4-1b820892e720",
          "length": 34,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "00c01af3-fb4a-4af8-a131-238fdc62b28d"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:28)",
          "checksum": "9db66707c35fd49750c8ee41c32c864e",
          "id": "49dcecf5-8ce2-43a0-a702-6eb5d9ececc9",
          "timestamp": 1758627604680,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 28,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "b1054e1d-00ec-4394-8599-3b9874d973bf",
          "name": "Get Forum Discussions",
          "request": {
            "url": {
              "path": [
                "v1",
                "board",
                "forum",
                "questions",
                "discussions"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "sorting_method",
                  "value": "date"
                },
                {
                  "key": "q",
                  "value": "1:ae|ruler|KHI"
                },
                {
                  "key": "limit",
                  "value": "5"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ce1add36-eb1c-40fb-a85c-f48f2b142409",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Response contains discussions data\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});"
                ],
                "_lastExecutionId": "d4f5f062-3b54-4d64-8a8e-9a09df6af274"
              }
            }
          ]
        },
        "parent": {
          "id": "fd2b55e9-e0cf-44a4-8eb3-f27ffddc0259",
          "name": "Board/Forum (4th Most Used - 11k requests)",
          "item": [
            {
              "id": "b1054e1d-00ec-4394-8599-3b9874d973bf",
              "name": "Get Forum Discussions",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "board",
                    "forum",
                    "questions",
                    "discussions"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "sorting_method",
                      "value": "date"
                    },
                    {
                      "key": "q",
                      "value": "1:ae|ruler|KHI"
                    },
                    {
                      "key": "limit",
                      "value": "5"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ce1add36-eb1c-40fb-a85c-f48f2b142409",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response contains discussions data\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "d4f5f062-3b54-4d64-8a8e-9a09df6af274"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "f9269dfd-d841-4559-89a4-1b820892e720",
          "length": 34,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "00c01af3-fb4a-4af8-a131-238fdc62b28d",
          "scriptId": "ce1add36-eb1c-40fb-a85c-f48f2b142409",
          "execution": "d4f5f062-3b54-4d64-8a8e-9a09df6af274"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Response contains discussions data",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:28)",
          "checksum": "f6d6ab8c1fa6a189eb5dbcb1ed86a12c",
          "id": "6605b336-4d50-4f6c-9616-dc29f6d8802b",
          "timestamp": 1758627604680,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 28,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "b1054e1d-00ec-4394-8599-3b9874d973bf",
          "name": "Get Forum Discussions",
          "request": {
            "url": {
              "path": [
                "v1",
                "board",
                "forum",
                "questions",
                "discussions"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [
                {
                  "key": "sorting_method",
                  "value": "date"
                },
                {
                  "key": "q",
                  "value": "1:ae|ruler|KHI"
                },
                {
                  "key": "limit",
                  "value": "5"
                }
              ],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "ce1add36-eb1c-40fb-a85c-f48f2b142409",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Response contains discussions data\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.be.an('array');",
                  "});"
                ],
                "_lastExecutionId": "d4f5f062-3b54-4d64-8a8e-9a09df6af274"
              }
            }
          ]
        },
        "parent": {
          "id": "fd2b55e9-e0cf-44a4-8eb3-f27ffddc0259",
          "name": "Board/Forum (4th Most Used - 11k requests)",
          "item": [
            {
              "id": "b1054e1d-00ec-4394-8599-3b9874d973bf",
              "name": "Get Forum Discussions",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "board",
                    "forum",
                    "questions",
                    "discussions"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [
                    {
                      "key": "sorting_method",
                      "value": "date"
                    },
                    {
                      "key": "q",
                      "value": "1:ae|ruler|KHI"
                    },
                    {
                      "key": "limit",
                      "value": "5"
                    }
                  ],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "ce1add36-eb1c-40fb-a85c-f48f2b142409",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response contains discussions data\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.be.an('array');",
                      "});"
                    ],
                    "_lastExecutionId": "d4f5f062-3b54-4d64-8a8e-9a09df6af274"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "f9269dfd-d841-4559-89a4-1b820892e720",
          "length": 34,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "00c01af3-fb4a-4af8-a131-238fdc62b28d",
          "scriptId": "ce1add36-eb1c-40fb-a85c-f48f2b142409",
          "execution": "d4f5f062-3b54-4d64-8a8e-9a09df6af274"
        }
      },
      {
        "error": {
          "errno": -61,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3001,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:3001",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:3001\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1637:16)",
          "checksum": "f958207822d918da82c40a9f858a19c2",
          "id": "68b803cf-9403-47d8-b64e-e583716054b3",
          "timestamp": 1758627604689,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1637,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "4e23fcb4-9ef1-4ea8-b41f-3318be2c55f4",
          "name": "Get User by Email",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3001",
              "path": [
                "v1",
                "users",
                "postman@aui.de"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "7263d8b3-ba93-4d74-84de-d59a9b65d8f8",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:3001",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a0fe48c3-1508-4e87-a7e5-a76beaac0541",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Response time is fast\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "pm.test(\"Response contains valid user structure\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property(\"email\");",
                  "    pm.expect(jsonData).to.have.property(\"username\");",
                  "    pm.expect(jsonData.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);",
                  "    pm.expect(jsonData.email).to.equal(\"postman@aui.de\");",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "75dbb7c5-c7f6-40fa-9da5-94666c479791",
          "length": 34,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "3423810e-89aa-46bf-bf2c-cafa7516416a"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:29)",
          "checksum": "8a5cce3ebef032b7f3a5c43c311874cf",
          "id": "d8f4e9d1-785f-4775-a5d3-504dd8d83476",
          "timestamp": 1758627604692,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 29,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "4e23fcb4-9ef1-4ea8-b41f-3318be2c55f4",
          "name": "Get User by Email",
          "request": {
            "url": {
              "path": [
                "v1",
                "users",
                "postman@aui.de"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a0fe48c3-1508-4e87-a7e5-a76beaac0541",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Response time is fast\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "pm.test(\"Response contains valid user structure\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property(\"email\");",
                  "    pm.expect(jsonData).to.have.property(\"username\");",
                  "    pm.expect(jsonData.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);",
                  "    pm.expect(jsonData.email).to.equal(\"postman@aui.de\");",
                  "});"
                ],
                "_lastExecutionId": "c4ffede9-306d-4f31-b0f5-01077ab19af2"
              }
            }
          ]
        },
        "parent": {
          "id": "8f8c4aad-27c2-415d-8867-717effdbb9e7",
          "name": "User Management",
          "item": [
            {
              "id": "4e23fcb4-9ef1-4ea8-b41f-3318be2c55f4",
              "name": "Get User by Email",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "users",
                    "postman@aui.de"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a0fe48c3-1508-4e87-a7e5-a76beaac0541",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response time is fast\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      "pm.test(\"Response contains valid user structure\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property(\"email\");",
                      "    pm.expect(jsonData).to.have.property(\"username\");",
                      "    pm.expect(jsonData.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);",
                      "    pm.expect(jsonData.email).to.equal(\"postman@aui.de\");",
                      "});"
                    ],
                    "_lastExecutionId": "c4ffede9-306d-4f31-b0f5-01077ab19af2"
                  }
                }
              ]
            },
            {
              "id": "18f21432-9d52-40da-89ac-6b0eb847f1bd",
              "name": "Create User",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "users",
                    ""
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"testUser@test.de\",\n  \"password\": \"testPassword123\",\n  \"username\": \"testUser\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e468a60e-0d8b-4ca3-b35b-43c0591b7300",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 400\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 400]);",
                      "});",
                      "if (pm.response.code === 200) {",
                      "    pm.test(\"Response contains valid user\", function () {",
                      "        var jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.have.property('email');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "a3e867c6-9e2a-47ba-91cf-cdac0608401a"
                  }
                }
              ]
            },
            {
              "id": "83acafef-d911-4a60-a5db-f7576521a65c",
              "name": "Update User",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "users",
                    "testUser@test.de"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"username\": \"updatedTestUser\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bd3a3429-5671-404f-90a0-c6de13860eb8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response contains valid user\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('email');",
                      "});"
                    ],
                    "_lastExecutionId": "387c4f5d-ca2c-4d9c-9c21-ccebcf83ed7b"
                  }
                }
              ]
            },
            {
              "id": "4d4a7d6b-7816-4fc7-b78c-94a7577476b4",
              "name": "Delete User",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "users",
                    "testUser@test.de"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0b1f4689-1267-466f-b1d7-6c095c2d276c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response contains valid user\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('email');",
                      "});"
                    ],
                    "_lastExecutionId": "bbd38b7d-d1c5-4a09-ab3f-c79b216c49bf"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "75dbb7c5-c7f6-40fa-9da5-94666c479791",
          "length": 34,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "3423810e-89aa-46bf-bf2c-cafa7516416a",
          "scriptId": "a0fe48c3-1508-4e87-a7e5-a76beaac0541",
          "execution": "c4ffede9-306d-4f31-b0f5-01077ab19af2"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 1,
          "test": "Response time is fast",
          "message": "expected undefined to be a number or a date",
          "stack": "AssertionError: expected undefined to be a number or a date\n   at Object.eval sandbox-script.js:2:29)",
          "checksum": "429c90385743c1a07ae526ce0cad5949",
          "id": "e2f00a6b-b3b7-4250-aefa-7109504d018b",
          "timestamp": 1758627604692,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 29,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "4e23fcb4-9ef1-4ea8-b41f-3318be2c55f4",
          "name": "Get User by Email",
          "request": {
            "url": {
              "path": [
                "v1",
                "users",
                "postman@aui.de"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a0fe48c3-1508-4e87-a7e5-a76beaac0541",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Response time is fast\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "pm.test(\"Response contains valid user structure\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property(\"email\");",
                  "    pm.expect(jsonData).to.have.property(\"username\");",
                  "    pm.expect(jsonData.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);",
                  "    pm.expect(jsonData.email).to.equal(\"postman@aui.de\");",
                  "});"
                ],
                "_lastExecutionId": "c4ffede9-306d-4f31-b0f5-01077ab19af2"
              }
            }
          ]
        },
        "parent": {
          "id": "8f8c4aad-27c2-415d-8867-717effdbb9e7",
          "name": "User Management",
          "item": [
            {
              "id": "4e23fcb4-9ef1-4ea8-b41f-3318be2c55f4",
              "name": "Get User by Email",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "users",
                    "postman@aui.de"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a0fe48c3-1508-4e87-a7e5-a76beaac0541",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response time is fast\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      "pm.test(\"Response contains valid user structure\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property(\"email\");",
                      "    pm.expect(jsonData).to.have.property(\"username\");",
                      "    pm.expect(jsonData.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);",
                      "    pm.expect(jsonData.email).to.equal(\"postman@aui.de\");",
                      "});"
                    ],
                    "_lastExecutionId": "c4ffede9-306d-4f31-b0f5-01077ab19af2"
                  }
                }
              ]
            },
            {
              "id": "18f21432-9d52-40da-89ac-6b0eb847f1bd",
              "name": "Create User",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "users",
                    ""
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"testUser@test.de\",\n  \"password\": \"testPassword123\",\n  \"username\": \"testUser\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e468a60e-0d8b-4ca3-b35b-43c0591b7300",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 400\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 400]);",
                      "});",
                      "if (pm.response.code === 200) {",
                      "    pm.test(\"Response contains valid user\", function () {",
                      "        var jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.have.property('email');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "a3e867c6-9e2a-47ba-91cf-cdac0608401a"
                  }
                }
              ]
            },
            {
              "id": "83acafef-d911-4a60-a5db-f7576521a65c",
              "name": "Update User",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "users",
                    "testUser@test.de"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"username\": \"updatedTestUser\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bd3a3429-5671-404f-90a0-c6de13860eb8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response contains valid user\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('email');",
                      "});"
                    ],
                    "_lastExecutionId": "387c4f5d-ca2c-4d9c-9c21-ccebcf83ed7b"
                  }
                }
              ]
            },
            {
              "id": "4d4a7d6b-7816-4fc7-b78c-94a7577476b4",
              "name": "Delete User",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "users",
                    "testUser@test.de"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0b1f4689-1267-466f-b1d7-6c095c2d276c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response contains valid user\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('email');",
                      "});"
                    ],
                    "_lastExecutionId": "bbd38b7d-d1c5-4a09-ab3f-c79b216c49bf"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "75dbb7c5-c7f6-40fa-9da5-94666c479791",
          "length": 34,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "3423810e-89aa-46bf-bf2c-cafa7516416a",
          "scriptId": "a0fe48c3-1508-4e87-a7e5-a76beaac0541",
          "execution": "c4ffede9-306d-4f31-b0f5-01077ab19af2"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 2,
          "test": "Response contains valid user structure",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:3:29)",
          "checksum": "7fa828406e3594371ac532af779d913c",
          "id": "2d67c6a8-3439-4cb7-b9c1-15e9547d211e",
          "timestamp": 1758627604692,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 3,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 29,
              "native": false
            }
          ]
        },
        "at": "assertion:2 in test-script",
        "source": {
          "id": "4e23fcb4-9ef1-4ea8-b41f-3318be2c55f4",
          "name": "Get User by Email",
          "request": {
            "url": {
              "path": [
                "v1",
                "users",
                "postman@aui.de"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a0fe48c3-1508-4e87-a7e5-a76beaac0541",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Response time is fast\", function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});",
                  "pm.test(\"Response contains valid user structure\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property(\"email\");",
                  "    pm.expect(jsonData).to.have.property(\"username\");",
                  "    pm.expect(jsonData.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);",
                  "    pm.expect(jsonData.email).to.equal(\"postman@aui.de\");",
                  "});"
                ],
                "_lastExecutionId": "c4ffede9-306d-4f31-b0f5-01077ab19af2"
              }
            }
          ]
        },
        "parent": {
          "id": "8f8c4aad-27c2-415d-8867-717effdbb9e7",
          "name": "User Management",
          "item": [
            {
              "id": "4e23fcb4-9ef1-4ea8-b41f-3318be2c55f4",
              "name": "Get User by Email",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "users",
                    "postman@aui.de"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a0fe48c3-1508-4e87-a7e5-a76beaac0541",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response time is fast\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      "pm.test(\"Response contains valid user structure\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property(\"email\");",
                      "    pm.expect(jsonData).to.have.property(\"username\");",
                      "    pm.expect(jsonData.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);",
                      "    pm.expect(jsonData.email).to.equal(\"postman@aui.de\");",
                      "});"
                    ],
                    "_lastExecutionId": "c4ffede9-306d-4f31-b0f5-01077ab19af2"
                  }
                }
              ]
            },
            {
              "id": "18f21432-9d52-40da-89ac-6b0eb847f1bd",
              "name": "Create User",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "users",
                    ""
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"testUser@test.de\",\n  \"password\": \"testPassword123\",\n  \"username\": \"testUser\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e468a60e-0d8b-4ca3-b35b-43c0591b7300",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 400\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 400]);",
                      "});",
                      "if (pm.response.code === 200) {",
                      "    pm.test(\"Response contains valid user\", function () {",
                      "        var jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.have.property('email');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "a3e867c6-9e2a-47ba-91cf-cdac0608401a"
                  }
                }
              ]
            },
            {
              "id": "83acafef-d911-4a60-a5db-f7576521a65c",
              "name": "Update User",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "users",
                    "testUser@test.de"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"username\": \"updatedTestUser\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bd3a3429-5671-404f-90a0-c6de13860eb8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response contains valid user\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('email');",
                      "});"
                    ],
                    "_lastExecutionId": "387c4f5d-ca2c-4d9c-9c21-ccebcf83ed7b"
                  }
                }
              ]
            },
            {
              "id": "4d4a7d6b-7816-4fc7-b78c-94a7577476b4",
              "name": "Delete User",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "users",
                    "testUser@test.de"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0b1f4689-1267-466f-b1d7-6c095c2d276c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response contains valid user\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('email');",
                      "});"
                    ],
                    "_lastExecutionId": "bbd38b7d-d1c5-4a09-ab3f-c79b216c49bf"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "75dbb7c5-c7f6-40fa-9da5-94666c479791",
          "length": 34,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "3423810e-89aa-46bf-bf2c-cafa7516416a",
          "scriptId": "a0fe48c3-1508-4e87-a7e5-a76beaac0541",
          "execution": "c4ffede9-306d-4f31-b0f5-01077ab19af2"
        }
      },
      {
        "error": {
          "errno": -61,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3001,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:3001",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:3001\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1637:16)",
          "checksum": "f958207822d918da82c40a9f858a19c2",
          "id": "e77d5609-0846-42d6-8ed7-8c38c1b36f6e",
          "timestamp": 1758627604700,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1637,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "18f21432-9d52-40da-89ac-6b0eb847f1bd",
          "name": "Create User",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3001",
              "path": [
                "v1",
                "users",
                ""
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "32bd9c42-abe5-4cbf-8ca2-b9c649ab1ea5",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:3001",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"testUser@test.de\",\n  \"password\": \"testPassword123\",\n  \"username\": \"testUser\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e468a60e-0d8b-4ca3-b35b-43c0591b7300",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200 or 400\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 400]);",
                  "});",
                  "if (pm.response.code === 200) {",
                  "    pm.test(\"Response contains valid user\", function () {",
                  "        var jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('email');",
                  "    });",
                  "}"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "66e6a99f-ab5e-4991-8d01-b2f891d3cdda",
          "length": 34,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "00d5e3ee-62ed-4139-828b-dbf192c66973"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200 or 400",
          "message": "expected undefined to be one of [ 200, 400 ]",
          "stack": "AssertionError: expected undefined to be one of [ 200, 400 ]\n   at Object.eval sandbox-script.js:1:30)",
          "checksum": "e22f0e0b6caea7dec31f74ae5616419f",
          "id": "5f16e80f-b606-45f5-802f-d9d212187d76",
          "timestamp": 1758627604703,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 30,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "18f21432-9d52-40da-89ac-6b0eb847f1bd",
          "name": "Create User",
          "request": {
            "url": {
              "path": [
                "v1",
                "users",
                ""
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "method": "POST",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"testUser@test.de\",\n  \"password\": \"testPassword123\",\n  \"username\": \"testUser\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "e468a60e-0d8b-4ca3-b35b-43c0591b7300",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200 or 400\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 400]);",
                  "});",
                  "if (pm.response.code === 200) {",
                  "    pm.test(\"Response contains valid user\", function () {",
                  "        var jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.have.property('email');",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "a3e867c6-9e2a-47ba-91cf-cdac0608401a"
              }
            }
          ]
        },
        "parent": {
          "id": "8f8c4aad-27c2-415d-8867-717effdbb9e7",
          "name": "User Management",
          "item": [
            {
              "id": "4e23fcb4-9ef1-4ea8-b41f-3318be2c55f4",
              "name": "Get User by Email",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "users",
                    "postman@aui.de"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a0fe48c3-1508-4e87-a7e5-a76beaac0541",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response time is fast\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      "pm.test(\"Response contains valid user structure\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property(\"email\");",
                      "    pm.expect(jsonData).to.have.property(\"username\");",
                      "    pm.expect(jsonData.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);",
                      "    pm.expect(jsonData.email).to.equal(\"postman@aui.de\");",
                      "});"
                    ],
                    "_lastExecutionId": "c4ffede9-306d-4f31-b0f5-01077ab19af2"
                  }
                }
              ]
            },
            {
              "id": "18f21432-9d52-40da-89ac-6b0eb847f1bd",
              "name": "Create User",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "users",
                    ""
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"testUser@test.de\",\n  \"password\": \"testPassword123\",\n  \"username\": \"testUser\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e468a60e-0d8b-4ca3-b35b-43c0591b7300",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 400\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 400]);",
                      "});",
                      "if (pm.response.code === 200) {",
                      "    pm.test(\"Response contains valid user\", function () {",
                      "        var jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.have.property('email');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "a3e867c6-9e2a-47ba-91cf-cdac0608401a"
                  }
                }
              ]
            },
            {
              "id": "83acafef-d911-4a60-a5db-f7576521a65c",
              "name": "Update User",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "users",
                    "testUser@test.de"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"username\": \"updatedTestUser\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bd3a3429-5671-404f-90a0-c6de13860eb8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response contains valid user\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('email');",
                      "});"
                    ],
                    "_lastExecutionId": "387c4f5d-ca2c-4d9c-9c21-ccebcf83ed7b"
                  }
                }
              ]
            },
            {
              "id": "4d4a7d6b-7816-4fc7-b78c-94a7577476b4",
              "name": "Delete User",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "users",
                    "testUser@test.de"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0b1f4689-1267-466f-b1d7-6c095c2d276c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response contains valid user\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('email');",
                      "});"
                    ],
                    "_lastExecutionId": "bbd38b7d-d1c5-4a09-ab3f-c79b216c49bf"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "66e6a99f-ab5e-4991-8d01-b2f891d3cdda",
          "length": 34,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "00d5e3ee-62ed-4139-828b-dbf192c66973",
          "scriptId": "e468a60e-0d8b-4ca3-b35b-43c0591b7300",
          "execution": "a3e867c6-9e2a-47ba-91cf-cdac0608401a"
        }
      },
      {
        "error": {
          "errno": -61,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3001,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:3001",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:3001\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1637:16)",
          "checksum": "f958207822d918da82c40a9f858a19c2",
          "id": "5d99c8e8-f1d6-4173-bfd2-a6827ba2a36f",
          "timestamp": 1758627604710,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1637,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "83acafef-d911-4a60-a5db-f7576521a65c",
          "name": "Update User",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3001",
              "path": [
                "v1",
                "users",
                "testUser@test.de"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "11c5b136-782a-4e52-b83b-8b2f8d4de78d",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:3001",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"updatedTestUser\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "bd3a3429-5671-404f-90a0-c6de13860eb8",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Response contains valid user\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('email');",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "79bf56a1-28ac-43a5-af7a-533f9cfa5f6b",
          "length": 34,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "918cf2e1-1ff3-4e0c-817f-8df0852cee90"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:31)",
          "checksum": "ed9645b055ead28a11bfa222e605b8f5",
          "id": "f67e3356-0399-45a5-b3d6-69c426def10e",
          "timestamp": 1758627604712,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 31,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "83acafef-d911-4a60-a5db-f7576521a65c",
          "name": "Update User",
          "request": {
            "url": {
              "path": [
                "v1",
                "users",
                "testUser@test.de"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"updatedTestUser\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "bd3a3429-5671-404f-90a0-c6de13860eb8",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Response contains valid user\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('email');",
                  "});"
                ],
                "_lastExecutionId": "387c4f5d-ca2c-4d9c-9c21-ccebcf83ed7b"
              }
            }
          ]
        },
        "parent": {
          "id": "8f8c4aad-27c2-415d-8867-717effdbb9e7",
          "name": "User Management",
          "item": [
            {
              "id": "4e23fcb4-9ef1-4ea8-b41f-3318be2c55f4",
              "name": "Get User by Email",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "users",
                    "postman@aui.de"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a0fe48c3-1508-4e87-a7e5-a76beaac0541",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response time is fast\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      "pm.test(\"Response contains valid user structure\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property(\"email\");",
                      "    pm.expect(jsonData).to.have.property(\"username\");",
                      "    pm.expect(jsonData.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);",
                      "    pm.expect(jsonData.email).to.equal(\"postman@aui.de\");",
                      "});"
                    ],
                    "_lastExecutionId": "c4ffede9-306d-4f31-b0f5-01077ab19af2"
                  }
                }
              ]
            },
            {
              "id": "18f21432-9d52-40da-89ac-6b0eb847f1bd",
              "name": "Create User",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "users",
                    ""
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"testUser@test.de\",\n  \"password\": \"testPassword123\",\n  \"username\": \"testUser\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e468a60e-0d8b-4ca3-b35b-43c0591b7300",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 400\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 400]);",
                      "});",
                      "if (pm.response.code === 200) {",
                      "    pm.test(\"Response contains valid user\", function () {",
                      "        var jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.have.property('email');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "a3e867c6-9e2a-47ba-91cf-cdac0608401a"
                  }
                }
              ]
            },
            {
              "id": "83acafef-d911-4a60-a5db-f7576521a65c",
              "name": "Update User",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "users",
                    "testUser@test.de"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"username\": \"updatedTestUser\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bd3a3429-5671-404f-90a0-c6de13860eb8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response contains valid user\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('email');",
                      "});"
                    ],
                    "_lastExecutionId": "387c4f5d-ca2c-4d9c-9c21-ccebcf83ed7b"
                  }
                }
              ]
            },
            {
              "id": "4d4a7d6b-7816-4fc7-b78c-94a7577476b4",
              "name": "Delete User",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "users",
                    "testUser@test.de"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0b1f4689-1267-466f-b1d7-6c095c2d276c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response contains valid user\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('email');",
                      "});"
                    ],
                    "_lastExecutionId": "bbd38b7d-d1c5-4a09-ab3f-c79b216c49bf"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "79bf56a1-28ac-43a5-af7a-533f9cfa5f6b",
          "length": 34,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "918cf2e1-1ff3-4e0c-817f-8df0852cee90",
          "scriptId": "bd3a3429-5671-404f-90a0-c6de13860eb8",
          "execution": "387c4f5d-ca2c-4d9c-9c21-ccebcf83ed7b"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Response contains valid user",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:31)",
          "checksum": "33891aab21b54724737e84ee45dc0e77",
          "id": "5543feb4-66b9-47ce-95c1-7fcfb1d67526",
          "timestamp": 1758627604713,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 31,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "83acafef-d911-4a60-a5db-f7576521a65c",
          "name": "Update User",
          "request": {
            "url": {
              "path": [
                "v1",
                "users",
                "testUser@test.de"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "method": "PUT",
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"updatedTestUser\"\n}"
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "bd3a3429-5671-404f-90a0-c6de13860eb8",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Response contains valid user\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('email');",
                  "});"
                ],
                "_lastExecutionId": "387c4f5d-ca2c-4d9c-9c21-ccebcf83ed7b"
              }
            }
          ]
        },
        "parent": {
          "id": "8f8c4aad-27c2-415d-8867-717effdbb9e7",
          "name": "User Management",
          "item": [
            {
              "id": "4e23fcb4-9ef1-4ea8-b41f-3318be2c55f4",
              "name": "Get User by Email",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "users",
                    "postman@aui.de"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a0fe48c3-1508-4e87-a7e5-a76beaac0541",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response time is fast\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      "pm.test(\"Response contains valid user structure\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property(\"email\");",
                      "    pm.expect(jsonData).to.have.property(\"username\");",
                      "    pm.expect(jsonData.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);",
                      "    pm.expect(jsonData.email).to.equal(\"postman@aui.de\");",
                      "});"
                    ],
                    "_lastExecutionId": "c4ffede9-306d-4f31-b0f5-01077ab19af2"
                  }
                }
              ]
            },
            {
              "id": "18f21432-9d52-40da-89ac-6b0eb847f1bd",
              "name": "Create User",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "users",
                    ""
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"testUser@test.de\",\n  \"password\": \"testPassword123\",\n  \"username\": \"testUser\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e468a60e-0d8b-4ca3-b35b-43c0591b7300",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 400\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 400]);",
                      "});",
                      "if (pm.response.code === 200) {",
                      "    pm.test(\"Response contains valid user\", function () {",
                      "        var jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.have.property('email');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "a3e867c6-9e2a-47ba-91cf-cdac0608401a"
                  }
                }
              ]
            },
            {
              "id": "83acafef-d911-4a60-a5db-f7576521a65c",
              "name": "Update User",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "users",
                    "testUser@test.de"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"username\": \"updatedTestUser\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bd3a3429-5671-404f-90a0-c6de13860eb8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response contains valid user\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('email');",
                      "});"
                    ],
                    "_lastExecutionId": "387c4f5d-ca2c-4d9c-9c21-ccebcf83ed7b"
                  }
                }
              ]
            },
            {
              "id": "4d4a7d6b-7816-4fc7-b78c-94a7577476b4",
              "name": "Delete User",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "users",
                    "testUser@test.de"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0b1f4689-1267-466f-b1d7-6c095c2d276c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response contains valid user\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('email');",
                      "});"
                    ],
                    "_lastExecutionId": "bbd38b7d-d1c5-4a09-ab3f-c79b216c49bf"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "79bf56a1-28ac-43a5-af7a-533f9cfa5f6b",
          "length": 34,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "918cf2e1-1ff3-4e0c-817f-8df0852cee90",
          "scriptId": "bd3a3429-5671-404f-90a0-c6de13860eb8",
          "execution": "387c4f5d-ca2c-4d9c-9c21-ccebcf83ed7b"
        }
      },
      {
        "error": {
          "errno": -61,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3001,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:3001",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:3001\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1637:16)",
          "checksum": "f958207822d918da82c40a9f858a19c2",
          "id": "e7b5434c-ca01-45f1-908d-9b923e336e8d",
          "timestamp": 1758627604720,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1637,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "4d4a7d6b-7816-4fc7-b78c-94a7577476b4",
          "name": "Delete User",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3001",
              "path": [
                "v1",
                "users",
                "testUser@test.de"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "c011102f-911e-4c30-8792-b8a56a9006fa",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:3001",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0b1f4689-1267-466f-b1d7-6c095c2d276c",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Response contains valid user\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('email');",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "3b2a6584-8687-4a19-a7ff-5f25ca68c68d",
          "length": 34,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "17cc00d8-702b-4a8c-9bd1-ba6df0e089e1"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:32)",
          "checksum": "57678e101c6bb911b6c3fd80df202540",
          "id": "6288c6de-4b85-4fd8-bd58-e9e9303ff9f5",
          "timestamp": 1758627604724,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 32,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "4d4a7d6b-7816-4fc7-b78c-94a7577476b4",
          "name": "Delete User",
          "request": {
            "url": {
              "path": [
                "v1",
                "users",
                "testUser@test.de"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0b1f4689-1267-466f-b1d7-6c095c2d276c",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Response contains valid user\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('email');",
                  "});"
                ],
                "_lastExecutionId": "bbd38b7d-d1c5-4a09-ab3f-c79b216c49bf"
              }
            }
          ]
        },
        "parent": {
          "id": "8f8c4aad-27c2-415d-8867-717effdbb9e7",
          "name": "User Management",
          "item": [
            {
              "id": "4e23fcb4-9ef1-4ea8-b41f-3318be2c55f4",
              "name": "Get User by Email",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "users",
                    "postman@aui.de"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a0fe48c3-1508-4e87-a7e5-a76beaac0541",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response time is fast\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      "pm.test(\"Response contains valid user structure\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property(\"email\");",
                      "    pm.expect(jsonData).to.have.property(\"username\");",
                      "    pm.expect(jsonData.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);",
                      "    pm.expect(jsonData.email).to.equal(\"postman@aui.de\");",
                      "});"
                    ],
                    "_lastExecutionId": "c4ffede9-306d-4f31-b0f5-01077ab19af2"
                  }
                }
              ]
            },
            {
              "id": "18f21432-9d52-40da-89ac-6b0eb847f1bd",
              "name": "Create User",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "users",
                    ""
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"testUser@test.de\",\n  \"password\": \"testPassword123\",\n  \"username\": \"testUser\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e468a60e-0d8b-4ca3-b35b-43c0591b7300",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 400\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 400]);",
                      "});",
                      "if (pm.response.code === 200) {",
                      "    pm.test(\"Response contains valid user\", function () {",
                      "        var jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.have.property('email');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "a3e867c6-9e2a-47ba-91cf-cdac0608401a"
                  }
                }
              ]
            },
            {
              "id": "83acafef-d911-4a60-a5db-f7576521a65c",
              "name": "Update User",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "users",
                    "testUser@test.de"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"username\": \"updatedTestUser\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bd3a3429-5671-404f-90a0-c6de13860eb8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response contains valid user\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('email');",
                      "});"
                    ],
                    "_lastExecutionId": "387c4f5d-ca2c-4d9c-9c21-ccebcf83ed7b"
                  }
                }
              ]
            },
            {
              "id": "4d4a7d6b-7816-4fc7-b78c-94a7577476b4",
              "name": "Delete User",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "users",
                    "testUser@test.de"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0b1f4689-1267-466f-b1d7-6c095c2d276c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response contains valid user\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('email');",
                      "});"
                    ],
                    "_lastExecutionId": "bbd38b7d-d1c5-4a09-ab3f-c79b216c49bf"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "3b2a6584-8687-4a19-a7ff-5f25ca68c68d",
          "length": 34,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "17cc00d8-702b-4a8c-9bd1-ba6df0e089e1",
          "scriptId": "0b1f4689-1267-466f-b1d7-6c095c2d276c",
          "execution": "bbd38b7d-d1c5-4a09-ab3f-c79b216c49bf"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Response contains valid user",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:32)",
          "checksum": "d4aaad9b5924b292a01e06fe8df3a742",
          "id": "90211ebd-e3a4-4a6c-9a5c-57c6cd982454",
          "timestamp": 1758627604724,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 32,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "4d4a7d6b-7816-4fc7-b78c-94a7577476b4",
          "name": "Delete User",
          "request": {
            "url": {
              "path": [
                "v1",
                "users",
                "testUser@test.de"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "method": "DELETE"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "0b1f4689-1267-466f-b1d7-6c095c2d276c",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Response contains valid user\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('email');",
                  "});"
                ],
                "_lastExecutionId": "bbd38b7d-d1c5-4a09-ab3f-c79b216c49bf"
              }
            }
          ]
        },
        "parent": {
          "id": "8f8c4aad-27c2-415d-8867-717effdbb9e7",
          "name": "User Management",
          "item": [
            {
              "id": "4e23fcb4-9ef1-4ea8-b41f-3318be2c55f4",
              "name": "Get User by Email",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "users",
                    "postman@aui.de"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "a0fe48c3-1508-4e87-a7e5-a76beaac0541",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response time is fast\", function () {",
                      "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                      "});",
                      "pm.test(\"Response contains valid user structure\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property(\"email\");",
                      "    pm.expect(jsonData).to.have.property(\"username\");",
                      "    pm.expect(jsonData.email).to.match(/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/);",
                      "    pm.expect(jsonData.email).to.equal(\"postman@aui.de\");",
                      "});"
                    ],
                    "_lastExecutionId": "c4ffede9-306d-4f31-b0f5-01077ab19af2"
                  }
                }
              ]
            },
            {
              "id": "18f21432-9d52-40da-89ac-6b0eb847f1bd",
              "name": "Create User",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "users",
                    ""
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "POST",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"email\": \"testUser@test.de\",\n  \"password\": \"testPassword123\",\n  \"username\": \"testUser\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "e468a60e-0d8b-4ca3-b35b-43c0591b7300",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 400\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 400]);",
                      "});",
                      "if (pm.response.code === 200) {",
                      "    pm.test(\"Response contains valid user\", function () {",
                      "        var jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.have.property('email');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "a3e867c6-9e2a-47ba-91cf-cdac0608401a"
                  }
                }
              ]
            },
            {
              "id": "83acafef-d911-4a60-a5db-f7576521a65c",
              "name": "Update User",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "users",
                    "testUser@test.de"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "PUT",
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"username\": \"updatedTestUser\"\n}"
                }
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "bd3a3429-5671-404f-90a0-c6de13860eb8",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response contains valid user\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('email');",
                      "});"
                    ],
                    "_lastExecutionId": "387c4f5d-ca2c-4d9c-9c21-ccebcf83ed7b"
                  }
                }
              ]
            },
            {
              "id": "4d4a7d6b-7816-4fc7-b78c-94a7577476b4",
              "name": "Delete User",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "users",
                    "testUser@test.de"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "DELETE"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "0b1f4689-1267-466f-b1d7-6c095c2d276c",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response contains valid user\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.have.property('email');",
                      "});"
                    ],
                    "_lastExecutionId": "bbd38b7d-d1c5-4a09-ab3f-c79b216c49bf"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "3b2a6584-8687-4a19-a7ff-5f25ca68c68d",
          "length": 34,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "17cc00d8-702b-4a8c-9bd1-ba6df0e089e1",
          "scriptId": "0b1f4689-1267-466f-b1d7-6c095c2d276c",
          "execution": "bbd38b7d-d1c5-4a09-ab3f-c79b216c49bf"
        }
      },
      {
        "error": {
          "errno": -61,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3001,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:3001",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:3001\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1637:16)",
          "checksum": "f958207822d918da82c40a9f858a19c2",
          "id": "c164ced4-de9a-48fb-93ec-fff037df8f98",
          "timestamp": 1758627604732,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1637,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "5ea8f093-1008-417b-bbe4-7daa933ad7ce",
          "name": "Get Statistics",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3001",
              "path": [
                "v1",
                "statistics"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "2aba2323-ad1d-4653-a54f-1a44c670add4",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:3001",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "214cac4d-4363-433e-8cd9-96dcd2b913d0",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Response contains statistics data\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.not.be.empty;",
                  "});"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "899250ce-018d-4127-ad54-aa8ff6f2dd77",
          "length": 34,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "1629331c-5b60-4a62-833a-9f287b61fd2c"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200",
          "message": "expected PostmanResponse{ …(5) } to have property 'code'",
          "stack": "AssertionError: expected PostmanResponse{ …(5) } to have property 'code'\n   at Object.eval sandbox-script.js:1:33)",
          "checksum": "d048589f74faa2bc5fd7fc0fedd6d452",
          "id": "dd469c80-b550-4dad-a55e-99894a5ca7cf",
          "timestamp": 1758627604735,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 33,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "5ea8f093-1008-417b-bbe4-7daa933ad7ce",
          "name": "Get Statistics",
          "request": {
            "url": {
              "path": [
                "v1",
                "statistics"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "214cac4d-4363-433e-8cd9-96dcd2b913d0",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Response contains statistics data\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.not.be.empty;",
                  "});"
                ],
                "_lastExecutionId": "3cdd04a4-441b-4712-9e1f-ec453b727a47"
              }
            }
          ]
        },
        "parent": {
          "id": "8ae8ac18-7335-4139-af9a-656aac645124",
          "name": "Statistics",
          "item": [
            {
              "id": "5ea8f093-1008-417b-bbe4-7daa933ad7ce",
              "name": "Get Statistics",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "statistics"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "214cac4d-4363-433e-8cd9-96dcd2b913d0",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response contains statistics data\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.not.be.empty;",
                      "});"
                    ],
                    "_lastExecutionId": "3cdd04a4-441b-4712-9e1f-ec453b727a47"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "899250ce-018d-4127-ad54-aa8ff6f2dd77",
          "length": 34,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "1629331c-5b60-4a62-833a-9f287b61fd2c",
          "scriptId": "214cac4d-4363-433e-8cd9-96dcd2b913d0",
          "execution": "3cdd04a4-441b-4712-9e1f-ec453b727a47"
        }
      },
      {
        "error": {
          "name": "JSONError",
          "index": 1,
          "test": "Response contains statistics data",
          "message": "\"undefined\" is not valid JSON",
          "stack": "JSONError: \"undefined\" is not valid JSON\n   at Object.eval sandbox-script.js:2:33)",
          "checksum": "b4108984fefdc77248054d256bc71e0c",
          "id": "a8cc6246-bb50-41e1-992b-c6aee905006c",
          "timestamp": 1758627604735,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 2,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 33,
              "native": false
            }
          ]
        },
        "at": "assertion:1 in test-script",
        "source": {
          "id": "5ea8f093-1008-417b-bbe4-7daa933ad7ce",
          "name": "Get Statistics",
          "request": {
            "url": {
              "path": [
                "v1",
                "statistics"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "214cac4d-4363-433e-8cd9-96dcd2b913d0",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "pm.test(\"Response contains statistics data\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.not.be.empty;",
                  "});"
                ],
                "_lastExecutionId": "3cdd04a4-441b-4712-9e1f-ec453b727a47"
              }
            }
          ]
        },
        "parent": {
          "id": "8ae8ac18-7335-4139-af9a-656aac645124",
          "name": "Statistics",
          "item": [
            {
              "id": "5ea8f093-1008-417b-bbe4-7daa933ad7ce",
              "name": "Get Statistics",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "statistics"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "214cac4d-4363-433e-8cd9-96dcd2b913d0",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200\", function () {",
                      "    pm.response.to.have.status(200);",
                      "});",
                      "pm.test(\"Response contains statistics data\", function () {",
                      "    var jsonData = pm.response.json();",
                      "    pm.expect(jsonData).to.not.be.empty;",
                      "});"
                    ],
                    "_lastExecutionId": "3cdd04a4-441b-4712-9e1f-ec453b727a47"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "899250ce-018d-4127-ad54-aa8ff6f2dd77",
          "length": 34,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "1629331c-5b60-4a62-833a-9f287b61fd2c",
          "scriptId": "214cac4d-4363-433e-8cd9-96dcd2b913d0",
          "execution": "3cdd04a4-441b-4712-9e1f-ec453b727a47"
        }
      },
      {
        "error": {
          "errno": -61,
          "code": "ECONNREFUSED",
          "syscall": "connect",
          "address": "127.0.0.1",
          "port": 3001,
          "name": "Error",
          "message": "connect ECONNREFUSED 127.0.0.1:3001",
          "stack": "Error: connect ECONNREFUSED 127.0.0.1:3001\n    at TCPConnectWrap.afterConnect [as oncomplete] (node:net:1637:16)",
          "checksum": "f958207822d918da82c40a9f858a19c2",
          "id": "3d73b9f4-c7e4-4566-82e5-7fc8fb9812f8",
          "timestamp": 1758627604742,
          "stacktrace": [
            {
              "fileName": "node:net",
              "lineNumber": 1637,
              "functionName": "TCPConnectWrap.afterConnect [as oncomplete]",
              "typeName": "TCPConnectWrap",
              "methodName": "afterConnect [as oncomplete]",
              "columnNumber": 16,
              "native": false
            }
          ]
        },
        "at": "request",
        "source": {
          "id": "c6ef265f-d1bd-4b00-ae49-d52b07649c9e",
          "name": "Get Flags List",
          "request": {
            "url": {
              "protocol": "http",
              "port": "3001",
              "path": [
                "v1",
                "flags"
              ],
              "host": [
                "localhost"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              },
              {
                "key": "User-Agent",
                "value": "PostmanRuntime/7.39.1",
                "system": true
              },
              {
                "key": "Accept",
                "value": "*/*",
                "system": true
              },
              {
                "key": "Cache-Control",
                "value": "no-cache",
                "system": true
              },
              {
                "key": "Postman-Token",
                "value": "8f9c061c-dbc6-46e0-b4d3-095a4fa24250",
                "system": true
              },
              {
                "key": "Host",
                "value": "localhost:3001",
                "system": true
              },
              {
                "key": "Accept-Encoding",
                "value": "gzip, deflate, br",
                "system": true
              },
              {
                "key": "Connection",
                "value": "keep-alive",
                "system": true
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "46ab5e8a-3ab5-4a3b-9a79-bda8f05bef3e",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200 or 401\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                  "});",
                  "if (pm.response.code === 200) {",
                  "    pm.test(\"Response contains flags data\", function () {",
                  "        var jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.be.an('array');",
                  "    });",
                  "}"
                ]
              }
            }
          ]
        },
        "cursor": {
          "ref": "6cabbf25-409d-41fc-86b6-10b20cc5bed7",
          "length": 34,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "98622681-eb43-4cb9-be11-09a088dd9fb1"
        }
      },
      {
        "error": {
          "name": "AssertionError",
          "index": 0,
          "test": "Status code is 200 or 401",
          "message": "expected undefined to be one of [ 200, 401 ]",
          "stack": "AssertionError: expected undefined to be one of [ 200, 401 ]\n   at Object.eval sandbox-script.js:1:34)",
          "checksum": "bfa1c2ae22bf7d5cf599ab7e4b801386",
          "id": "e96addf3-05a3-431d-83cc-a5020713858e",
          "timestamp": 1758627604745,
          "stacktrace": [
            {
              "fileName": "sandbox-script.js",
              "lineNumber": 1,
              "functionName": "Object.eval",
              "typeName": "Object",
              "methodName": "eval",
              "columnNumber": 34,
              "native": false
            }
          ]
        },
        "at": "assertion:0 in test-script",
        "source": {
          "id": "c6ef265f-d1bd-4b00-ae49-d52b07649c9e",
          "name": "Get Flags List",
          "request": {
            "url": {
              "path": [
                "v1",
                "flags"
              ],
              "host": [
                "{{baseUrl}}"
              ],
              "query": [],
              "variable": []
            },
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{token}}"
              }
            ],
            "method": "GET"
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "46ab5e8a-3ab5-4a3b-9a79-bda8f05bef3e",
                "type": "text/javascript",
                "exec": [
                  "pm.test(\"Status code is 200 or 401\", function () {",
                  "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                  "});",
                  "if (pm.response.code === 200) {",
                  "    pm.test(\"Response contains flags data\", function () {",
                  "        var jsonData = pm.response.json();",
                  "        pm.expect(jsonData).to.be.an('array');",
                  "    });",
                  "}"
                ],
                "_lastExecutionId": "7f46dd6b-55da-48dd-a9ab-90ba3e4071e5"
              }
            }
          ]
        },
        "parent": {
          "id": "9d407954-3403-4c03-8af8-7d8a232b138d",
          "name": "Flags",
          "item": [
            {
              "id": "c6ef265f-d1bd-4b00-ae49-d52b07649c9e",
              "name": "Get Flags List",
              "request": {
                "url": {
                  "path": [
                    "v1",
                    "flags"
                  ],
                  "host": [
                    "{{baseUrl}}"
                  ],
                  "query": [],
                  "variable": []
                },
                "header": [
                  {
                    "key": "Authorization",
                    "value": "Bearer {{token}}"
                  }
                ],
                "method": "GET"
              },
              "response": [],
              "event": [
                {
                  "listen": "test",
                  "script": {
                    "id": "46ab5e8a-3ab5-4a3b-9a79-bda8f05bef3e",
                    "type": "text/javascript",
                    "exec": [
                      "pm.test(\"Status code is 200 or 401\", function () {",
                      "    pm.expect(pm.response.code).to.be.oneOf([200, 401]);",
                      "});",
                      "if (pm.response.code === 200) {",
                      "    pm.test(\"Response contains flags data\", function () {",
                      "        var jsonData = pm.response.json();",
                      "        pm.expect(jsonData).to.be.an('array');",
                      "    });",
                      "}"
                    ],
                    "_lastExecutionId": "7f46dd6b-55da-48dd-a9ab-90ba3e4071e5"
                  }
                }
              ]
            }
          ],
          "event": []
        },
        "cursor": {
          "ref": "6cabbf25-409d-41fc-86b6-10b20cc5bed7",
          "length": 34,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "98622681-eb43-4cb9-be11-09a088dd9fb1",
          "scriptId": "46ab5e8a-3ab5-4a3b-9a79-bda8f05bef3e",
          "execution": "7f46dd6b-55da-48dd-a9ab-90ba3e4071e5"
        }
      }
    ],
    "error": null
  }
}