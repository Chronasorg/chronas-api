name: Deploy Chronas API to AWS Lambda

on:
  push:
    branches: [ main, feature/modernize-api ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: eu-west-1
  NODE_VERSION: '22.x'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    # Skip linting for now - focus on deployment
    # - name: Run ESLint
    #   run: npm run lint
      
    - name: Run unit tests
      run: npm test
      
    - name: Run integration tests
      run: npm run test:integration
      env:
        NODE_ENV: test
        MONGO_HOST: mongodb://localhost:27017/chronas-api-test
        
  build:
    name: Build Lambda Package
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci --production
      
    - name: Build Lambda package
      run: npm run build:lambda
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: lambda-package
        path: dist/
        retention-days: 7

  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/feature/modernize-api'
    environment: development
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: lambda-package
        path: dist/
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Setup Node.js for CDK
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install CDK dependencies
      run: |
        cd ../chronas-cdk
        npm ci
        
    - name: Deploy infrastructure with CDK
      run: |
        cd ../chronas-cdk
        npm run build
        npx cdk deploy --require-approval never --profile chronas-dev
      env:
        AWS_PROFILE: chronas-dev
        
    - name: Run post-deployment tests
      run: npm run test:postman
      env:
        API_BASE_URL: ${{ secrets.DEV_API_BASE_URL }}

  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: lambda-package
        path: dist/
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.PROD_AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.PROD_AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Setup Node.js for CDK
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install CDK dependencies
      run: |
        cd ../chronas-cdk
        npm ci
        
    - name: Deploy infrastructure with CDK
      run: |
        cd ../chronas-cdk
        npm run build
        npx cdk deploy --require-approval never --profile chronas-prod
      env:
        AWS_PROFILE: chronas-prod
        
    - name: Run production validation tests
      run: npm run test:postman:prod
      env:
        API_BASE_URL: ${{ secrets.PROD_API_BASE_URL }}
        
    - name: Notify deployment success
      if: success()
      run: |
        echo "✅ Production deployment successful!"
        echo "API URL: ${{ secrets.PROD_API_BASE_URL }}"
        
    - name: Notify deployment failure
      if: failure()
      run: |
        echo "❌ Production deployment failed!"
        exit 1