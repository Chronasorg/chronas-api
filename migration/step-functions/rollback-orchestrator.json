{
  "Comment": "DocumentDB Rollback Orchestrator - Manages rollback operations with different strategies",
  "StartAt": "InitializeRollback",
  "States": {
    "InitializeRollback": {
      "Type": "Pass",
      "Comment": "Initialize rollback parameters and validate inputs",
      "Parameters": {
        "rollbackId.$": "$$.Execution.Name",
        "startTime.$": "$$.Execution.StartTime",
        "rollbackType.$": "$.rollbackType",
        "sourceSecretName.$": "$.sourceSecretName",
        "targetSecretName.$": "$.targetSecretName",
        "backupSnapshotId.$": "$.backupSnapshotId",
        "collections.$": "$.collections",
        "validateRollback.$": "$.validateRollback",
        "cleanupTarget.$": "$.cleanupTarget",
        "reason.$": "$.reason"
      },
      "Next": "ValidateRollbackInputs"
    },
    
    "ValidateRollbackInputs": {
      "Type": "Choice",
      "Comment": "Validate required rollback parameters",
      "Choices": [
        {
          "And": [
            {
              "Variable": "$.rollbackType",
              "IsPresent": true
            },
            {
              "Variable": "$.sourceSecretName",
              "IsPresent": true
            },
            {
              "Variable": "$.targetSecretName",
              "IsPresent": true
            }
          ],
          "Next": "DetermineRollbackStrategy"
        }
      ],
      "Default": "RollbackFailed"
    },
    
    "DetermineRollbackStrategy": {
      "Type": "Choice",
      "Comment": "Determine rollback strategy based on type",
      "Choices": [
        {
          "Variable": "$.rollbackType",
          "StringEquals": "connection_switch",
          "Next": "ConnectionSwitchRollback"
        },
        {
          "Variable": "$.rollbackType",
          "StringEquals": "data_restore",
          "Next": "DataRestoreRollback"
        },
        {
          "Variable": "$.rollbackType",
          "StringEquals": "cluster_restore",
          "Next": "ClusterRestoreRollback"
        }
      ],
      "Default": "RollbackFailed"
    },
    
    "ConnectionSwitchRollback": {
      "Type": "Task",
      "Comment": "Perform connection switch rollback (fastest)",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${RollbackLambdaArn}",
        "Payload": {
          "rollbackType": "connection_switch",
          "sourceSecretName.$": "$.sourceSecretName",
          "targetSecretName.$": "$.targetSecretName",
          "validateRollback.$": "$.validateRollback"
        }
      },
      "ResultPath": "$.rollbackResult",
      "Retry": [
        {
          "ErrorEquals": ["Lambda.ServiceException", "Lambda.AWSLambdaException", "Lambda.SdkClientException"],
          "IntervalSeconds": 2,
          "MaxAttempts": 3,
          "BackoffRate": 2.0
        }
      ],
      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "Next": "RollbackFailed",
          "ResultPath": "$.error"
        }
      ],
      "Next": "NotifyApplicationTeam"
    },
    
    "DataRestoreRollback": {
      "Type": "Task",
      "Comment": "Perform data restore rollback",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${RollbackLambdaArn}",
        "Payload": {
          "rollbackType": "data_restore",
          "sourceSecretName.$": "$.sourceSecretName",
          "targetSecretName.$": "$.targetSecretName",
          "collections.$": "$.collections",
          "validateRollback.$": "$.validateRollback",
          "cleanupTarget.$": "$.cleanupTarget"
        }
      },
      "ResultPath": "$.rollbackResult",
      "TimeoutSeconds": 3600,
      "Retry": [
        {
          "ErrorEquals": ["Lambda.ServiceException", "Lambda.AWSLambdaException", "Lambda.SdkClientException"],
          "IntervalSeconds": 5,
          "MaxAttempts": 2,
          "BackoffRate": 2.0
        }
      ],
      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "Next": "RollbackFailed",
          "ResultPath": "$.error"
        }
      ],
      "Next": "ValidateDataRestore"
    },
    
    "ValidateDataRestore": {
      "Type": "Choice",
      "Comment": "Check if data restore rollback succeeded",
      "Choices": [
        {
          "Variable": "$.rollbackResult.Payload.success",
          "BooleanEquals": true,
          "Next": "NotifyApplicationTeam"
        }
      ],
      "Default": "RollbackFailed"
    },
    
    "ClusterRestoreRollback": {
      "Type": "Task",
      "Comment": "Perform cluster restore rollback",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${RollbackLambdaArn}",
        "Payload": {
          "rollbackType": "cluster_restore",
          "sourceSecretName.$": "$.sourceSecretName",
          "targetSecretName.$": "$.targetSecretName",
          "backupSnapshotId.$": "$.backupSnapshotId",
          "validateRollback.$": "$.validateRollback"
        }
      },
      "ResultPath": "$.rollbackResult",
      "TimeoutSeconds": 7200,
      "Retry": [
        {
          "ErrorEquals": ["Lambda.ServiceException", "Lambda.AWSLambdaException", "Lambda.SdkClientException"],
          "IntervalSeconds": 10,
          "MaxAttempts": 2,
          "BackoffRate": 2.0
        }
      ],
      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "Next": "RollbackFailed",
          "ResultPath": "$.error"
        }
      ],
      "Next": "WaitForClusterRestore"
    },
    
    "WaitForClusterRestore": {
      "Type": "Wait",
      "Comment": "Wait for cluster restore to complete",
      "Seconds": 300,
      "Next": "CheckClusterRestoreStatus"
    },
    
    "CheckClusterRestoreStatus": {
      "Type": "Task",
      "Comment": "Check cluster restore status",
      "Resource": "arn:aws:states:::aws-sdk:docdb:describeDBClusters",
      "Parameters": {
        "DBClusterIdentifier.$": "$.rollbackResult.Payload.steps[0].newClusterIdentifier"
      },
      "ResultPath": "$.clusterStatus",
      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "Next": "RollbackFailed",
          "ResultPath": "$.error"
        }
      ],
      "Next": "EvaluateClusterStatus"
    },
    
    "EvaluateClusterStatus": {
      "Type": "Choice",
      "Comment": "Evaluate cluster restore status",
      "Choices": [
        {
          "Variable": "$.clusterStatus.DBClusters[0].Status",
          "StringEquals": "available",
          "Next": "NotifyApplicationTeam"
        },
        {
          "Or": [
            {
              "Variable": "$.clusterStatus.DBClusters[0].Status",
              "StringEquals": "creating"
            },
            {
              "Variable": "$.clusterStatus.DBClusters[0].Status",
              "StringEquals": "backing-up"
            },
            {
              "Variable": "$.clusterStatus.DBClusters[0].Status",
              "StringEquals": "modifying"
            }
          ],
          "Next": "WaitForClusterRestore"
        }
      ],
      "Default": "RollbackFailed"
    },
    
    "NotifyApplicationTeam": {
      "Type": "Task",
      "Comment": "Notify application team of rollback completion",
      "Resource": "arn:aws:states:::sns:publish",
      "Parameters": {
        "TopicArn": "${NotificationTopicArn}",
        "Subject": "DocumentDB Rollback Completed",
        "Message.$": "States.Format('Rollback completed successfully.\n\nRollback ID: {}\nType: {}\nReason: {}\nDuration: {} seconds\n\nPlease verify application functionality and update connection strings if necessary.\n\nRollback Details:\n{}', $.rollbackId, $.rollbackType, $.reason, States.MathAdd(States.StringToJson(States.ArrayGetItem(States.StringSplit($.rollbackResult.Payload.endTime, 'T'), 1)), States.MathMultiply(States.StringToJson(States.ArrayGetItem(States.StringSplit($.startTime, 'T'), 1)), -1)), States.JsonToString($.rollbackResult.Payload))"
      },
      "ResultPath": "$.notification",
      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "Next": "RollbackCompleteWithNotificationFailure",
          "ResultPath": "$.notificationError"
        }
      ],
      "Next": "RollbackComplete"
    },
    
    "RollbackComplete": {
      "Type": "Pass",
      "Comment": "Rollback completed successfully",
      "Parameters": {
        "status": "rollback_complete",
        "rollbackId.$": "$.rollbackId",
        "rollbackType.$": "$.rollbackType",
        "startTime.$": "$.startTime",
        "endTime.$": "$$.State.EnteredTime",
        "reason.$": "$.reason",
        "rollbackResult.$": "$.rollbackResult.Payload",
        "message": "Rollback completed successfully. Application team has been notified."
      },
      "End": true
    },
    
    "RollbackCompleteWithNotificationFailure": {
      "Type": "Pass",
      "Comment": "Rollback completed but notification failed",
      "Parameters": {
        "status": "rollback_complete_notification_failed",
        "rollbackId.$": "$.rollbackId",
        "rollbackType.$": "$.rollbackType",
        "startTime.$": "$.startTime",
        "endTime.$": "$$.State.EnteredTime",
        "reason.$": "$.reason",
        "rollbackResult.$": "$.rollbackResult.Payload",
        "notificationError.$": "$.notificationError",
        "message": "Rollback completed successfully but notification failed. Manual notification required."
      },
      "End": true
    },
    
    "RollbackFailed": {
      "Type": "Task",
      "Comment": "Notify of rollback failure",
      "Resource": "arn:aws:states:::sns:publish",
      "Parameters": {
        "TopicArn": "${NotificationTopicArn}",
        "Subject": "URGENT: DocumentDB Rollback Failed",
        "Message.$": "States.Format('URGENT: DocumentDB rollback has failed.\n\nRollback ID: {}\nType: {}\nReason: {}\nError: {}\n\nImmediate manual intervention required.\nCheck CloudWatch logs and contact the database team immediately.\n\nRollback Details:\n{}', $.rollbackId, $.rollbackType, $.reason, $.error.Cause, States.JsonToString($))"
      },
      "ResultPath": "$.failureNotification",
      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "Next": "RollbackFailedFinal",
          "ResultPath": "$.notificationError"
        }
      ],
      "Next": "RollbackFailedFinal"
    },
    
    "RollbackFailedFinal": {
      "Type": "Pass",
      "Comment": "Rollback process failed",
      "Parameters": {
        "status": "rollback_failed",
        "rollbackId.$": "$.rollbackId",
        "rollbackType.$": "$.rollbackType",
        "startTime.$": "$.startTime",
        "endTime.$": "$$.State.EnteredTime",
        "reason.$": "$.reason",
        "error.$": "$.error",
        "message": "Rollback process failed. Manual intervention required immediately."
      },
      "End": true
    }
  }
}