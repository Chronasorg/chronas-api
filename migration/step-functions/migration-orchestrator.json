{
  "Comment": "DocumentDB Migration Orchestrator - Manages the complete migration process with validation and rollback capabilities",
  "StartAt": "InitializeMigration",
  "States": {
    "InitializeMigration": {
      "Type": "Pass",
      "Comment": "Initialize migration parameters and validate inputs",
      "Parameters": {
        "migrationId.$": "$$.Execution.Name",
        "startTime.$": "$$.Execution.StartTime",
        "sourceSecretName.$": "$.sourceSecretName",
        "targetSecretName.$": "$.targetSecretName",
        "collections.$": "$.collections",
        "dryRun.$": "$.dryRun",
        "skipValidation.$": "$.skipValidation",
        "batchSize.$": "$.batchSize",
        "continueOnError.$": "$.continueOnError"
      },
      "Next": "ValidateInputs"
    },
    
    "ValidateInputs": {
      "Type": "Choice",
      "Comment": "Validate required migration parameters",
      "Choices": [
        {
          "And": [
            {
              "Variable": "$.sourceSecretName",
              "IsPresent": true
            },
            {
              "Variable": "$.targetSecretName", 
              "IsPresent": true
            },
            {
              "Variable": "$.collections",
              "IsPresent": true
            }
          ],
          "Next": "PreMigrationValidation"
        }
      ],
      "Default": "MigrationFailed"
    },
    
    "PreMigrationValidation": {
      "Type": "Task",
      "Comment": "Validate source and target clusters before migration",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${ValidationLambdaArn}",
        "Payload": {
          "sourceSecretName.$": "$.sourceSecretName",
          "targetSecretName.$": "$.targetSecretName",
          "collections.$": "$.collections",
          "validationType": "pre-migration",
          "deepValidation": false,
          "sampleValidation": true
        }
      },
      "ResultPath": "$.preMigrationValidation",
      "Retry": [
        {
          "ErrorEquals": ["Lambda.ServiceException", "Lambda.AWSLambdaException", "Lambda.SdkClientException"],
          "IntervalSeconds": 2,
          "MaxAttempts": 3,
          "BackoffRate": 2.0
        }
      ],
      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "Next": "MigrationFailed",
          "ResultPath": "$.error"
        }
      ],
      "Next": "CheckPreValidationResults"
    },
    
    "CheckPreValidationResults": {
      "Type": "Choice",
      "Comment": "Check if pre-migration validation passed",
      "Choices": [
        {
          "Variable": "$.preMigrationValidation.Payload.success",
          "BooleanEquals": true,
          "Next": "StartCollectionMigration"
        }
      ],
      "Default": "MigrationFailed"
    },
    
    "StartCollectionMigration": {
      "Type": "Map",
      "Comment": "Migrate each collection in parallel or sequentially",
      "ItemsPath": "$.collections",
      "MaxConcurrency": 2,
      "Parameters": {
        "collectionName.$": "$",
        "sourceSecretName.$": "$.sourceSecretName",
        "targetSecretName.$": "$.targetSecretName",
        "batchSize.$": "$.batchSize",
        "dryRun.$": "$.dryRun",
        "migrationId.$": "$.migrationId"
      },
      "Iterator": {
        "StartAt": "MigrateCollection",
        "States": {
          "MigrateCollection": {
            "Type": "Task",
            "Comment": "Migrate a single collection",
            "Resource": "arn:aws:states:::lambda:invoke",
            "Parameters": {
              "FunctionName": "${MigrationLambdaArn}",
              "Payload": {
                "sourceSecretName.$": "$.sourceSecretName",
                "targetSecretName.$": "$.targetSecretName",
                "collections.$": "States.Array($.collectionName)",
                "dryRun.$": "$.dryRun",
                "skipValidation": true,
                "continueOnError": false
              }
            },
            "ResultPath": "$.migrationResult",
            "Retry": [
              {
                "ErrorEquals": ["Lambda.ServiceException", "Lambda.AWSLambdaException", "Lambda.SdkClientException"],
                "IntervalSeconds": 5,
                "MaxAttempts": 2,
                "BackoffRate": 2.0
              }
            ],
            "Catch": [
              {
                "ErrorEquals": ["States.ALL"],
                "Next": "CollectionMigrationFailed",
                "ResultPath": "$.error"
              }
            ],
            "Next": "ValidateCollectionMigration"
          },
          
          "ValidateCollectionMigration": {
            "Type": "Task",
            "Comment": "Validate individual collection migration",
            "Resource": "arn:aws:states:::lambda:invoke",
            "Parameters": {
              "FunctionName": "${ValidationLambdaArn}",
              "Payload": {
                "sourceSecretName.$": "$.sourceSecretName",
                "targetSecretName.$": "$.targetSecretName",
                "collections.$": "States.Array($.collectionName)",
                "deepValidation": false,
                "sampleValidation": true,
                "checksumValidation": false
              }
            },
            "ResultPath": "$.validationResult",
            "Retry": [
              {
                "ErrorEquals": ["Lambda.ServiceException", "Lambda.AWSLambdaException", "Lambda.SdkClientException"],
                "IntervalSeconds": 2,
                "MaxAttempts": 3,
                "BackoffRate": 2.0
              }
            ],
            "Catch": [
              {
                "ErrorEquals": ["States.ALL"],
                "Next": "CollectionValidationFailed",
                "ResultPath": "$.error"
              }
            ],
            "Next": "CheckCollectionValidation"
          },
          
          "CheckCollectionValidation": {
            "Type": "Choice",
            "Comment": "Check if collection validation passed",
            "Choices": [
              {
                "Variable": "$.validationResult.Payload.success",
                "BooleanEquals": true,
                "Next": "CollectionMigrationSuccess"
              }
            ],
            "Default": "CollectionValidationFailed"
          },
          
          "CollectionMigrationSuccess": {
            "Type": "Pass",
            "Comment": "Collection migration completed successfully",
            "Parameters": {
              "collectionName.$": "$.collectionName",
              "status": "success",
              "migrationResult.$": "$.migrationResult.Payload",
              "validationResult.$": "$.validationResult.Payload"
            },
            "End": true
          },
          
          "CollectionMigrationFailed": {
            "Type": "Pass",
            "Comment": "Collection migration failed",
            "Parameters": {
              "collectionName.$": "$.collectionName",
              "status": "migration_failed",
              "error.$": "$.error"
            },
            "End": true
          },
          
          "CollectionValidationFailed": {
            "Type": "Pass",
            "Comment": "Collection validation failed",
            "Parameters": {
              "collectionName.$": "$.collectionName",
              "status": "validation_failed",
              "migrationResult.$": "$.migrationResult.Payload",
              "validationResult.$": "$.validationResult.Payload"
            },
            "End": true
          }
        }
      },
      "ResultPath": "$.collectionResults",
      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "Next": "MigrationFailed",
          "ResultPath": "$.error"
        }
      ],
      "Next": "CheckMigrationResults"
    },
    
    "CheckMigrationResults": {
      "Type": "Choice",
      "Comment": "Check overall migration results",
      "Choices": [
        {
          "Variable": "$.dryRun",
          "BooleanEquals": true,
          "Next": "DryRunComplete"
        }
      ],
      "Default": "PostMigrationValidation"
    },
    
    "PostMigrationValidation": {
      "Type": "Task",
      "Comment": "Comprehensive validation after migration",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${ValidationLambdaArn}",
        "Payload": {
          "sourceSecretName.$": "$.sourceSecretName",
          "targetSecretName.$": "$.targetSecretName",
          "collections.$": "$.collections",
          "deepValidation": true,
          "sampleValidation": true,
          "checksumValidation": true
        }
      },
      "ResultPath": "$.postMigrationValidation",
      "Retry": [
        {
          "ErrorEquals": ["Lambda.ServiceException", "Lambda.AWSLambdaException", "Lambda.SdkClientException"],
          "IntervalSeconds": 5,
          "MaxAttempts": 2,
          "BackoffRate": 2.0
        }
      ],
      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "Next": "ValidationFailed",
          "ResultPath": "$.error"
        }
      ],
      "Next": "CheckPostValidationResults"
    },
    
    "CheckPostValidationResults": {
      "Type": "Choice",
      "Comment": "Check if post-migration validation passed",
      "Choices": [
        {
          "Variable": "$.postMigrationValidation.Payload.success",
          "BooleanEquals": true,
          "Next": "MigrationComplete"
        }
      ],
      "Default": "ValidationFailed"
    },
    
    "DryRunComplete": {
      "Type": "Pass",
      "Comment": "Dry run completed successfully",
      "Parameters": {
        "status": "dry_run_complete",
        "migrationId.$": "$.migrationId",
        "startTime.$": "$.startTime",
        "endTime.$": "$$.State.EnteredTime",
        "collections.$": "$.collections",
        "collectionResults.$": "$.collectionResults",
        "message": "Dry run completed successfully. No data was actually migrated."
      },
      "End": true
    },
    
    "MigrationComplete": {
      "Type": "Pass",
      "Comment": "Migration completed successfully",
      "Parameters": {
        "status": "migration_complete",
        "migrationId.$": "$.migrationId",
        "startTime.$": "$.startTime",
        "endTime.$": "$$.State.EnteredTime",
        "collections.$": "$.collections",
        "collectionResults.$": "$.collectionResults",
        "preMigrationValidation.$": "$.preMigrationValidation.Payload",
        "postMigrationValidation.$": "$.postMigrationValidation.Payload",
        "message": "Migration completed successfully with full validation."
      },
      "End": true
    },
    
    "ValidationFailed": {
      "Type": "Pass",
      "Comment": "Migration validation failed",
      "Parameters": {
        "status": "validation_failed",
        "migrationId.$": "$.migrationId",
        "startTime.$": "$.startTime",
        "endTime.$": "$$.State.EnteredTime",
        "error.$": "$.error",
        "postMigrationValidation.$": "$.postMigrationValidation.Payload",
        "message": "Migration completed but validation failed. Manual review required."
      },
      "End": true
    },
    
    "MigrationFailed": {
      "Type": "Pass",
      "Comment": "Migration process failed",
      "Parameters": {
        "status": "migration_failed",
        "migrationId.$": "$.migrationId",
        "startTime.$": "$.startTime",
        "endTime.$": "$$.State.EnteredTime",
        "error.$": "$.error",
        "message": "Migration process failed. Check logs and consider rollback."
      },
      "End": true
    }
  }
}